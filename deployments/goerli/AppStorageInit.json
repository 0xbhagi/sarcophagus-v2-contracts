{
  "address": "0xf217dfbA3474490e174a213391655442ac29B67f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "sarcoToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "protocolFeeBasePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gracePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "embalmerClaimWindow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationThreshold",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe86d1fcfd4f842b3c2b3144513c8d7eb81c9a9aa7bb0c60baf810373324d8999",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xDa863f802Cc8CBA3C436bF801BD7785d9E7d4F36",
    "contractAddress": null,
    "transactionIndex": 92,
    "gasUsed": "183742",
    "logsBloom": "0x
    "blockHash": "0xb08690bea97b3b8d34b0d1acbe05042d2c3deb86bc5b000950ff77477a1a382b",
    "transactionHash": "0xe86d1fcfd4f842b3c2b3144513c8d7eb81c9a9aa7bb0c60baf810373324d8999",
    "logs": [],
    "blockNumber": 8738774,
    "cumulativeGasUsed": "19718617",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "d2954766a5257e4e199bc2f01ec40385",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sarcoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeBasePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"embalmerClaimWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationThreshold\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"init(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Add any AppStorage struct properties here to initialize values\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"init(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initializes the app with default state values\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/storage/AppStorageInit.sol\":\"AppStorageInit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title Types shared across facets for the Sarcophagus diamond\\n */\\nlibrary LibTypes {\\n    struct Sarcophagus {\\n        // Also used for existence checks -- does not exist if 0\\n        uint256 resurrectionTime;\\n        uint256 previousRewrapTime;\\n        // todo: run gas cost evaluation on storing isCompromised vs looping through stored archaeologists and checking isAccused\\n        bool isCompromised;\\n        bool isCleaned;\\n        uint8 threshold;\\n        string name;\\n        uint256 maximumRewrapInterval;\\n        uint256 maximumResurrectionTime;\\n        string arweaveTxId;\\n        address embalmerAddress;\\n        address recipientAddress;\\n        address[] cursedArchaeologistAddresses;\\n        mapping(address => CursedArchaeologist) cursedArchaeologists;\\n        uint256 cursedBondPercentage;\\n    }\\n\\n    struct CursedArchaeologist {\\n        uint256 diggingFeePerSecond;\\n        // Also used for publish checks -- has not published if 0\\n        bytes32 privateKey;\\n        // Also used for curse checks -- is not bonded if length is 0\\n        bytes publicKey;\\n        bool isAccused;\\n    }\\n\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct ArchaeologistProfile {\\n        // Also used for existence checks -- does not exist if 0\\n        uint256 maximumRewrapInterval;\\n        uint256 maximumResurrectionTime;\\n        string peerId;\\n        uint256 minimumDiggingFeePerSecond;\\n        uint256 freeBond;\\n        uint256 cursedBond;\\n    }\\n}\\n\",\"keccak256\":\"0xb6ded0e9a252560ab14a589c47df996bcf1f0b9cd4910aa1bf0da6fd01c99232\",\"license\":\"Unlicense\"},\"contracts/storage/AppStorageInit.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\n\\ncontract AppStorageInit {\\n    /// @notice Initializes the app with default state values\\n    /// @dev Add any AppStorage struct properties here to initialize values\\n    function init(\\n        IERC20 sarcoToken,\\n        uint256 protocolFeeBasePercentage,\\n        uint256 gracePeriod,\\n        uint256 embalmerClaimWindow,\\n        uint256 expirationThreshold\\n    ) external {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        s.sarcoToken = sarcoToken;\\n        s.protocolFeeBasePercentage = protocolFeeBasePercentage;\\n        // Init digging fees / cursed bond ratio to 1\\n        s.cursedBondPercentage = 100;\\n        s.gracePeriod = gracePeriod;\\n        s.embalmerClaimWindow = embalmerClaimWindow;\\n        s.expirationThreshold = expirationThreshold;\\n    }\\n}\\n\",\"keccak256\":\"0xd050a66ee562a180967c043c789351a6fd08c4a9a8dfc2384e127985d9b78930\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n/**\\n * Global diamond storage struct to be shared across facets\\n * TODO: Implement diamond storage pattern and consider splitting storage into facet specific structs\\n */\\nstruct AppStorage {\\n    // SARCO token contract\\n    IERC20 sarcoToken;\\n    // total protocol fees available to be withdrawn by the admin\\n    uint256 totalProtocolFees;\\n    /**\\n     * Protocol level admin configurations\\n     */\\n    // % of total digging fees for sarcophagus to charge embalmer on create and rewrap\\n    uint256 protocolFeeBasePercentage;\\n    // % of digging fees archaeologists must have locked up per curse in cursed bond\\n    uint256 cursedBondPercentage;\\n    // grace period an archaeologist is given to resurrect a sarcophagus after the resurrection time\\n    uint256 gracePeriod;\\n    // threshold after which archaeologist signatures on sarcophagus params expire and the sarcophagus must be renegotiated\\n    uint256 expirationThreshold;\\n    // window after end of gracePeriod + resurrectionTime where embalmer can claim remaining bonds from archaeologists that have failed to publish private keys\\n    uint256 embalmerClaimWindow;\\n\\n    // registered archaeologist addresses\\n    address[] archaeologistProfileAddresses;\\n\\n    /**\\n     * Ownership mappings\\n     */\\n    // embalmer address => ids of sarcophagi they've created\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    // archaeologist address =>  ids of sarcophagi they're protecting\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    // recipient address =>  ids of sarcophagi they're recipient on\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n    // public key => archaeologist address\\n    mapping(bytes => address) publicKeyToArchaeologistAddress;\\n    // sarcophagus id => sarcophagus object\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n    // archaeologist address => profile\\n    mapping(address => LibTypes.ArchaeologistProfile) archaeologistProfiles;\\n    // current balance of rewards available for the archaeologist to withdraw\\n    mapping(address => uint256) archaeologistRewards;\\n    /**\\n     * Archaeologist reputation statistics: address => sarcoIds\\n     * todo: could these be organized differently?\\n     */\\n    mapping(address => bytes32[]) archaeologistSuccesses;\\n    mapping(address => bytes32[]) archaeologistAccusals;\\n    mapping(address => bytes32[]) archaeologistCleanups;\\n}\\n\\nlibrary LibAppStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"sarcophagus.storage.SarcophagusGoerliTest\\\");\\n\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b62d6888aeeffbb62ca7fb8a41cccd06524fbe1fc8df144b6f3089983c06564\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061025a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639a73061714610030575b600080fd5b61004a600480360381019061004591906101a9565b61004c565b005b60006100566100d1565b9050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816002018190555060648160030181905550838160040181905550828160060181905550818160050181905550505050505050565b6000807f1464b352a39efde2dd07892d0f2f274ce8052e8749182fc4ead14ba82366194490508091505090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061012e82610103565b9050919050565b600061014082610123565b9050919050565b61015081610135565b811461015b57600080fd5b50565b60008135905061016d81610147565b92915050565b6000819050919050565b61018681610173565b811461019157600080fd5b50565b6000813590506101a38161017d565b92915050565b600080600080600060a086880312156101c5576101c46100fe565b5b60006101d38882890161015e565b95505060206101e488828901610194565b94505060406101f588828901610194565b935050606061020688828901610194565b925050608061021788828901610194565b915050929550929590935056fea26469706673582212203d3b403fabe55888b331b8e257f0cd10b2407c63a88c4638b7d688d6f6c4bc5a64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80639a73061714610030575b600080fd5b61004a600480360381019061004591906101a9565b61004c565b005b60006100566100d1565b9050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816002018190555060648160030181905550838160040181905550828160060181905550818160050181905550505050505050565b6000807f1464b352a39efde2dd07892d0f2f274ce8052e8749182fc4ead14ba82366194490508091505090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061012e82610103565b9050919050565b600061014082610123565b9050919050565b61015081610135565b811461015b57600080fd5b50565b60008135905061016d81610147565b92915050565b6000819050919050565b61018681610173565b811461019157600080fd5b50565b6000813590506101a38161017d565b92915050565b600080600080600060a086880312156101c5576101c46100fe565b5b60006101d38882890161015e565b95505060206101e488828901610194565b94505060406101f588828901610194565b935050606061020688828901610194565b925050608061021788828901610194565b915050929550929590935056fea26469706673582212203d3b403fabe55888b331b8e257f0cd10b2407c63a88c4638b7d688d6f6c4bc5a64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "init(address,uint256,uint256,uint256,uint256)": {
        "details": "Add any AppStorage struct properties here to initialize values"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "init(address,uint256,uint256,uint256,uint256)": {
        "notice": "Initializes the app with default state values"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}