{
  "address": "0xCfd7c63C011E2f3467F49580caC395783aeac663",
  "abi": [
    {
      "inputs": [],
      "name": "CannotSetZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cursedBondPercentage",
          "type": "uint256"
        }
      ],
      "name": "SetCursedBondPercentage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "embalmerClaimWindow",
          "type": "uint256"
        }
      ],
      "name": "SetEmbalmerClaimWindow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expirationThreshold",
          "type": "uint256"
        }
      ],
      "name": "SetExpirationThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "SetGracePeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFeeBasePercentage",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFeeBasePercentage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawProtocolFees",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursedBondPercentage",
          "type": "uint256"
        }
      ],
      "name": "setCursedBondPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "embalmerClaimWindow",
          "type": "uint256"
        }
      ],
      "name": "setEmbalmerClaimWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationThreshold",
          "type": "uint256"
        }
      ],
      "name": "setExpirationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "setGracePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFeeBasePercentage",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeeBasePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c3fcb48acfc02d946700194803dcdd541e82b84fce6adcb735b91f864ab1d63",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xDa863f802Cc8CBA3C436bF801BD7785d9E7d4F36",
    "contractAddress": null,
    "transactionIndex": 129,
    "gasUsed": "445190",
    "logsBloom": "0x
    "blockHash": "0xed3005d3a207711e71ec002449fa13d67788058507f707d855f8d61506653232",
    "transactionHash": "0x1c3fcb48acfc02d946700194803dcdd541e82b84fce6adcb735b91f864ab1d63",
    "logs": [],
    "blockNumber": 8808314,
    "cumulativeGasUsed": "20850691",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "81ad1b682c45487f00525ea51ba5b3ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotSetZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cursedBondPercentage\",\"type\":\"uint256\"}],\"name\":\"SetCursedBondPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"embalmerClaimWindow\",\"type\":\"uint256\"}],\"name\":\"SetEmbalmerClaimWindow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationThreshold\",\"type\":\"uint256\"}],\"name\":\"SetExpirationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"}],\"name\":\"SetGracePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeeBasePercentage\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFeeBasePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawProtocolFees\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursedBondPercentage\",\"type\":\"uint256\"}],\"name\":\"setCursedBondPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"embalmerClaimWindow\",\"type\":\"uint256\"}],\"name\":\"setEmbalmerClaimWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationThreshold\",\"type\":\"uint256\"}],\"name\":\"setExpirationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFeeBasePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeBasePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setCursedBondPercentage(uint256)\":{\"details\":\"Can only be called by the owner.\",\"params\":{\"cursedBondPercentage\":\"ratio to set.\"}},\"setEmbalmerClaimWindow(uint256)\":{\"details\":\"Can only be called by the diamond owner.\",\"params\":{\"embalmerClaimWindow\":\"to set\"}},\"setExpirationThreshold(uint256)\":{\"details\":\"Can only be called by the diamond owner.\",\"params\":{\"expirationThreshold\":\"to set\"}},\"setGracePeriod(uint256)\":{\"details\":\"Can only be called by the diamond owner.\",\"params\":{\"gracePeriod\":\"to set\"}},\"setProtocolFeeBasePercentage(uint256)\":{\"details\":\"Can only be called by the owner.\",\"params\":{\"protocolFeeBasePercentage\":\"percentage to set\"}},\"withdrawProtocolFees()\":{\"details\":\"Can only be called by the owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"CannotSetZeroValue()\":[{\"notice\":\"Admin has attempted to set a zero value\"}]},\"kind\":\"user\",\"methods\":{\"setCursedBondPercentage(uint256)\":{\"notice\":\"Sets the digging fee / cursed bond ratio used to calculate how much bond archaeologists must lock per curse.\"},\"setEmbalmerClaimWindow(uint256)\":{\"notice\":\"Updates the embalmerClaimWindow\"},\"setExpirationThreshold(uint256)\":{\"notice\":\"Updates the expirationThreshold used during sarcophagus creation\"},\"setGracePeriod(uint256)\":{\"notice\":\"Updates the resurrection grace period\"},\"setProtocolFeeBasePercentage(uint256)\":{\"notice\":\"Sets the protocol fee base percentage, used to calculate protocol fees\"},\"withdrawProtocolFees()\":{\"notice\":\"Withdraws the total protocol fee amount from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/AdminFacet.sol\":\"AdminFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/facets/AdminFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\n\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\n\\ncontract AdminFacet {\\n    event SetProtocolFeeBasePercentage(uint256 protocolFeeBasePercentage);\\n    event SetCursedBondPercentage(uint256 cursedBondPercentage);\\n    event WithdrawProtocolFees();\\n    event SetGracePeriod(uint256 gracePeriod);\\n    event SetEmbalmerClaimWindow(uint256 embalmerClaimWindow);\\n    event SetExpirationThreshold(uint256 expirationThreshold);\\n\\n    /// @notice Admin has attempted to set a zero value\\n    error CannotSetZeroValue();\\n\\n    /// @notice Withdraws the total protocol fee amount from the contract.\\n    /// @dev Can only be called by the owner.\\n    function withdrawProtocolFees() external {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        LibDiamond.enforceIsContractOwner();\\n        // Get the total protocol fees from storage\\n        uint256 totalProtocolFees = s.totalProtocolFees;\\n\\n        // Set the total protocol fees to 0 before the transfer to avoid reentrancy\\n        s.totalProtocolFees = 0;\\n\\n        // Transfer the protocol fee amount to the sender after setting state\\n        s.sarcoToken.transfer(msg.sender, totalProtocolFees);\\n\\n        emit WithdrawProtocolFees();\\n    }\\n\\n    /// @notice Sets the protocol fee base percentage, used to calculate protocol fees\\n    /// @param protocolFeeBasePercentage percentage to set\\n    /// @dev Can only be called by the owner.\\n    function setProtocolFeeBasePercentage(uint256 protocolFeeBasePercentage) external {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.protocolFeeBasePercentage = protocolFeeBasePercentage;\\n        emit SetProtocolFeeBasePercentage(protocolFeeBasePercentage);\\n    }\\n\\n    /// @notice Sets the digging fee / cursed bond ratio\\n    /// used to calculate how much bond archaeologists must lock per curse.\\n    /// @param cursedBondPercentage ratio to set.\\n    /// @dev Can only be called by the owner.\\n    function setCursedBondPercentage(uint256 cursedBondPercentage) external {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        if (cursedBondPercentage == 0) {\\n            revert CannotSetZeroValue();\\n        }\\n        s.cursedBondPercentage = cursedBondPercentage;\\n        emit SetCursedBondPercentage(cursedBondPercentage);\\n    }\\n\\n    /// @notice Updates the resurrection grace period\\n    /// @param gracePeriod to set\\n    /// @dev Can only be called by the diamond owner.\\n    function setGracePeriod(uint256 gracePeriod) external {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.gracePeriod = gracePeriod;\\n        emit SetGracePeriod(gracePeriod);\\n    }\\n\\n    /// @notice Updates the embalmerClaimWindow\\n    /// @param embalmerClaimWindow to set\\n    /// @dev Can only be called by the diamond owner.\\n    function setEmbalmerClaimWindow(uint256 embalmerClaimWindow) external {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.embalmerClaimWindow = embalmerClaimWindow;\\n        emit SetEmbalmerClaimWindow(embalmerClaimWindow);\\n    }\\n\\n    /// @notice Updates the expirationThreshold used during sarcophagus creation\\n    /// @param expirationThreshold to set\\n    /// @dev Can only be called by the diamond owner.\\n    function setExpirationThreshold(uint256 expirationThreshold) external {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.expirationThreshold = expirationThreshold;\\n        emit SetExpirationThreshold(expirationThreshold);\\n    }\\n}\\n\",\"keccak256\":\"0xde203fb8331cb1a3fe12aac1efedb5c714f15023c38049de059ac3fa7550d6ee\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title Types shared across facets for the Sarcophagus diamond\\n */\\nlibrary LibTypes {\\n    struct Sarcophagus {\\n        // Also used for existence checks -- does not exist if 0\\n        uint256 resurrectionTime;\\n        uint256 previousRewrapTime;\\n        // todo: run gas cost evaluation on storing isCompromised vs looping through stored archaeologists and checking isAccused\\n        bool isCompromised;\\n        bool isCleaned;\\n        bool isRewrapped;\\n        uint8 threshold;\\n        string name;\\n        uint256 maximumRewrapInterval;\\n        uint256 maximumResurrectionTime;\\n        string arweaveTxId;\\n        address embalmerAddress;\\n        address recipientAddress;\\n        address[] cursedArchaeologistAddresses;\\n        mapping(address => CursedArchaeologist) cursedArchaeologists;\\n        uint256 cursedBondPercentage;\\n    }\\n\\n    struct CursedArchaeologist {\\n        uint256 diggingFeePerSecond;\\n        // Also used for publish checks -- has not published if 0\\n        bytes32 privateKey;\\n        // Also used for curse checks -- is not bonded if length is 0\\n        bytes publicKey;\\n        bool isAccused;\\n        uint256 curseFee;\\n    }\\n\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct ArchaeologistProfile {\\n        // Also used for existence checks -- does not exist if 0\\n        uint256 maximumRewrapInterval;\\n        uint256 maximumResurrectionTime;\\n        string peerId;\\n        uint256 minimumDiggingFeePerSecond;\\n        uint256 freeBond;\\n        uint256 cursedBond;\\n        uint256 curseFee;\\n    }\\n}\\n\",\"keccak256\":\"0x1d0b42de0dec8ddf3d1569747f4e5facda08be16f45cbe698764006f8b13af5e\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n/**\\n * Global diamond storage struct to be shared across facets\\n * TODO: Implement diamond storage pattern and consider splitting storage into facet specific structs\\n */\\nstruct AppStorage {\\n    // SARCO token contract\\n    IERC20 sarcoToken;\\n    // total protocol fees available to be withdrawn by the admin\\n    uint256 totalProtocolFees;\\n    /**\\n     * Protocol level admin configurations\\n     */\\n    // % of total digging fees for sarcophagus to charge embalmer on create and rewrap\\n    uint256 protocolFeeBasePercentage;\\n    // % of digging fees archaeologists must have locked up per curse in cursed bond\\n    uint256 cursedBondPercentage;\\n    // grace period an archaeologist is given to resurrect a sarcophagus after the resurrection time\\n    uint256 gracePeriod;\\n    // threshold after which archaeologist signatures on sarcophagus params expire and the sarcophagus must be renegotiated\\n    uint256 expirationThreshold;\\n    // window after end of gracePeriod + resurrectionTime where embalmer can claim remaining bonds from archaeologists that have failed to publish private keys\\n    uint256 embalmerClaimWindow;\\n    // registered archaeologist addresses\\n    address[] archaeologistProfileAddresses;\\n    /**\\n     * Ownership mappings\\n     */\\n    // embalmer address => ids of sarcophagi they've created\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    // archaeologist address =>  ids of sarcophagi they're protecting\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    // recipient address =>  ids of sarcophagi they're recipient on\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n    // public key => archaeologist address\\n    mapping(bytes => address) publicKeyToArchaeologistAddress;\\n    // sarcophagus id => sarcophagus object\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n    // archaeologist address => profile\\n    mapping(address => LibTypes.ArchaeologistProfile) archaeologistProfiles;\\n    // current balance of rewards available for the archaeologist to withdraw\\n    mapping(address => uint256) archaeologistRewards;\\n}\\n\\nlibrary LibAppStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"sarcophagus.storage.SarcophagusGoerliTestCurseFee\\\");\\n\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x308162b5ff6b83c7ba575d890e4abb723928a8bcc217e54f5c2da916e94d297f\",\"license\":\"Unlicense\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610718806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063274f255e146100675780636430ae6a146100835780638795cccb1461009f5780638a5b5690146100a9578063a828c479146100c5578063f2f65960146100e1575b600080fd5b610081600480360381019061007c9190610519565b6100fd565b005b61009d60048036038101906100989190610519565b610155565b005b6100a76101e7565b005b6100c360048036038101906100be9190610519565b6102e1565b005b6100df60048036038101906100da9190610519565b610339565b005b6100fb60048036038101906100f69190610519565b610391565b005b60006101076103e9565b9050610111610416565b8181600601819055507f3d58bff47ca074037a5dcd57740255670d45843115cca9c9bc442eb6d3f0ad78826040516101499190610555565b60405180910390a15050565b600061015f6103e9565b9050610169610416565b600082036101a3576040517f4a8fadb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181600301819055507f4aeca9f26d25b33ee1b2c061ab4a849de97bfb592e7dfb276c9ded12d0ad56a2826040516101db9190610555565b60405180910390a15050565b60006101f16103e9565b90506101fb610416565b600081600101549050600082600101819055508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161026d9291906105b1565b6020604051808303816000875af115801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b09190610612565b507f558eb14a73cb63759eec52b44eec0095bd8c7a232c14f47442e841e39fdff99460405160405180910390a15050565b60006102eb6103e9565b90506102f5610416565b8181600201819055507f4768bb3a79cb8de7ec3c4c950f9f76fbe4588407c214998efbf648001c858e9b8260405161032d9190610555565b60405180910390a15050565b60006103436103e9565b905061034d610416565b8181600501819055507f047ca17cdae34ccbd8db62138d05e11962458ffd86009620909ba6ad606282ad826040516103859190610555565b60405180910390a15050565b600061039b6103e9565b90506103a5610416565b8181600401819055507f848ba7852320e491d84ddc22f1f12fe48672aa22757fc4452703c9046d9982d7826040516103dd9190610555565b60405180910390a15050565b6000807fa223312a216e34e17ad102c9d81ce3c0d9a16b0fce2a477c118cde325d32220690508091505090565b61041e6104b1565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a6906106c2565b60405180910390fd5b565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b600080fd5b6000819050919050565b6104f6816104e3565b811461050157600080fd5b50565b600081359050610513816104ed565b92915050565b60006020828403121561052f5761052e6104de565b5b600061053d84828501610504565b91505092915050565b61054f816104e3565b82525050565b600060208201905061056a6000830184610546565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061059b82610570565b9050919050565b6105ab81610590565b82525050565b60006040820190506105c660008301856105a2565b6105d36020830184610546565b9392505050565b60008115159050919050565b6105ef816105da565b81146105fa57600080fd5b50565b60008151905061060c816105e6565b92915050565b600060208284031215610628576106276104de565b5b6000610636848285016105fd565b91505092915050565b600082825260208201905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b60006106ac60228361063f565b91506106b782610650565b604082019050919050565b600060208201905081810360008301526106db8161069f565b905091905056fea26469706673582212200b3b6197ccef3497ad8975c1e471f8fc3b59fb00ae421a88df8bea040e03527664736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063274f255e146100675780636430ae6a146100835780638795cccb1461009f5780638a5b5690146100a9578063a828c479146100c5578063f2f65960146100e1575b600080fd5b610081600480360381019061007c9190610519565b6100fd565b005b61009d60048036038101906100989190610519565b610155565b005b6100a76101e7565b005b6100c360048036038101906100be9190610519565b6102e1565b005b6100df60048036038101906100da9190610519565b610339565b005b6100fb60048036038101906100f69190610519565b610391565b005b60006101076103e9565b9050610111610416565b8181600601819055507f3d58bff47ca074037a5dcd57740255670d45843115cca9c9bc442eb6d3f0ad78826040516101499190610555565b60405180910390a15050565b600061015f6103e9565b9050610169610416565b600082036101a3576040517f4a8fadb900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181600301819055507f4aeca9f26d25b33ee1b2c061ab4a849de97bfb592e7dfb276c9ded12d0ad56a2826040516101db9190610555565b60405180910390a15050565b60006101f16103e9565b90506101fb610416565b600081600101549050600082600101819055508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161026d9291906105b1565b6020604051808303816000875af115801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b09190610612565b507f558eb14a73cb63759eec52b44eec0095bd8c7a232c14f47442e841e39fdff99460405160405180910390a15050565b60006102eb6103e9565b90506102f5610416565b8181600201819055507f4768bb3a79cb8de7ec3c4c950f9f76fbe4588407c214998efbf648001c858e9b8260405161032d9190610555565b60405180910390a15050565b60006103436103e9565b905061034d610416565b8181600501819055507f047ca17cdae34ccbd8db62138d05e11962458ffd86009620909ba6ad606282ad826040516103859190610555565b60405180910390a15050565b600061039b6103e9565b90506103a5610416565b8181600401819055507f848ba7852320e491d84ddc22f1f12fe48672aa22757fc4452703c9046d9982d7826040516103dd9190610555565b60405180910390a15050565b6000807fa223312a216e34e17ad102c9d81ce3c0d9a16b0fce2a477c118cde325d32220690508091505090565b61041e6104b1565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a6906106c2565b60405180910390fd5b565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b600080fd5b6000819050919050565b6104f6816104e3565b811461050157600080fd5b50565b600081359050610513816104ed565b92915050565b60006020828403121561052f5761052e6104de565b5b600061053d84828501610504565b91505092915050565b61054f816104e3565b82525050565b600060208201905061056a6000830184610546565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061059b82610570565b9050919050565b6105ab81610590565b82525050565b60006040820190506105c660008301856105a2565b6105d36020830184610546565b9392505050565b60008115159050919050565b6105ef816105da565b81146105fa57600080fd5b50565b60008151905061060c816105e6565b92915050565b600060208284031215610628576106276104de565b5b6000610636848285016105fd565b91505092915050565b600082825260208201905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b60006106ac60228361063f565b91506106b782610650565b604082019050919050565b600060208201905081810360008301526106db8161069f565b905091905056fea26469706673582212200b3b6197ccef3497ad8975c1e471f8fc3b59fb00ae421a88df8bea040e03527664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setCursedBondPercentage(uint256)": {
        "details": "Can only be called by the owner.",
        "params": {
          "cursedBondPercentage": "ratio to set."
        }
      },
      "setEmbalmerClaimWindow(uint256)": {
        "details": "Can only be called by the diamond owner.",
        "params": {
          "embalmerClaimWindow": "to set"
        }
      },
      "setExpirationThreshold(uint256)": {
        "details": "Can only be called by the diamond owner.",
        "params": {
          "expirationThreshold": "to set"
        }
      },
      "setGracePeriod(uint256)": {
        "details": "Can only be called by the diamond owner.",
        "params": {
          "gracePeriod": "to set"
        }
      },
      "setProtocolFeeBasePercentage(uint256)": {
        "details": "Can only be called by the owner.",
        "params": {
          "protocolFeeBasePercentage": "percentage to set"
        }
      },
      "withdrawProtocolFees()": {
        "details": "Can only be called by the owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotSetZeroValue()": [
        {
          "notice": "Admin has attempted to set a zero value"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "setCursedBondPercentage(uint256)": {
        "notice": "Sets the digging fee / cursed bond ratio used to calculate how much bond archaeologists must lock per curse."
      },
      "setEmbalmerClaimWindow(uint256)": {
        "notice": "Updates the embalmerClaimWindow"
      },
      "setExpirationThreshold(uint256)": {
        "notice": "Updates the expirationThreshold used during sarcophagus creation"
      },
      "setGracePeriod(uint256)": {
        "notice": "Updates the resurrection grace period"
      },
      "setProtocolFeeBasePercentage(uint256)": {
        "notice": "Sets the protocol fee base percentage, used to calculate protocol fees"
      },
      "withdrawProtocolFees()": {
        "notice": "Withdraws the total protocol fee amount from the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}