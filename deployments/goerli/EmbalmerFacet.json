{
  "address": "0x0959fBc17F350f5400d6e06E76F613B89826FC4E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologistAddress",
          "type": "address"
        }
      ],
      "name": "ArchaeologistListNotUnique",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistProfileExistsShouldBe",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recoveredAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expectedAddress",
          "type": "address"
        }
      ],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "minShards",
          "type": "uint8"
        }
      ],
      "name": "MinShardsGreaterThanArchaeologists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinShardsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newResurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "NewResurrectionTimeInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newResurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "NewResurrectionTimeTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoArchaeologistsProvided",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursedBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughCursedBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughFreeBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "ResurrectionTimeInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sarcophagusMaximumRewrapInterval",
          "type": "uint256"
        }
      ],
      "name": "ResurrectionTimeTooFarInFuture",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusCompromised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SarcophagusIsUnwrappable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SarcophagusParametersExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "embalmer",
          "type": "address"
        }
      ],
      "name": "SenderNotEmbalmer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "BurySarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "embalmer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "cursedArchaeologists",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDiggingFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "createSarcophagusProtocolFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[2]",
          "name": "arweaveTxIds",
          "type": "string[2]"
        }
      ],
      "name": "CreateSarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDiggingFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewrapSarcophagusProtocolFees",
          "type": "uint256"
        }
      ],
      "name": "RewrapSarcophagus",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "burySarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "recipientAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "resurrectionTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumRewrapInterval",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "threshold",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct EmbalmerFacet.SarcophagusParams",
          "name": "sarcophagusParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "archAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "diggingFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "doubleHashedKeyShare",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct EmbalmerFacet.SelectedArchaeologistData[]",
          "name": "selectedArchaeologists",
          "type": "tuple[]"
        },
        {
          "internalType": "string[2]",
          "name": "arweaveTxIds",
          "type": "string[2]"
        }
      ],
      "name": "createSarcophagus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "rewrapSarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "24da3a57fc1d823ed9295677fe86dbd6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologistAddress\",\"type\":\"address\"}],\"name\":\"ArchaeologistListNotUnique\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistProfileExistsShouldBe\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recoveredAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedAddress\",\"type\":\"address\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minShards\",\"type\":\"uint8\"}],\"name\":\"MinShardsGreaterThanArchaeologists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinShardsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newResurrectionTime\",\"type\":\"uint256\"}],\"name\":\"NewResurrectionTimeInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newResurrectionTime\",\"type\":\"uint256\"}],\"name\":\"NewResurrectionTimeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoArchaeologistsProvided\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursedBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughCursedBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFreeBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"}],\"name\":\"ResurrectionTimeInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sarcophagusMaximumRewrapInterval\",\"type\":\"uint256\"}],\"name\":\"ResurrectionTimeTooFarInFuture\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusCompromised\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SarcophagusIsUnwrappable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SarcophagusParametersExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"embalmer\",\"type\":\"address\"}],\"name\":\"SenderNotEmbalmer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"BurySarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"embalmer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cursedArchaeologists\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDiggingFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createSarcophagusProtocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[2]\",\"name\":\"arweaveTxIds\",\"type\":\"string[2]\"}],\"name\":\"CreateSarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDiggingFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewrapSarcophagusProtocolFees\",\"type\":\"uint256\"}],\"name\":\"RewrapSarcophagus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"burySarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EmbalmerFacet.SarcophagusParams\",\"name\":\"sarcophagusParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"archAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"diggingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"doubleHashedKeyShare\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct EmbalmerFacet.SelectedArchaeologistData[]\",\"name\":\"selectedArchaeologists\",\"type\":\"tuple[]\"},{\"internalType\":\"string[2]\",\"name\":\"arweaveTxIds\",\"type\":\"string[2]\"}],\"name\":\"createSarcophagus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"}],\"name\":\"rewrapSarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burySarcophagus(bytes32)\":{\"params\":{\"sarcoId\":\"the identifier of the sarcophagus\"}},\"createSarcophagus(bytes32,(string,address,uint256,uint256,uint8,uint256),(address,uint256,bytes32,uint8,bytes32,bytes32)[],string[2])\":{\"params\":{\"arweaveTxIds\":\"ordered pair of arweave tx ids: [sarcophagus payload tx, encrypted key share tx]\",\"sarcoId\":\"the identifier of the sarcophagus\",\"sarcophagusParams\":\"params to set on sarcophagus being created\",\"selectedArchaeologists\":\"the archaeologists the embalmer has selected to curse\"},\"returns\":{\"_0\":\"The index of the new sarcophagus in sarcophagusIdentifiers\"}},\"rewrapSarcophagus(bytes32,uint256)\":{\"params\":{\"resurrectionTime\":\"the new resurrection time\",\"sarcoId\":\"the identifier of the sarcophagus\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burySarcophagus(bytes32)\":{\"notice\":\"Terminates a sarcophagus by setting its resurrection time to infinity and returning locked bonds to all cursed archaeologists. Callable by the embalmer of a sarcophagus if its resurrection time has not passed, it has not been compromised by >k accusals, and it has not been buried.\"},\"createSarcophagus(bytes32,(string,address,uint256,uint256,uint8,uint256),(address,uint256,bytes32,uint8,bytes32,bytes32)[],string[2])\":{\"notice\":\"Creates a sarcophagus with the supplied parameters and locks a portion of each archaeologist's freeBond equal to the diggingFees for the sarcophagus. Verifies that all supplied archaeologists have signed off on    - doubleHashedKeyShare assigned to them    - arweaveTxId for encrypted keyshares    - maximumRewrapInterval to be enforced for the lifetime of the sarcophagus    - creationTime of sarcophagus    - diggingFee to be paid to that archaeologist on all rewraps for the lifetime of the sarcophagus\"},\"rewrapSarcophagus(bytes32,uint256)\":{\"notice\":\"Updates the resurrectionTime on a sarcophagus. Callable by the embalmer of a sarcophagus if its resurrection time has not passed, it has not been compromised by >k accusals, and it has not been buried.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/EmbalmerFacet.sol\":\"EmbalmerFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/facets/EmbalmerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\nimport {LibBonds} from \\\"../libraries/LibBonds.sol\\\";\\nimport {LibUtils} from \\\"../libraries/LibUtils.sol\\\";\\nimport {AppStorage} from \\\"../storage/LibAppStorage.sol\\\";\\n\\ncontract EmbalmerFacet {\\n    // IMPORTANT: AppStorage must be the first state variable in the facet.\\n    AppStorage internal s;\\n\\n    event CreateSarcophagus(\\n        bytes32 indexed sarcoId,\\n        string name,\\n        uint256 resurrectionTime,\\n        address embalmer,\\n        address recipient,\\n        address[] cursedArchaeologists,\\n        uint256 totalDiggingFees,\\n        uint256 createSarcophagusProtocolFees,\\n        string[2] arweaveTxIds\\n    );\\n\\n    event RewrapSarcophagus(\\n        bytes32 indexed sarcoId,\\n        uint256 resurrectionTime,\\n        uint256 totalDiggingFees,\\n        uint256 rewrapSarcophagusProtocolFees\\n    );\\n\\n    event BurySarcophagus(bytes32 indexed sarcoId);\\n\\n    /**\\n     * Parameters for a sarcophagus, supplied during creation\\n     * maximumRewrapInterval - highest rewrap interval bonded archaeologists have agreed to accept for lifetime of sarcophagus\\n     */\\n    struct SarcophagusParams {\\n        string name;\\n        address recipientAddress;\\n        uint256 resurrectionTime;\\n        uint256 maximumRewrapInterval;\\n        uint8 threshold;\\n        uint256 creationTime;\\n    }\\n\\n    /**\\n     * Parameters for an archaeologist's curse, supplied during sarcophagus creation\\n     * diggingFee - diggingFee archaeologist has agreed to receive on sarcophagus for its entire lifetime\\n     */\\n    struct SelectedArchaeologistData {\\n        address archAddress;\\n        uint256 diggingFee;\\n        bytes32 doubleHashedKeyShare;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// @notice Creates a sarcophagus with the supplied parameters and locks\\n    /// a portion of each archaeologist's freeBond equal to the diggingFees for the sarcophagus.\\n    /// Verifies that all supplied archaeologists have signed off on\\n    ///    - doubleHashedKeyShare assigned to them\\n    ///    - arweaveTxId for encrypted keyshares\\n    ///    - maximumRewrapInterval to be enforced for the lifetime of the sarcophagus\\n    ///    - creationTime of sarcophagus\\n    ///    - diggingFee to be paid to that archaeologist on all rewraps for the lifetime of the sarcophagus\\n    ///\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param sarcophagusParams params to set on sarcophagus being created\\n    /// @param selectedArchaeologists the archaeologists the embalmer has selected to curse\\n    /// @param arweaveTxIds ordered pair of arweave tx ids: [sarcophagus payload tx, encrypted key share tx]\\n    /// @return The index of the new sarcophagus in sarcophagusIdentifiers\\n    function createSarcophagus(\\n        bytes32 sarcoId,\\n        SarcophagusParams calldata sarcophagusParams,\\n        SelectedArchaeologistData[] calldata selectedArchaeologists,\\n        string[2] memory arweaveTxIds\\n    ) external returns (uint256) {\\n        // Confirm that sarcophagus with supplied id doesn't already exist\\n        if (s.sarcophagi[sarcoId].resurrectionTime > 0) {\\n            revert LibErrors.SarcophagusAlreadyExists(sarcoId);\\n        }\\n\\n        // Confirm that agreed upon sarcophagus parameters have not expired\\n        if (block.timestamp > sarcophagusParams.creationTime + s.expirationThreshold) {\\n            revert LibErrors.SarcophagusParametersExpired(sarcophagusParams.creationTime);\\n        }\\n\\n        // Confirm that resurrection time is in the future\\n        if (block.timestamp >= sarcophagusParams.resurrectionTime) {\\n            revert LibErrors.ResurrectionTimeInPast(sarcophagusParams.resurrectionTime);\\n        }\\n\\n        // Confirm that resurrection or rewrap will occur before the maximumRewrapInterval elapses\\n        if (\\n            block.timestamp + sarcophagusParams.maximumRewrapInterval <\\n            sarcophagusParams.resurrectionTime\\n        ) {\\n            revert LibErrors.ResurrectionTimeTooFarInFuture(\\n                sarcophagusParams.resurrectionTime,\\n                sarcophagusParams.maximumRewrapInterval\\n            );\\n        }\\n\\n        // Confirm that archaeologists are provided\\n        if (selectedArchaeologists.length == 0) {\\n            revert LibErrors.NoArchaeologistsProvided();\\n        }\\n        // Confirm that threshold is greater than 0\\n        if (sarcophagusParams.threshold == 0) {\\n            revert LibErrors.MinShardsZero();\\n        }\\n        // Confirm that threshold is less than or equal to the number of archaeologists\\n        // (k <= n in a shamir secret sharing scheme)\\n        if (sarcophagusParams.threshold > selectedArchaeologists.length) {\\n            revert LibErrors.MinShardsGreaterThanArchaeologists(sarcophagusParams.threshold);\\n        }\\n\\n        // create the sarcophagus\\n        LibTypes.Sarcophagus storage sarcophagus = s.sarcophagi[sarcoId];\\n        sarcophagus.name = sarcophagusParams.name;\\n        sarcophagus.threshold = sarcophagusParams.threshold;\\n        sarcophagus.resurrectionTime = sarcophagusParams.resurrectionTime;\\n        sarcophagus.maximumRewrapInterval = sarcophagusParams.maximumRewrapInterval;\\n        sarcophagus.arweaveTxIds = arweaveTxIds;\\n        sarcophagus.embalmerAddress = msg.sender;\\n        sarcophagus.recipientAddress = sarcophagusParams.recipientAddress;\\n        sarcophagus.cursedArchaeologistAddresses = new address[](selectedArchaeologists.length);\\n\\n        // track total digging fees due upon creation of sarcophagus\\n        uint256 totalDiggingFees = 0;\\n\\n        for (uint256 i = 0; i < selectedArchaeologists.length; i++) {\\n            // confirm archaeologist is registered\\n            LibUtils.revertIfArchProfileDoesNotExist(selectedArchaeologists[i].archAddress);\\n\\n            // Confirm archaeologist isn't already cursed on sarcophagus\\n            if (\\n                sarcophagus.cursedArchaeologists[selectedArchaeologists[i].archAddress].doubleHashedKeyShare != 0\\n            ) {\\n                revert LibErrors.ArchaeologistListNotUnique(selectedArchaeologists[i].archAddress);\\n            }\\n\\n            // Validate the archaeologist has signed off on the sarcophagus parameters\\n            LibUtils.verifyArchaeologistSignature(\\n                selectedArchaeologists[i].doubleHashedKeyShare,\\n                arweaveTxIds[1],\\n                sarcophagusParams.maximumRewrapInterval,\\n                sarcophagusParams.creationTime,\\n                selectedArchaeologists[i].diggingFee,\\n                selectedArchaeologists[i].v,\\n                selectedArchaeologists[i].r,\\n                selectedArchaeologists[i].s,\\n                selectedArchaeologists[i].archAddress\\n            );\\n\\n            totalDiggingFees += selectedArchaeologists[i].diggingFee;\\n\\n            // Lock the archaeologist's free bond\\n            LibBonds.lockUpBond(selectedArchaeologists[i].archAddress, selectedArchaeologists[i].diggingFee);\\n\\n            // save the cursedArchaeologist and cursedArchaeologistAddress to be stored on the new sarcophagus\\n            sarcophagus.cursedArchaeologists[selectedArchaeologists[i].archAddress] = LibTypes\\n                .CursedArchaeologist({\\n                    isAccused: false,\\n                    diggingFee: selectedArchaeologists[i].diggingFee,\\n                    doubleHashedKeyShare: selectedArchaeologists[i].doubleHashedKeyShare,\\n                    rawKeyShare: \\\"\\\"\\n                });\\n\\n\\n            sarcophagus.cursedArchaeologistAddresses[i] = selectedArchaeologists[i].archAddress;\\n\\n            // update archaeologist-specific convenience lookup structures\\n            s.doubleHashedShardArchaeologists[\\n                selectedArchaeologists[i].doubleHashedKeyShare\\n            ] = selectedArchaeologists[i].archAddress;\\n            s.archaeologistSarcophagi[selectedArchaeologists[i].archAddress].push(sarcoId);\\n        }\\n\\n        // update sarcophagus-specific convenience lookup structures\\n        s.sarcophagusIdentifiers.push(sarcoId);\\n        s.embalmerSarcophagi[msg.sender].push(sarcoId);\\n        s.recipientSarcophagi[sarcophagusParams.recipientAddress].push(sarcoId);\\n\\n        // Transfer totalDiggingFees and the protocolFees in SARCO from embalmer to this contract\\n        uint256 protocolFees = LibUtils.calculateProtocolFees(totalDiggingFees);\\n        s.totalProtocolFees += protocolFees;\\n        s.sarcoToken.transferFrom(msg.sender, address(this), totalDiggingFees + protocolFees);\\n\\n        emit CreateSarcophagus(\\n            sarcoId,\\n            sarcophagusParams.name,\\n            sarcophagusParams.resurrectionTime,\\n            msg.sender,\\n            sarcophagusParams.recipientAddress,\\n            sarcophagus.cursedArchaeologistAddresses,\\n            totalDiggingFees,\\n            protocolFees,\\n            arweaveTxIds\\n        );\\n\\n        // return index of sarcophagus in sarcophagusIdentifiers\\n        return s.sarcophagusIdentifiers.length - 1;\\n    }\\n\\n    /// @notice Updates the resurrectionTime on a sarcophagus. Callable by the embalmer of a sarcophagus if its\\n    /// resurrection time has not passed, it has not been compromised by >k accusals, and it has not been buried.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param resurrectionTime the new resurrection time\\n    function rewrapSarcophagus(bytes32 sarcoId, uint256 resurrectionTime) external {\\n        LibTypes.Sarcophagus storage sarcophagus = s.sarcophagi[sarcoId];\\n\\n        // Confirm the sarcophagus exists\\n        if (sarcophagus.resurrectionTime == 0) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        // Confirm the sarcophagus has not been compromised\\n        if (sarcophagus.isCompromised) {\\n            revert LibErrors.SarcophagusCompromised(sarcoId);\\n        }\\n\\n        // Confirm the sarcophagus is not buried\\n        if (sarcophagus.resurrectionTime == 2**256 - 1) {\\n            revert LibErrors.SarcophagusInactive(sarcoId);\\n        }\\n\\n        // Confirm tx sender is embalmer\\n        if (sarcophagus.embalmerAddress != msg.sender) {\\n            revert LibErrors.SenderNotEmbalmer(msg.sender, sarcophagus.embalmerAddress);\\n        }\\n\\n        // Confirm resurrection time has not yet passed\\n        if (sarcophagus.resurrectionTime <= block.timestamp) {\\n            revert LibErrors.SarcophagusIsUnwrappable();\\n        }\\n\\n        // Confirm that new resurrection time is in future\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.NewResurrectionTimeInPast(resurrectionTime);\\n        }\\n\\n        // Confirm that new resurrection time doesn't exceed sarcophagus's maximumRewrapInterval\\n        if (resurrectionTime > block.timestamp + sarcophagus.maximumRewrapInterval) {\\n            revert LibErrors.NewResurrectionTimeTooLarge(resurrectionTime);\\n        }\\n\\n        // track total digging fees across all archaeologists on the sarcophagus\\n        uint256 totalDiggingFees = 0;\\n\\n        // pay digging fee to each cursed archaeologist on the sarcophagus\\n        address[] storage archaeologistAddresses = sarcophagus.cursedArchaeologistAddresses;\\n        for (uint256 i = 0; i < archaeologistAddresses.length; i++) {\\n            LibTypes.CursedArchaeologist storage cursedArchaeologist = sarcophagus\\n                .cursedArchaeologists[archaeologistAddresses[i]];\\n\\n            // transfer digging fee to archaeologist's reward pool\\n            s.archaeologistRewards[archaeologistAddresses[i]] += cursedArchaeologist.diggingFee;\\n            totalDiggingFees += cursedArchaeologist.diggingFee;\\n        }\\n\\n        uint256 protocolFees = LibUtils.calculateProtocolFees(totalDiggingFees);\\n\\n        // Add the protocol fee to the total protocol fees in storage\\n        s.totalProtocolFees += protocolFees;\\n\\n        // Update the resurrectionTime on the sarcophagus to the supplied value\\n        sarcophagus.resurrectionTime = resurrectionTime;\\n\\n        // Transfer the new digging fees and protocol fees from embalmer to contract\\n        s.sarcoToken.transferFrom(msg.sender, address(this), totalDiggingFees + protocolFees);\\n\\n        emit RewrapSarcophagus(sarcoId, resurrectionTime, totalDiggingFees, protocolFees);\\n    }\\n\\n    /// @notice Terminates a sarcophagus by setting its resurrection time to infinity and returning locked\\n    /// bonds to all cursed archaeologists. Callable by the embalmer of a sarcophagus if its\\n    /// resurrection time has not passed, it has not been compromised by >k accusals, and it has not been buried.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    function burySarcophagus(bytes32 sarcoId) external {\\n        LibTypes.Sarcophagus storage sarcophagus = s.sarcophagi[sarcoId];\\n\\n        // Confirm the sarcophagus exists\\n        if (sarcophagus.resurrectionTime == 0) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        // Confirm the sarcophagus has not been compromised\\n        if (sarcophagus.isCompromised) {\\n            revert LibErrors.SarcophagusCompromised(sarcoId);\\n        }\\n\\n        // Confirm the sarcophagus is not buried\\n        if (sarcophagus.resurrectionTime == 2**256 - 1) {\\n            revert LibErrors.SarcophagusInactive(sarcoId);\\n        }\\n\\n        // Confirm tx sender is embalmer\\n        if (sarcophagus.embalmerAddress != msg.sender) {\\n            revert LibErrors.SenderNotEmbalmer(msg.sender, sarcophagus.embalmerAddress);\\n        }\\n        // Confirm that the current resurrection time is in the future\\n        if (sarcophagus.resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(sarcophagus.resurrectionTime);\\n        }\\n\\n        // Set resurrection time to infinity\\n        sarcophagus.resurrectionTime = 2**256 - 1;\\n\\n        // for each archaeologist on the sarcophagus, unlock bond and pay digging fees\\n        address[] storage archaeologistAddresses = sarcophagus.cursedArchaeologistAddresses;\\n        for (uint256 i = 0; i < archaeologistAddresses.length; i++) {\\n            // return locked bond to archaeologist\\n            LibBonds.freeArchaeologist(sarcoId, archaeologistAddresses[i]);\\n            // Transfer the digging fees to the archaeologist's reward pool\\n            LibTypes.CursedArchaeologist storage cursedArchaeologist = sarcophagus\\n                .cursedArchaeologists[archaeologistAddresses[i]];\\n            s.archaeologistRewards[archaeologistAddresses[i]] += cursedArchaeologist.diggingFee;\\n        }\\n\\n        emit BurySarcophagus(sarcoId);\\n    }\\n}\\n\",\"keccak256\":\"0xf6e2f2577b553df0d77664f7be62568b9dfde2adf633f9827d4c15c5ad452010\",\"license\":\"Unlicense\"},\"contracts/libraries/LibBonds.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\nlibrary LibBonds {\\n    /// @notice Decreases the amount stored in the freeBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's free bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function decreaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current free bond\\n        if (amount > s.archaeologistProfiles[archaeologist].freeBond) {\\n            revert LibErrors.NotEnoughFreeBond(\\n                s.archaeologistProfiles[archaeologist].freeBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the freeBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function increaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond += amount;\\n    }\\n\\n    /// @notice Decreases the amount stored in the cursedBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's cursed bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function decreaseCursedBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current cursed bond\\n        if (amount > s.archaeologistProfiles[archaeologist].cursedBond) {\\n            revert LibErrors.NotEnoughCursedBond(\\n                s.archaeologistProfiles[archaeologist].cursedBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the cursedBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function increaseCursedBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond += amount;\\n    }\\n\\n    /// @notice Locks up the archaeologist's bond, decreasing the\\n    /// archaeologist's free bond by an amount and increasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to lock up\\n    function lockUpBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the free bond amount\\n        decreaseFreeBond(archaeologist, amount);\\n\\n        // Increase the cursed bond amount\\n        increaseCursedBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Unlocks the archaeologist's bond, increasing the\\n    /// archaeologist's free bond by an amount and decreasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to unlock\\n    function unlockBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the cursed bond amount\\n        decreaseCursedBond(archaeologist, amount);\\n\\n        // Increase the free bond amount\\n        increaseFreeBond(archaeologist, amount);\\n    }\\n\\n\\n    /// @notice Calculates an archaeologist's cursed bond and frees them\\n    /// (unlocks the cursed bond).\\n    /// @param sarcoId the identifier of the sarcophagus to free the archaeologist from\\n    /// @param archaeologistAddress the address of the archaeologist to free\\n    function freeArchaeologist(bytes32 sarcoId, address archaeologistAddress) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        LibTypes.CursedArchaeologist storage cursedArchaeologist = s\\n            .sarcophagi[sarcoId]\\n            .cursedArchaeologists[archaeologistAddress];\\n\\n        // Free up the archaeologist's locked bond\\n        unlockBond(archaeologistAddress, cursedArchaeologist.diggingFee);\\n    }\\n}\\n\",\"keccak256\":\"0xc74cba3d575a7d40f467c7e0601e31c829a8b2b658c4234692c609e189637478\",\"license\":\"Unlicense\"},\"contracts/libraries/LibErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of Errors\\n * @notice This library defines all of the Errors that the Sarcophagus system\\n * uses.\\n */\\nlibrary LibErrors {\\n    error AccuseNotEnoughProof(uint256 shardsProvided, uint8 minShards);\\n\\n    error AccuseIncorrectProof();\\n\\n    error ArchaeologistAlreadyUnwrapped(address archaeologist);\\n\\n    error ArchaeologistListNotUnique(address archaeologistAddress);\\n\\n    error ArchaeologistNotOnSarcophagus(address archaeologist);\\n\\n    error ArchaeologistProfileExistsShouldBe(bool exists, address archaeologist);\\n\\n    error DiggingFeeTooLow(uint256 diggingFee, address archaeologist);\\n\\n    error MinShardsGreaterThanArchaeologists(uint8 minShards);\\n\\n    error MinShardsZero();\\n\\n    error MaxResurrectionIntervalIsZero();\\n\\n    error NewResurrectionTimeInPast(uint256 newResurrectionTime);\\n\\n    error NewResurrectionTimeTooLarge(uint256 newResurrectionTime);\\n\\n    error NoArchaeologistsProvided();\\n\\n    error NotEnoughCursedBond(uint256 cursedBond, uint256 amount);\\n\\n    error NotEnoughFreeBond(uint256 freeBond, uint256 amount);\\n\\n    error NotEnoughReward(uint256 reward, uint256 amount);\\n\\n    error ResurrectionTimeInPast(uint256 resurrectionTime);\\n\\n    error ResurrectionTimeTooFarInFuture(\\n        uint256 resurrectionTime,\\n        uint256 sarcophagusMaximumRewrapInterval\\n    );\\n\\n    error SarcophagusAlreadyExists(bytes32 sarcoId);\\n\\n    error SarcophagusDoesNotExist(bytes32 sarcoId);\\n\\n    error SarcophagusInactive(bytes32 sarcoId);\\n\\n    error SarcophagusCompromised(bytes32 sarcoId);\\n\\n    error SenderNotEmbalmer(address sender, address embalmer);\\n\\n    error InvalidSignature(\\n        // address recovered from signature via ecrecover\\n        address recoveredAddress,\\n        // address we expected to have signed the data\\n        address expectedAddress\\n    );\\n\\n    error SignerNotArchaeologistOnSarcophagus(bytes32 sarcoId, address signer);\\n\\n    // Used when an attempt is made to accuse or rewrap after the resurrection time has already passed (so it's actually time to unwrap it)\\n    error SarcophagusIsUnwrappable();\\n\\n    // Used when an attempt is made to clean a sarcophagus before the grace period after the resurrection time has passed\\n    error SarcophagusNotCleanable();\\n\\n    error TooEarlyToUnwrap(uint256 resurrectionTime, uint256 currentTime);\\n\\n    error TooLateToUnwrap(uint256 resurrectionTime, uint256 gracePeriod, uint256 currentTime);\\n\\n    error UnencryptedShardHashMismatch(bytes rawKeyShare, bytes32 doubleHashedKeyShare);\\n\\n    error SarcophagusParametersExpired(uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x6a14d37610938005085d1a3203c15a12d66303c063620bb9bc12172be9579eb5\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title Types shared across facets for the Sarcophagus diamond\\n */\\nlibrary LibTypes {\\n    struct Sarcophagus {\\n        // never zero - use for existence checks\\n        uint256 resurrectionTime;\\n        // todo: run gas cost evaluation on storing isCompromised vs looping through stored archaeologists and checking isAccused\\n        bool isCompromised;\\n        string name;\\n        uint8 threshold;\\n        uint256 maximumRewrapInterval;\\n        string[2] arweaveTxIds;\\n        address embalmerAddress;\\n        address recipientAddress;\\n        address[] cursedArchaeologistAddresses;\\n        mapping(address => CursedArchaeologist) cursedArchaeologists;\\n    }\\n\\n    struct CursedArchaeologist {\\n        // never zero - use for existence checks\\n        bytes32 doubleHashedKeyShare;\\n        bool isAccused;\\n        uint256 diggingFee;\\n        bytes rawKeyShare;\\n    }\\n\\n    struct ArchaeologistProfile {\\n        bool exists; // todo: use peerid.length instead of exists\\n        string peerId;\\n        uint256 minimumDiggingFee;\\n        uint256 maximumRewrapInterval;\\n        uint256 freeBond;\\n        uint256 cursedBond;\\n    }\\n}\\n\",\"keccak256\":\"0x0866af873e8c0d3fc3e16100244326474be51159855c0958246fa3c443f61c60\",\"license\":\"Unlicense\"},\"contracts/libraries/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\n/**\\n * @title Utility functions used within the Sarcophagus system\\n * @notice This library implements various functions that are used throughout\\n * Sarcophagus, mainly to DRY up the codebase\\n * @dev these functions are all stateless, public, pure/view\\n */\\nlibrary LibUtils {\\n    /**\\n     * @notice Reverts if the public key length is not exactly 64 bytes long\\n     * @param publicKey the key to check length of\\n     */\\n    function publicKeyLength(bytes memory publicKey) public pure {\\n        require(publicKey.length == 64, \\\"public key must be 64 bytes\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if the hash of singleHash does not equal doubleHash\\n     * @param doubleHash the hash to compare hash of singleHash to\\n     * @param singleHash the value to hash and compare against doubleHash\\n     */\\n    function hashCheck(bytes32 doubleHash, bytes memory singleHash) public pure {\\n        require(doubleHash == keccak256(singleHash), \\\"hashes do not match\\\");\\n    }\\n\\n    /**\\n     * @notice The archaeologist needs to sign off on two pieces of data\\n     * to guarantee their unrwap will be successful\\n     *\\n     * @param unencryptedShardDoubleHash the double hash of the unencrypted shard\\n     * @param arweaveTxId the arweave TX ID that contains the archs encrypted shard\\n     * @param agreedMaximumRewrapInterval that the archaeologist has agreed to for the sarcophagus\\n     * @param timestamp that the archaeologist has agreed to for the sarcophagus\\n     * @param diggingFee that the archaeologist has agreed to for the sarcophagus\\n     * @param v signature element\\n     * @param r signature element\\n     * @param s signature element\\n     * @param account address to confirm signature of data came from\\n     */\\n    function verifyArchaeologistSignature(\\n        bytes32 unencryptedShardDoubleHash,\\n        string memory arweaveTxId,\\n        uint256 agreedMaximumRewrapInterval,\\n        uint256 timestamp,\\n        uint256 diggingFee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address account\\n    ) internal pure {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(\\n                    abi.encode(\\n                        arweaveTxId,\\n                        unencryptedShardDoubleHash,\\n                        agreedMaximumRewrapInterval,\\n                        diggingFee,\\n                        timestamp\\n                    )\\n                )\\n            )\\n        );\\n\\n        // Generate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        address recoveredAddress = ecrecover(messageHash, v, r, s);\\n\\n        if (recoveredAddress != account) {\\n            revert LibErrors.InvalidSignature(recoveredAddress, account);\\n        }\\n    }\\n\\n    /// @notice Returns the address that signed some data given the data and the\\n    /// signature.\\n    /// @param data the data to verify\\n    /// @param v signature element\\n    /// @param r signature element\\n    /// @param s signature element\\n    /// @return the address that signed the data\\n    function recoverAddress(\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(abi.encode(data)))\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        // It's highly recommended that a hash be passed into ecrecover\\n        address account = ecrecover(messageHash, v, r, s);\\n\\n        return account;\\n    }\\n\\n    /**\\n     * @notice Reverts if the given resurrection time is not in the future\\n     * @param resurrectionTime the time to check against block.timestamp\\n     */\\n    function resurrectionInFuture(uint256 resurrectionTime) internal view {\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(resurrectionTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reverts if the current block timestamp is not within the resurrection window\\n     * (window = [resurrection time, resurrection time + grace period] inclusive)\\n     * @param resurrectionTime the resurrection time of the sarcophagus\\n     * (absolute, i.e. a date time stamp)\\n     */\\n    function unwrapTime(uint256 resurrectionTime) internal view {\\n        // revert if too early\\n        if (resurrectionTime > block.timestamp) {\\n            revert LibErrors.TooEarlyToUnwrap(resurrectionTime, block.timestamp);\\n        }\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // revert if too late\\n        if (resurrectionTime + s.gracePeriod < block.timestamp) {\\n            revert LibErrors.TooLateToUnwrap(resurrectionTime, s.gracePeriod, block.timestamp);\\n        }\\n    }\\n\\n    /// @notice Checks if an archaeologist profile exists and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check existence of\\n    function revertIfArchProfileExists(address archaeologist) internal view {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(false, archaeologist);\\n        }\\n    }\\n\\n    /// @notice Checks if an archaeologist profile doesn't exist and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check lack of existence of\\n    function revertIfArchProfileDoesNotExist(address archaeologist) internal view {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (!s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(true, archaeologist);\\n        }\\n    }\\n\\n    /// @notice Calculates the protocol fees to be taken from the embalmer.\\n    /// @return The protocol fees amount\\n    function calculateProtocolFees(uint256 totalDiggingFees) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return (totalDiggingFees * s.protocolFeeBasePercentage) / 100;\\n    }\\n}\\n\",\"keccak256\":\"0x2a7152681cf742ee68300169eadd627b567859c4cc9448790a5428b0fcaafc9d\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n/**\\n* Global diamond storage struct to be shared across facets\\n* TODO: Implement diamond storage pattern and consider splitting storage into facet specific structs\\n*/\\nstruct AppStorage {\\n    // SARCO token contract\\n    IERC20 sarcoToken;\\n\\n    // total protocol fees available to be withdrawn by the admin\\n    uint256 totalProtocolFees;\\n\\n    /**\\n    * Protocol level admin configurations\\n    */\\n    // % of total digging fees for sarcophagus to charge embalmer on create and rewrap\\n    uint256 protocolFeeBasePercentage;\\n    // grace period an archaeologist is given to resurrect a sarcophagus after the resurrection time\\n    uint256 gracePeriod;\\n    // threshold after which archaeologist signatures on sarcophagus params expire and the sarcophagus must be renegotiated\\n    uint256 expirationThreshold;\\n\\n    /**\\n    * Ownership mappings\\n    */\\n    // embalmer address => ids of sarcophagi they've created\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    // archaeologist address =>  ids of sarcophagi they're protecting\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    // recipient address =>  ids of sarcophagi they're recipient on\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n\\n    // double hashed keyshare => archaeologist address\\n    mapping(bytes32 => address) doubleHashedShardArchaeologists;\\n\\n    // sarcophagus ids\\n    bytes32[] sarcophagusIdentifiers;\\n    // sarcophagus id => sarcophagus object\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n\\n    // archaeologist addresses\\n    address[] archaeologistProfileAddresses;\\n    // archaeologist address => profile\\n    mapping(address => LibTypes.ArchaeologistProfile) archaeologistProfiles;\\n\\n\\n    // current balance of rewards available for the archaeologist to withdraw\\n    mapping(address => uint256) archaeologistRewards;\\n\\n\\n    /**\\n    * Archaeologist reputation statistics\\n    * todo: could these be organized differently?\\n    */\\n    mapping(address => bytes32[]) archaeologistSuccesses;\\n    mapping(address => bytes32[]) archaeologistAccusals;\\n    mapping(address => bytes32[]) archaeologistCleanups;\\n}\\n\\nlibrary LibAppStorage {\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        // Set the position of our struct in contract storage\\n        // Since AppStorage s is the first and only state variable declared in\\n        // facets its position in contract storage is 0\\n        assembly {\\n            s.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf74c670645b035ed8fa6f725ac44b559bda71977be9e593e6ce856d1029e6d3\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612dab806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630511f2ec146100465780635d5478e214610062578063ab7d796914610092575b600080fd5b610060600480360381019061005b9190611f1c565b6100ae565b005b61007c600480360381019061007791906121e2565b6104bc565b60405161008991906122bb565b60405180910390f35b6100ac60048036038101906100a79190612302565b6110b6565b005b600080600a0160008381526020019081526020016000209050600081600001540361011057816040517f018da6880000000000000000000000000000000000000000000000000000000081526004016101079190612351565b60405180910390fd5b8060010160009054906101000a900460ff161561016457816040517f9af72b8600000000000000000000000000000000000000000000000000000000815260040161015b9190612351565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160000154036101cc57816040517f7c6a6d700000000000000000000000000000000000000000000000000000000081526004016101c39190612351565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461028657338160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f0e37d99c00000000000000000000000000000000000000000000000000000000815260040161027d9291906123ad565b60405180910390fd5b428160000154116102d25780600001546040517f357efa270000000000000000000000000000000000000000000000000000000081526004016102c991906122bb565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160000181905550600081600901905060005b81805490508110156104895761035984838381548110610329576103286123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166115e4565b600083600a016000848481548110610374576103736123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600201546000600d0160008585815481106103fa576103f96123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461046e9190612434565b925050819055505080806104819061248a565b915050610306565b50827f3a0205aa93b1a96da7d6405b2967f91b441383623de2d1ee3b27bfd1642b167a60405160405180910390a2505050565b6000806000600a01600088815260200190815260200160002060000154111561051c57856040517fb9d0d5840000000000000000000000000000000000000000000000000000000081526004016105139190612351565b60405180910390fd5b6000600401548560a001356105319190612434565b421115610579578460a001356040517fdbff58b000000000000000000000000000000000000000000000000000000000815260040161057091906122bb565b60405180910390fd5b846040013542106105c55784604001356040517f357efa270000000000000000000000000000000000000000000000000000000081526004016105bc91906122bb565b60405180910390fd5b84604001358560600135426105da9190612434565b101561062757846040013585606001356040517f9abac2dc00000000000000000000000000000000000000000000000000000000815260040161061e9291906124d2565b60405180910390fd5b60008484905003610664576040517fb274cdd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008560800160208101906106799190612534565b60ff16036106b3576040517fc289fea400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838390508560800160208101906106ca9190612534565b60ff161115610722578460800160208101906106e69190612534565b6040517f4f1dd41a0000000000000000000000000000000000000000000000000000000081526004016107199190612570565b60405180910390fd5b600080600a016000888152602001908152602001600020905085806000019061074b919061259a565b82600201919061075c929190611be2565b508560800160208101906107709190612534565b8160030160006101000a81548160ff021916908360ff160217905550856040013581600001819055508560600135816004018190555082816005019060026107b9929190611c68565b50338160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560200160208101906108109190612629565b8160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508484905067ffffffffffffffff81111561086f5761086e611fe3565b5b60405190808252806020026020018201604052801561089d5781602001602082028036833780820191505090505b508160090190805190602001906108b5929190611cbb565b506000805b86869050811015610e3a576108f88787838181106108db576108da6123d6565b5b905060c0020160000160208101906108f39190612629565b61165d565b6000801b83600a016000898985818110610915576109146123d6565b5b905060c00201600001602081019061092d9190612629565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146109d757868682818110610983576109826123d6565b5b905060c00201600001602081019061099b9190612629565b6040517f3eba688c0000000000000000000000000000000000000000000000000000000081526004016109ce9190612656565b60405180910390fd5b610acc8787838181106109ed576109ec6123d6565b5b905060c002016040013586600160028110610a0b57610a0a6123d6565b5b60200201518a606001358b60a001358b8b87818110610a2d57610a2c6123d6565b5b905060c00201602001358c8c88818110610a4a57610a496123d6565b5b905060c002016060016020810190610a629190612534565b8d8d89818110610a7557610a746123d6565b5b905060c00201608001358e8e8a818110610a9257610a916123d6565b5b905060c0020160a001358f8f8b818110610aaf57610aae6123d6565b5b905060c002016000016020810190610ac79190612629565b611703565b868682818110610adf57610ade6123d6565b5b905060c002016020013582610af49190612434565b9150610b46878783818110610b0c57610b0b6123d6565b5b905060c002016000016020810190610b249190612629565b888884818110610b3757610b366123d6565b5b905060c002016020013561182e565b6040518060800160405280888884818110610b6457610b636123d6565b5b905060c00201604001358152602001600015158152602001888884818110610b8f57610b8e6123d6565b5b905060c002016020013581526020016040518060200160405280600081525081525083600a016000898985818110610bca57610bc96123d6565b5b905060c002016000016020810190610be29190612629565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908315150217905550604082015181600201556060820151816003019080519060200190610c6c929190611d45565b50905050868682818110610c8357610c826123d6565b5b905060c002016000016020810190610c9b9190612629565b836009018281548110610cb157610cb06123d6565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868682818110610d0c57610d0b6123d6565b5b905060c002016000016020810190610d249190612629565b60006008016000898985818110610d3e57610d3d6123d6565b5b905060c0020160400135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006006016000888884818110610dae57610dad6123d6565b5b905060c002016000016020810190610dc69190612629565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208990806001815401808255809150506001900390600052602060002001600090919091909150558080610e329061248a565b9150506108ba565b506000600901889080600181540180825580915050600190039060005260206000200160009091909190915055600060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002088908060018154018082558091505060019003906000526020600020016000909190919091505560006007016000886020016020810190610eea9190612629565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208890806001815401808255809150506001900390600052602060002001600090919091909150556000610f5682611846565b90508060006001016000828254610f6d9190612434565b925050819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308486610fc29190612434565b6040518463ffffffff1660e01b8152600401610fe093929190612671565b6020604051808303816000875af1158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102391906126e0565b50887fc8bdb848f6fa69f6b1cf22ed72d4bbd1702f92a0a597f458a150ce8098318ab4898060000190611056919061259a565b8b60400135338d602001602081019061106f9190612629565b8960090189898e60405161108b999897969594939291906129ad565b60405180910390a260016000600901805490506110a89190612a42565b935050505095945050505050565b600080600a0160008481526020019081526020016000209050600081600001540361111857826040517f018da68800000000000000000000000000000000000000000000000000000000815260040161110f9190612351565b60405180910390fd5b8060010160009054906101000a900460ff161561116c57826040517f9af72b860000000000000000000000000000000000000000000000000000000081526004016111639190612351565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160000154036111d457826040517f7c6a6d700000000000000000000000000000000000000000000000000000000081526004016111cb9190612351565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461128e57338160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f0e37d99c0000000000000000000000000000000000000000000000000000000081526004016112859291906123ad565b60405180910390fd5b428160000154116112cb576040517f8680d5de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42821161130f57816040517f365e353400000000000000000000000000000000000000000000000000000000815260040161130691906122bb565b60405180910390fd5b80600401544261131f9190612434565b82111561136357816040517fe4b2b61800000000000000000000000000000000000000000000000000000000815260040161135a91906122bb565b60405180910390fd5b60008082600901905060005b81805490508110156114bd57600084600a016000848481548110611396576113956123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600201546000600d01600085858154811061141c5761141b6123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114909190612434565b925050819055508060020154846114a79190612434565b93505080806114b59061248a565b91505061136f565b5060006114c983611846565b905080600060010160008282546114e09190612434565b925050819055508484600001819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330848761153e9190612434565b6040518463ffffffff1660e01b815260040161155c93929190612671565b6020604051808303816000875af115801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f91906126e0565b50857ff2ded5f77c6de574fac210979efbdd01ff3071d109e50651be4e05211f6e49438685846040516115d493929190612a76565b60405180910390a2505050505050565b60006115ee611877565b9050600081600a016000858152602001908152602001600020600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061165783826002015461187c565b50505050565b6000611667611877565b905080600c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166116ff576001826040517f2eeb35710000000000000000000000000000000000000000000000000000000081526004016116f6929190612abc565b60405180910390fd5b5050565b6000888a89888a60405160200161171e959493929190612b1e565b604051602081830303815290604052805190602001206040516020016117449190612bf0565b6040516020818303038152906040528051906020012090506000600182878787604051600081526020016040526040516117819493929190612c16565b6020604051602081039080840390855afa1580156117a3573d6000803e3d6000fd5b5050506020604051035190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118215780836040517f42d750dc0000000000000000000000000000000000000000000000000000000081526004016118189291906123ad565b60405180910390fd5b5050505050505050505050565b6118388282611894565b61184282826119cf565b5050565b600080611851611877565b905060648160020154846118659190612c5b565b61186f9190612ce4565b915050919050565b600090565b6118868282611a3b565b6118908282611b76565b5050565b600061189e611877565b905080600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015482111561196f5780600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154826040517fa4e3bead0000000000000000000000000000000000000000000000000000000081526004016119669291906124d2565b60405180910390fd5b8181600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008282546119c39190612a42565b92505081905550505050565b60006119d9611877565b90508181600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611a2f9190612434565b92505081905550505050565b6000611a45611877565b905080600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154821115611b165780600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401611b0d9291906124d2565b60405180910390fd5b8181600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611b6a9190612a42565b92505081905550505050565b6000611b80611877565b90508181600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254611bd69190612434565b92505081905550505050565b828054611bee90612d44565b90600052602060002090601f016020900481019282611c105760008555611c57565b82601f10611c2957803560ff1916838001178555611c57565b82800160010185558215611c57579182015b82811115611c56578235825591602001919060010190611c3b565b5b509050611c649190611dcb565b5090565b8260028101928215611caa579160200282015b82811115611ca9578251829080519060200190611c99929190611de8565b5091602001919060010190611c7b565b5b509050611cb79190611e6e565b5090565b828054828255906000526020600020908101928215611d34579160200282015b82811115611d335782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611cdb565b5b509050611d419190611dcb565b5090565b828054611d5190612d44565b90600052602060002090601f016020900481019282611d735760008555611dba565b82601f10611d8c57805160ff1916838001178555611dba565b82800160010185558215611dba579182015b82811115611db9578251825591602001919060010190611d9e565b5b509050611dc79190611dcb565b5090565b5b80821115611de4576000816000905550600101611dcc565b5090565b828054611df490612d44565b90600052602060002090601f016020900481019282611e165760008555611e5d565b82601f10611e2f57805160ff1916838001178555611e5d565b82800160010185558215611e5d579182015b82811115611e5c578251825591602001919060010190611e41565b5b509050611e6a9190611dcb565b5090565b5b80821115611e8e5760008181611e859190611e92565b50600101611e6f565b5090565b508054611e9e90612d44565b6000825580601f10611eb05750611ecf565b601f016020900490600052602060002090810190611ece9190611dcb565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611ef981611ee6565b8114611f0457600080fd5b50565b600081359050611f1681611ef0565b92915050565b600060208284031215611f3257611f31611edc565b5b6000611f4084828501611f07565b91505092915050565b600080fd5b600060c08284031215611f6457611f63611f49565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f9257611f91611f6d565b5b8235905067ffffffffffffffff811115611faf57611fae611f72565b5b6020830191508360c0820283011115611fcb57611fca611f77565b5b9250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61201b82611fd2565b810181811067ffffffffffffffff8211171561203a57612039611fe3565b5b80604052505050565b600061204d611ed2565b90506120598282612012565b919050565b600067ffffffffffffffff82111561207957612078611fe3565b5b602082029050919050565b600080fd5b600067ffffffffffffffff8211156120a4576120a3611fe3565b5b6120ad82611fd2565b9050602081019050919050565b82818337600083830152505050565b60006120dc6120d784612089565b612043565b9050828152602081018484840111156120f8576120f7612084565b5b6121038482856120ba565b509392505050565b600082601f8301126121205761211f611f6d565b5b81356121308482602086016120c9565b91505092915050565b600061214c6121478461205e565b612043565b9050806020840283018581111561216657612165611f77565b5b835b818110156121ad57803567ffffffffffffffff81111561218b5761218a611f6d565b5b808601612198898261210b565b85526020850194505050602081019050612168565b5050509392505050565b600082601f8301126121cc576121cb611f6d565b5b60026121d9848285612139565b91505092915050565b6000806000806000608086880312156121fe576121fd611edc565b5b600061220c88828901611f07565b955050602086013567ffffffffffffffff81111561222d5761222c611ee1565b5b61223988828901611f4e565b945050604086013567ffffffffffffffff81111561225a57612259611ee1565b5b61226688828901611f7c565b9350935050606086013567ffffffffffffffff81111561228957612288611ee1565b5b612295888289016121b7565b9150509295509295909350565b6000819050919050565b6122b5816122a2565b82525050565b60006020820190506122d060008301846122ac565b92915050565b6122df816122a2565b81146122ea57600080fd5b50565b6000813590506122fc816122d6565b92915050565b6000806040838503121561231957612318611edc565b5b600061232785828601611f07565b9250506020612338858286016122ed565b9150509250929050565b61234b81611ee6565b82525050565b60006020820190506123666000830184612342565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123978261236c565b9050919050565b6123a78161238c565b82525050565b60006040820190506123c2600083018561239e565b6123cf602083018461239e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061243f826122a2565b915061244a836122a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561247f5761247e612405565b5b828201905092915050565b6000612495826122a2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124c7576124c6612405565b5b600182019050919050565b60006040820190506124e760008301856122ac565b6124f460208301846122ac565b9392505050565b600060ff82169050919050565b612511816124fb565b811461251c57600080fd5b50565b60008135905061252e81612508565b92915050565b60006020828403121561254a57612549611edc565b5b60006125588482850161251f565b91505092915050565b61256a816124fb565b82525050565b60006020820190506125856000830184612561565b92915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126125b7576125b661258b565b5b80840192508235915067ffffffffffffffff8211156125d9576125d8612590565b5b6020830192506001820236038313156125f5576125f4612595565b5b509250929050565b6126068161238c565b811461261157600080fd5b50565b600081359050612623816125fd565b92915050565b60006020828403121561263f5761263e611edc565b5b600061264d84828501612614565b91505092915050565b600060208201905061266b600083018461239e565b92915050565b6000606082019050612686600083018661239e565b612693602083018561239e565b6126a060408301846122ac565b949350505050565b60008115159050919050565b6126bd816126a8565b81146126c857600080fd5b50565b6000815190506126da816126b4565b92915050565b6000602082840312156126f6576126f5611edc565b5b6000612704848285016126cb565b91505092915050565b600082825260208201905092915050565b600061272a838561270d565b93506127378385846120ba565b61274083611fd2565b840190509392505050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b6127858161238c565b82525050565b6000612797838361277c565b60208301905092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127e36127de836127a3565b6127b0565b9050919050565b60006127f682546127d0565b9050919050565b6000600182019050919050565b60006128158261274b565b61281f8185612756565b935061282a83612767565b8060005b838110156128625761283f826127ea565b612849888261278b565b9750612854836127fd565b92505060018101905061282e565b5085935050505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128c95780820151818401526020810190506128ae565b838111156128d8576000848401525b50505050565b60006128e98261288f565b6128f3818561289a565b93506129038185602086016128ab565b61290c81611fd2565b840191505092915050565b600061292383836128de565b905092915050565b6000602082019050919050565b60006129438261286f565b61294d818561287a565b93508360208202850161295f85612885565b8060005b8581101561299b578484038952815161297c8582612917565b94506129878361292b565b925060208a01995050600181019050612963565b50829750879550505050505092915050565b60006101008201905081810360008301526129c9818b8d61271e565b90506129d8602083018a6122ac565b6129e5604083018961239e565b6129f2606083018861239e565b8181036080830152612a04818761280a565b9050612a1360a08301866122ac565b612a2060c08301856122ac565b81810360e0830152612a328184612938565b90509a9950505050505050505050565b6000612a4d826122a2565b9150612a58836122a2565b925082821015612a6b57612a6a612405565b5b828203905092915050565b6000606082019050612a8b60008301866122ac565b612a9860208301856122ac565b612aa560408301846122ac565b949350505050565b612ab6816126a8565b82525050565b6000604082019050612ad16000830185612aad565b612ade602083018461239e565b9392505050565b6000612af08261288f565b612afa818561270d565b9350612b0a8185602086016128ab565b612b1381611fd2565b840191505092915050565b600060a0820190508181036000830152612b388188612ae5565b9050612b476020830187612342565b612b5460408301866122ac565b612b6160608301856122ac565b612b6e60808301846122ac565b9695505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000612bb9601c83612b78565b9150612bc482612b83565b601c82019050919050565b6000819050919050565b612bea612be582611ee6565b612bcf565b82525050565b6000612bfb82612bac565b9150612c078284612bd9565b60208201915081905092915050565b6000608082019050612c2b6000830187612342565b612c386020830186612561565b612c456040830185612342565b612c526060830184612342565b95945050505050565b6000612c66826122a2565b9150612c71836122a2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612caa57612ca9612405565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612cef826122a2565b9150612cfa836122a2565b925082612d0a57612d09612cb5565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d5c57607f821691505b602082108103612d6f57612d6e612d15565b5b5091905056fea2646970667358221220ea66b49a93dd47f0b829480d01acb314cf1041bfe7ebb505c9b17e74924bdf9964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630511f2ec146100465780635d5478e214610062578063ab7d796914610092575b600080fd5b610060600480360381019061005b9190611f1c565b6100ae565b005b61007c600480360381019061007791906121e2565b6104bc565b60405161008991906122bb565b60405180910390f35b6100ac60048036038101906100a79190612302565b6110b6565b005b600080600a0160008381526020019081526020016000209050600081600001540361011057816040517f018da6880000000000000000000000000000000000000000000000000000000081526004016101079190612351565b60405180910390fd5b8060010160009054906101000a900460ff161561016457816040517f9af72b8600000000000000000000000000000000000000000000000000000000815260040161015b9190612351565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160000154036101cc57816040517f7c6a6d700000000000000000000000000000000000000000000000000000000081526004016101c39190612351565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461028657338160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f0e37d99c00000000000000000000000000000000000000000000000000000000815260040161027d9291906123ad565b60405180910390fd5b428160000154116102d25780600001546040517f357efa270000000000000000000000000000000000000000000000000000000081526004016102c991906122bb565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160000181905550600081600901905060005b81805490508110156104895761035984838381548110610329576103286123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166115e4565b600083600a016000848481548110610374576103736123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600201546000600d0160008585815481106103fa576103f96123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461046e9190612434565b925050819055505080806104819061248a565b915050610306565b50827f3a0205aa93b1a96da7d6405b2967f91b441383623de2d1ee3b27bfd1642b167a60405160405180910390a2505050565b6000806000600a01600088815260200190815260200160002060000154111561051c57856040517fb9d0d5840000000000000000000000000000000000000000000000000000000081526004016105139190612351565b60405180910390fd5b6000600401548560a001356105319190612434565b421115610579578460a001356040517fdbff58b000000000000000000000000000000000000000000000000000000000815260040161057091906122bb565b60405180910390fd5b846040013542106105c55784604001356040517f357efa270000000000000000000000000000000000000000000000000000000081526004016105bc91906122bb565b60405180910390fd5b84604001358560600135426105da9190612434565b101561062757846040013585606001356040517f9abac2dc00000000000000000000000000000000000000000000000000000000815260040161061e9291906124d2565b60405180910390fd5b60008484905003610664576040517fb274cdd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008560800160208101906106799190612534565b60ff16036106b3576040517fc289fea400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838390508560800160208101906106ca9190612534565b60ff161115610722578460800160208101906106e69190612534565b6040517f4f1dd41a0000000000000000000000000000000000000000000000000000000081526004016107199190612570565b60405180910390fd5b600080600a016000888152602001908152602001600020905085806000019061074b919061259a565b82600201919061075c929190611be2565b508560800160208101906107709190612534565b8160030160006101000a81548160ff021916908360ff160217905550856040013581600001819055508560600135816004018190555082816005019060026107b9929190611c68565b50338160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560200160208101906108109190612629565b8160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508484905067ffffffffffffffff81111561086f5761086e611fe3565b5b60405190808252806020026020018201604052801561089d5781602001602082028036833780820191505090505b508160090190805190602001906108b5929190611cbb565b506000805b86869050811015610e3a576108f88787838181106108db576108da6123d6565b5b905060c0020160000160208101906108f39190612629565b61165d565b6000801b83600a016000898985818110610915576109146123d6565b5b905060c00201600001602081019061092d9190612629565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146109d757868682818110610983576109826123d6565b5b905060c00201600001602081019061099b9190612629565b6040517f3eba688c0000000000000000000000000000000000000000000000000000000081526004016109ce9190612656565b60405180910390fd5b610acc8787838181106109ed576109ec6123d6565b5b905060c002016040013586600160028110610a0b57610a0a6123d6565b5b60200201518a606001358b60a001358b8b87818110610a2d57610a2c6123d6565b5b905060c00201602001358c8c88818110610a4a57610a496123d6565b5b905060c002016060016020810190610a629190612534565b8d8d89818110610a7557610a746123d6565b5b905060c00201608001358e8e8a818110610a9257610a916123d6565b5b905060c0020160a001358f8f8b818110610aaf57610aae6123d6565b5b905060c002016000016020810190610ac79190612629565b611703565b868682818110610adf57610ade6123d6565b5b905060c002016020013582610af49190612434565b9150610b46878783818110610b0c57610b0b6123d6565b5b905060c002016000016020810190610b249190612629565b888884818110610b3757610b366123d6565b5b905060c002016020013561182e565b6040518060800160405280888884818110610b6457610b636123d6565b5b905060c00201604001358152602001600015158152602001888884818110610b8f57610b8e6123d6565b5b905060c002016020013581526020016040518060200160405280600081525081525083600a016000898985818110610bca57610bc96123d6565b5b905060c002016000016020810190610be29190612629565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908315150217905550604082015181600201556060820151816003019080519060200190610c6c929190611d45565b50905050868682818110610c8357610c826123d6565b5b905060c002016000016020810190610c9b9190612629565b836009018281548110610cb157610cb06123d6565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868682818110610d0c57610d0b6123d6565b5b905060c002016000016020810190610d249190612629565b60006008016000898985818110610d3e57610d3d6123d6565b5b905060c0020160400135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006006016000888884818110610dae57610dad6123d6565b5b905060c002016000016020810190610dc69190612629565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208990806001815401808255809150506001900390600052602060002001600090919091909150558080610e329061248a565b9150506108ba565b506000600901889080600181540180825580915050600190039060005260206000200160009091909190915055600060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002088908060018154018082558091505060019003906000526020600020016000909190919091505560006007016000886020016020810190610eea9190612629565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208890806001815401808255809150506001900390600052602060002001600090919091909150556000610f5682611846565b90508060006001016000828254610f6d9190612434565b925050819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308486610fc29190612434565b6040518463ffffffff1660e01b8152600401610fe093929190612671565b6020604051808303816000875af1158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102391906126e0565b50887fc8bdb848f6fa69f6b1cf22ed72d4bbd1702f92a0a597f458a150ce8098318ab4898060000190611056919061259a565b8b60400135338d602001602081019061106f9190612629565b8960090189898e60405161108b999897969594939291906129ad565b60405180910390a260016000600901805490506110a89190612a42565b935050505095945050505050565b600080600a0160008481526020019081526020016000209050600081600001540361111857826040517f018da68800000000000000000000000000000000000000000000000000000000815260040161110f9190612351565b60405180910390fd5b8060010160009054906101000a900460ff161561116c57826040517f9af72b860000000000000000000000000000000000000000000000000000000081526004016111639190612351565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160000154036111d457826040517f7c6a6d700000000000000000000000000000000000000000000000000000000081526004016111cb9190612351565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461128e57338160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f0e37d99c0000000000000000000000000000000000000000000000000000000081526004016112859291906123ad565b60405180910390fd5b428160000154116112cb576040517f8680d5de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42821161130f57816040517f365e353400000000000000000000000000000000000000000000000000000000815260040161130691906122bb565b60405180910390fd5b80600401544261131f9190612434565b82111561136357816040517fe4b2b61800000000000000000000000000000000000000000000000000000000815260040161135a91906122bb565b60405180910390fd5b60008082600901905060005b81805490508110156114bd57600084600a016000848481548110611396576113956123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600201546000600d01600085858154811061141c5761141b6123d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114909190612434565b925050819055508060020154846114a79190612434565b93505080806114b59061248a565b91505061136f565b5060006114c983611846565b905080600060010160008282546114e09190612434565b925050819055508484600001819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330848761153e9190612434565b6040518463ffffffff1660e01b815260040161155c93929190612671565b6020604051808303816000875af115801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f91906126e0565b50857ff2ded5f77c6de574fac210979efbdd01ff3071d109e50651be4e05211f6e49438685846040516115d493929190612a76565b60405180910390a2505050505050565b60006115ee611877565b9050600081600a016000858152602001908152602001600020600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061165783826002015461187c565b50505050565b6000611667611877565b905080600c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166116ff576001826040517f2eeb35710000000000000000000000000000000000000000000000000000000081526004016116f6929190612abc565b60405180910390fd5b5050565b6000888a89888a60405160200161171e959493929190612b1e565b604051602081830303815290604052805190602001206040516020016117449190612bf0565b6040516020818303038152906040528051906020012090506000600182878787604051600081526020016040526040516117819493929190612c16565b6020604051602081039080840390855afa1580156117a3573d6000803e3d6000fd5b5050506020604051035190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118215780836040517f42d750dc0000000000000000000000000000000000000000000000000000000081526004016118189291906123ad565b60405180910390fd5b5050505050505050505050565b6118388282611894565b61184282826119cf565b5050565b600080611851611877565b905060648160020154846118659190612c5b565b61186f9190612ce4565b915050919050565b600090565b6118868282611a3b565b6118908282611b76565b5050565b600061189e611877565b905080600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015482111561196f5780600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154826040517fa4e3bead0000000000000000000000000000000000000000000000000000000081526004016119669291906124d2565b60405180910390fd5b8181600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008282546119c39190612a42565b92505081905550505050565b60006119d9611877565b90508181600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611a2f9190612434565b92505081905550505050565b6000611a45611877565b905080600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154821115611b165780600c0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401611b0d9291906124d2565b60405180910390fd5b8181600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611b6a9190612a42565b92505081905550505050565b6000611b80611877565b90508181600c0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254611bd69190612434565b92505081905550505050565b828054611bee90612d44565b90600052602060002090601f016020900481019282611c105760008555611c57565b82601f10611c2957803560ff1916838001178555611c57565b82800160010185558215611c57579182015b82811115611c56578235825591602001919060010190611c3b565b5b509050611c649190611dcb565b5090565b8260028101928215611caa579160200282015b82811115611ca9578251829080519060200190611c99929190611de8565b5091602001919060010190611c7b565b5b509050611cb79190611e6e565b5090565b828054828255906000526020600020908101928215611d34579160200282015b82811115611d335782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611cdb565b5b509050611d419190611dcb565b5090565b828054611d5190612d44565b90600052602060002090601f016020900481019282611d735760008555611dba565b82601f10611d8c57805160ff1916838001178555611dba565b82800160010185558215611dba579182015b82811115611db9578251825591602001919060010190611d9e565b5b509050611dc79190611dcb565b5090565b5b80821115611de4576000816000905550600101611dcc565b5090565b828054611df490612d44565b90600052602060002090601f016020900481019282611e165760008555611e5d565b82601f10611e2f57805160ff1916838001178555611e5d565b82800160010185558215611e5d579182015b82811115611e5c578251825591602001919060010190611e41565b5b509050611e6a9190611dcb565b5090565b5b80821115611e8e5760008181611e859190611e92565b50600101611e6f565b5090565b508054611e9e90612d44565b6000825580601f10611eb05750611ecf565b601f016020900490600052602060002090810190611ece9190611dcb565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611ef981611ee6565b8114611f0457600080fd5b50565b600081359050611f1681611ef0565b92915050565b600060208284031215611f3257611f31611edc565b5b6000611f4084828501611f07565b91505092915050565b600080fd5b600060c08284031215611f6457611f63611f49565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f9257611f91611f6d565b5b8235905067ffffffffffffffff811115611faf57611fae611f72565b5b6020830191508360c0820283011115611fcb57611fca611f77565b5b9250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61201b82611fd2565b810181811067ffffffffffffffff8211171561203a57612039611fe3565b5b80604052505050565b600061204d611ed2565b90506120598282612012565b919050565b600067ffffffffffffffff82111561207957612078611fe3565b5b602082029050919050565b600080fd5b600067ffffffffffffffff8211156120a4576120a3611fe3565b5b6120ad82611fd2565b9050602081019050919050565b82818337600083830152505050565b60006120dc6120d784612089565b612043565b9050828152602081018484840111156120f8576120f7612084565b5b6121038482856120ba565b509392505050565b600082601f8301126121205761211f611f6d565b5b81356121308482602086016120c9565b91505092915050565b600061214c6121478461205e565b612043565b9050806020840283018581111561216657612165611f77565b5b835b818110156121ad57803567ffffffffffffffff81111561218b5761218a611f6d565b5b808601612198898261210b565b85526020850194505050602081019050612168565b5050509392505050565b600082601f8301126121cc576121cb611f6d565b5b60026121d9848285612139565b91505092915050565b6000806000806000608086880312156121fe576121fd611edc565b5b600061220c88828901611f07565b955050602086013567ffffffffffffffff81111561222d5761222c611ee1565b5b61223988828901611f4e565b945050604086013567ffffffffffffffff81111561225a57612259611ee1565b5b61226688828901611f7c565b9350935050606086013567ffffffffffffffff81111561228957612288611ee1565b5b612295888289016121b7565b9150509295509295909350565b6000819050919050565b6122b5816122a2565b82525050565b60006020820190506122d060008301846122ac565b92915050565b6122df816122a2565b81146122ea57600080fd5b50565b6000813590506122fc816122d6565b92915050565b6000806040838503121561231957612318611edc565b5b600061232785828601611f07565b9250506020612338858286016122ed565b9150509250929050565b61234b81611ee6565b82525050565b60006020820190506123666000830184612342565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123978261236c565b9050919050565b6123a78161238c565b82525050565b60006040820190506123c2600083018561239e565b6123cf602083018461239e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061243f826122a2565b915061244a836122a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561247f5761247e612405565b5b828201905092915050565b6000612495826122a2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124c7576124c6612405565b5b600182019050919050565b60006040820190506124e760008301856122ac565b6124f460208301846122ac565b9392505050565b600060ff82169050919050565b612511816124fb565b811461251c57600080fd5b50565b60008135905061252e81612508565b92915050565b60006020828403121561254a57612549611edc565b5b60006125588482850161251f565b91505092915050565b61256a816124fb565b82525050565b60006020820190506125856000830184612561565b92915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126125b7576125b661258b565b5b80840192508235915067ffffffffffffffff8211156125d9576125d8612590565b5b6020830192506001820236038313156125f5576125f4612595565b5b509250929050565b6126068161238c565b811461261157600080fd5b50565b600081359050612623816125fd565b92915050565b60006020828403121561263f5761263e611edc565b5b600061264d84828501612614565b91505092915050565b600060208201905061266b600083018461239e565b92915050565b6000606082019050612686600083018661239e565b612693602083018561239e565b6126a060408301846122ac565b949350505050565b60008115159050919050565b6126bd816126a8565b81146126c857600080fd5b50565b6000815190506126da816126b4565b92915050565b6000602082840312156126f6576126f5611edc565b5b6000612704848285016126cb565b91505092915050565b600082825260208201905092915050565b600061272a838561270d565b93506127378385846120ba565b61274083611fd2565b840190509392505050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b6127858161238c565b82525050565b6000612797838361277c565b60208301905092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127e36127de836127a3565b6127b0565b9050919050565b60006127f682546127d0565b9050919050565b6000600182019050919050565b60006128158261274b565b61281f8185612756565b935061282a83612767565b8060005b838110156128625761283f826127ea565b612849888261278b565b9750612854836127fd565b92505060018101905061282e565b5085935050505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128c95780820151818401526020810190506128ae565b838111156128d8576000848401525b50505050565b60006128e98261288f565b6128f3818561289a565b93506129038185602086016128ab565b61290c81611fd2565b840191505092915050565b600061292383836128de565b905092915050565b6000602082019050919050565b60006129438261286f565b61294d818561287a565b93508360208202850161295f85612885565b8060005b8581101561299b578484038952815161297c8582612917565b94506129878361292b565b925060208a01995050600181019050612963565b50829750879550505050505092915050565b60006101008201905081810360008301526129c9818b8d61271e565b90506129d8602083018a6122ac565b6129e5604083018961239e565b6129f2606083018861239e565b8181036080830152612a04818761280a565b9050612a1360a08301866122ac565b612a2060c08301856122ac565b81810360e0830152612a328184612938565b90509a9950505050505050505050565b6000612a4d826122a2565b9150612a58836122a2565b925082821015612a6b57612a6a612405565b5b828203905092915050565b6000606082019050612a8b60008301866122ac565b612a9860208301856122ac565b612aa560408301846122ac565b949350505050565b612ab6816126a8565b82525050565b6000604082019050612ad16000830185612aad565b612ade602083018461239e565b9392505050565b6000612af08261288f565b612afa818561270d565b9350612b0a8185602086016128ab565b612b1381611fd2565b840191505092915050565b600060a0820190508181036000830152612b388188612ae5565b9050612b476020830187612342565b612b5460408301866122ac565b612b6160608301856122ac565b612b6e60808301846122ac565b9695505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000612bb9601c83612b78565b9150612bc482612b83565b601c82019050919050565b6000819050919050565b612bea612be582611ee6565b612bcf565b82525050565b6000612bfb82612bac565b9150612c078284612bd9565b60208201915081905092915050565b6000608082019050612c2b6000830187612342565b612c386020830186612561565b612c456040830185612342565b612c526060830184612342565b95945050505050565b6000612c66826122a2565b9150612c71836122a2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612caa57612ca9612405565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612cef826122a2565b9150612cfa836122a2565b925082612d0a57612d09612cb5565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d5c57607f821691505b602082108103612d6f57612d6e612d15565b5b5091905056fea2646970667358221220ea66b49a93dd47f0b829480d01acb314cf1041bfe7ebb505c9b17e74924bdf9964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burySarcophagus(bytes32)": {
        "params": {
          "sarcoId": "the identifier of the sarcophagus"
        }
      },
      "createSarcophagus(bytes32,(string,address,uint256,uint256,uint8,uint256),(address,uint256,bytes32,uint8,bytes32,bytes32)[],string[2])": {
        "params": {
          "arweaveTxIds": "ordered pair of arweave tx ids: [sarcophagus payload tx, encrypted key share tx]",
          "sarcoId": "the identifier of the sarcophagus",
          "sarcophagusParams": "params to set on sarcophagus being created",
          "selectedArchaeologists": "the archaeologists the embalmer has selected to curse"
        },
        "returns": {
          "_0": "The index of the new sarcophagus in sarcophagusIdentifiers"
        }
      },
      "rewrapSarcophagus(bytes32,uint256)": {
        "params": {
          "resurrectionTime": "the new resurrection time",
          "sarcoId": "the identifier of the sarcophagus"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burySarcophagus(bytes32)": {
        "notice": "Terminates a sarcophagus by setting its resurrection time to infinity and returning locked bonds to all cursed archaeologists. Callable by the embalmer of a sarcophagus if its resurrection time has not passed, it has not been compromised by >k accusals, and it has not been buried."
      },
      "createSarcophagus(bytes32,(string,address,uint256,uint256,uint8,uint256),(address,uint256,bytes32,uint8,bytes32,bytes32)[],string[2])": {
        "notice": "Creates a sarcophagus with the supplied parameters and locks a portion of each archaeologist's freeBond equal to the diggingFees for the sarcophagus. Verifies that all supplied archaeologists have signed off on    - doubleHashedKeyShare assigned to them    - arweaveTxId for encrypted keyshares    - maximumRewrapInterval to be enforced for the lifetime of the sarcophagus    - creationTime of sarcophagus    - diggingFee to be paid to that archaeologist on all rewraps for the lifetime of the sarcophagus"
      },
      "rewrapSarcophagus(bytes32,uint256)": {
        "notice": "Updates the resurrectionTime on a sarcophagus. Callable by the embalmer of a sarcophagus if its resurrection time has not passed, it has not been compromised by >k accusals, and it has not been buried."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1779,
        "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4520_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_struct(ArchaeologistProfile)4104_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistProfile)4104_storage"
      },
      "t_mapping(t_address,t_struct(CursedArchaeologist)4091_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.CursedArchaeologist)",
        "numberOfBytes": "32",
        "value": "t_struct(CursedArchaeologist)4091_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Sarcophagus)4082_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibTypes.Sarcophagus)",
        "numberOfBytes": "32",
        "value": "t_struct(Sarcophagus)4082_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4520_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4454,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcoToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 4456,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "totalProtocolFees",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4459,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "protocolFeeBasePercentage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4461,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "gracePeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4463,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "expirationThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4469,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "embalmerSarcophagi",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4474,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistSarcophagi",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4479,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "recipientSarcophagi",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4483,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "doubleHashedShardArchaeologists",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 4486,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcophagusIdentifiers",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4491,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcophagi",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_bytes32,t_struct(Sarcophagus)4082_storage)"
          },
          {
            "astId": 4494,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistProfileAddresses",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4499,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistProfiles",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(ArchaeologistProfile)4104_storage)"
          },
          {
            "astId": 4503,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistRewards",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4509,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistSuccesses",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4514,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistAccusals",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4519,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistCleanups",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(ArchaeologistProfile)4104_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistProfile",
        "members": [
          {
            "astId": 4093,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4095,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4097,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "minimumDiggingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4099,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4101,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "freeBond",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4103,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "cursedBond",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(CursedArchaeologist)4091_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.CursedArchaeologist",
        "members": [
          {
            "astId": 4084,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "doubleHashedKeyShare",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4086,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "isAccused",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4088,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "diggingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4090,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "rawKeyShare",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Sarcophagus)4082_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.Sarcophagus",
        "members": [
          {
            "astId": 4057,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "resurrectionTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4059,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "isCompromised",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4061,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4063,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "threshold",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 4065,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4069,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "arweaveTxIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)2_storage"
          },
          {
            "astId": 4071,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "embalmerAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 4073,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 4076,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "cursedArchaeologistAddresses",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4081,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "cursedArchaeologists",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_struct(CursedArchaeologist)4091_storage)"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}