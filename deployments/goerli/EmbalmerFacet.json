{
  "address": "0x3F1Ab4d33E181a6A65cB9684193c8133a6ffb180",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "archaeologists",
          "type": "address[]"
        }
      ],
      "name": "ArchaeologistListNotUnique",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistProfileExistsShouldBe",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArweaveTxIdsInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recoveredAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expectedAddress",
          "type": "address"
        }
      ],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "minShards",
          "type": "uint8"
        }
      ],
      "name": "MinShardsGreaterThanArchaeologists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinShardsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newResurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "NewResurrectionTimeInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newResurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "NewResurrectionTimeTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoArchaeologistsProvided",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursedBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughCursedBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughFreeBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "ResurrectionTimeInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sarcophagusMaximumRewrapInterval",
          "type": "uint256"
        }
      ],
      "name": "ResurrectionTimeTooFarInFuture",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SarcophagusIsUnwrappable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SarcophagusParametersExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "embalmer",
          "type": "address"
        }
      ],
      "name": "SenderNotEmbalmer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "BurySarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "canBeTransferred",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "embalmer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "cursedArchaeologists",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDiggingFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "createSarcophagusProtocolFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "arweaveTxIds",
          "type": "string[]"
        }
      ],
      "name": "CreateSarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDiggingFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewrapSarcophagusProtocolFees",
          "type": "uint256"
        }
      ],
      "name": "RewrapSarcophagus",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "burySarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "resurrectionTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumRewrapInterval",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canBeTransferred",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "minShards",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibTypes.SarcophagusMemory",
          "name": "sarcophagus",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "archAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "diggingFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "unencryptedShardDoubleHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibTypes.SelectedArchaeologistData[]",
          "name": "selectedArchaeologists",
          "type": "tuple[]"
        },
        {
          "internalType": "string[]",
          "name": "arweaveTxIds",
          "type": "string[]"
        }
      ],
      "name": "createSarcophagus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "rewrapSarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e3e9eed05f88f19117179c912d5ec2d7f21d69afb7e1ea7c749bef3e5f09c4e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x16C5D075eC8F7fcA5FD893023CCFb45a0f7CDe8a",
    "contractAddress": null,
    "transactionIndex": 77,
    "gasUsed": "2784622",
    "logsBloom": "0x
    "blockHash": "0xdc2fe4ec74d51cc5aa5ee42daabdda416b28f3cc93dcc809487a0db2f6318f2a",
    "transactionHash": "0x0e3e9eed05f88f19117179c912d5ec2d7f21d69afb7e1ea7c749bef3e5f09c4e",
    "logs": [],
    "blockNumber": 7929206,
    "cumulativeGasUsed": "24874287",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "56130bd9f01ace07412cd56d3f8a0e58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"archaeologists\",\"type\":\"address[]\"}],\"name\":\"ArchaeologistListNotUnique\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistProfileExistsShouldBe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArweaveTxIdsInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recoveredAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedAddress\",\"type\":\"address\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minShards\",\"type\":\"uint8\"}],\"name\":\"MinShardsGreaterThanArchaeologists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinShardsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newResurrectionTime\",\"type\":\"uint256\"}],\"name\":\"NewResurrectionTimeInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newResurrectionTime\",\"type\":\"uint256\"}],\"name\":\"NewResurrectionTimeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoArchaeologistsProvided\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursedBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughCursedBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFreeBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"}],\"name\":\"ResurrectionTimeInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sarcophagusMaximumRewrapInterval\",\"type\":\"uint256\"}],\"name\":\"ResurrectionTimeTooFarInFuture\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SarcophagusIsUnwrappable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SarcophagusParametersExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"embalmer\",\"type\":\"address\"}],\"name\":\"SenderNotEmbalmer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"BurySarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canBeTransferred\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"embalmer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cursedArchaeologists\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDiggingFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createSarcophagusProtocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"arweaveTxIds\",\"type\":\"string[]\"}],\"name\":\"CreateSarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDiggingFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewrapSarcophagusProtocolFees\",\"type\":\"uint256\"}],\"name\":\"RewrapSarcophagus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"burySarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canBeTransferred\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"minShards\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct LibTypes.SarcophagusMemory\",\"name\":\"sarcophagus\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"archAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"diggingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"unencryptedShardDoubleHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibTypes.SelectedArchaeologistData[]\",\"name\":\"selectedArchaeologists\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"arweaveTxIds\",\"type\":\"string[]\"}],\"name\":\"createSarcophagus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"}],\"name\":\"rewrapSarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burySarcophagus(bytes32)\":{\"details\":\"Extends the resurrection time into infinity so that that unwrap will never be successful.\",\"params\":{\"sarcoId\":\"the identifier of the sarcophagus\"}},\"createSarcophagus(bytes32,(string,address,uint256,uint256,bool,uint8,uint256),(address,uint256,bytes32,uint8,bytes32,bytes32)[],string[])\":{\"params\":{\"arweaveTxIds\":\"ordered pair of arweave tx ids: [tx storing sarcophagus payload,         tx storing the archaeologists' encrypted key shares]\",\"sarcoId\":\"the identifier of the sarcophagus\",\"sarcophagus\":\"an object that contains the sarcophagus data\",\"selectedArchaeologists\":\"the archaeologists the embalmer has selected to curse\"},\"returns\":{\"_0\":\"The index of the new sarcophagus\"}},\"rewrapSarcophagus(bytes32,uint256)\":{\"details\":\"The embalmer sets a new resurrection time sometime in the future.\",\"params\":{\"resurrectionTime\":\"the new resurrection time\",\"sarcoId\":\"the identifier of the sarcophagus\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burySarcophagus(bytes32)\":{\"notice\":\"Permanently closes the sarcophagus, giving it no opportunity to be resurrected. This may only be done before resurrection time has passed.\"},\"createSarcophagus(bytes32,(string,address,uint256,uint256,bool,uint8,uint256),(address,uint256,bytes32,uint8,bytes32,bytes32)[],string[])\":{\"notice\":\"Embalmer creates the sarcophagus. The purpose of createSarcophagus is to:   - Lock up payment for the selected archaeologists (digging fees)   - Store the arweave TX IDs pertaining to the encrypted file payload   -    and the encrypted shards   - Verify the selected archaeologists have signed off on the         double hash of their key share,         arweave tx id storing key shares,         and maximumRewrapInterval to be used for lifetime of the sarcophagus   - Store the selected archaeologists' addresses, digging fees and   -     unencrypted double hashes   - Curse each participating archaeologist   - Create the sarcophagus object\"},\"rewrapSarcophagus(bytes32,uint256)\":{\"notice\":\"The embalmer may extend the life of the sarcophagus as long as the resurrection time has not passed yet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/EmbalmerFacet.sol\":\"EmbalmerFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/facets/EmbalmerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\nimport {LibBonds} from \\\"../libraries/LibBonds.sol\\\";\\nimport {LibUtils} from \\\"../libraries/LibUtils.sol\\\";\\nimport {AppStorage} from \\\"../storage/LibAppStorage.sol\\\";\\n\\ncontract EmbalmerFacet {\\n    // IMPORTANT: AppStorage must be the first state variable in the facet.\\n    AppStorage internal s;\\n\\n    event CreateSarcophagus(\\n        bytes32 indexed sarcoId,\\n        string name,\\n        bool canBeTransferred,\\n        uint256 resurrectionTime,\\n        address embalmer,\\n        address recipient,\\n        address[] cursedArchaeologists,\\n        uint256 totalDiggingFees,\\n        uint256 createSarcophagusProtocolFees,\\n        string[] arweaveTxIds\\n    );\\n\\n    event RewrapSarcophagus(\\n        bytes32 indexed sarcoId,\\n        uint256 resurrectionTime,\\n        uint256 totalDiggingFees,\\n        uint256 rewrapSarcophagusProtocolFees\\n    );\\n\\n    event BurySarcophagus(bytes32 indexed sarcoId);\\n\\n    // Archaeologist's addresses are added to this mapping per sarcophagus to\\n    // verify that the same archaeologist signature is not used more than once.\\n    mapping(bytes32 => mapping(address => bool)) private verifiedArchaeologists;\\n\\n    /// @notice Embalmer creates the sarcophagus.\\n    ///\\n    /// The purpose of createSarcophagus is to:\\n    ///   - Lock up payment for the selected archaeologists (digging fees)\\n    ///   - Store the arweave TX IDs pertaining to the encrypted file payload\\n    ///   -    and the encrypted shards\\n    ///   - Verify the selected archaeologists have signed off on the\\n    ///         double hash of their key share,\\n    ///         arweave tx id storing key shares,\\n    ///         and maximumRewrapInterval to be used for lifetime of the sarcophagus\\n    ///   - Store the selected archaeologists' addresses, digging fees and\\n    ///   -     unencrypted double hashes\\n    ///   - Curse each participating archaeologist\\n    ///   - Create the sarcophagus object\\n    ///\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param sarcophagus an object that contains the sarcophagus data\\n    /// @param selectedArchaeologists the archaeologists the embalmer has selected to curse\\n    /// @param arweaveTxIds ordered pair of arweave tx ids: [tx storing sarcophagus payload,\\n    ///         tx storing the archaeologists' encrypted key shares]\\n    /// @return The index of the new sarcophagus\\n    function createSarcophagus(\\n        bytes32 sarcoId,\\n        LibTypes.SarcophagusMemory memory sarcophagus,\\n        LibTypes.SelectedArchaeologistData[] memory selectedArchaeologists,\\n        string[] memory arweaveTxIds\\n    ) external returns (uint256) {\\n        // Confirm that this exact sarcophagus does not already exist\\n        if (\\n            s.sarcophagi[sarcoId].state !=\\n            LibTypes.SarcophagusState.DoesNotExist\\n        ) {\\n            revert LibErrors.SarcophagusAlreadyExists(sarcoId);\\n        }\\n\\n        // Confirm that the agreed upon sarcophagus parameters have not expired\\n        if (sarcophagus.timestamp + s.expirationThreshold < block.timestamp) {\\n            revert LibErrors.SarcophagusParametersExpired(\\n                sarcophagus.timestamp\\n            );\\n        }\\n\\n        // Confirm that the resurrection time is in the future\\n        if (sarcophagus.resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(\\n                sarcophagus.resurrectionTime\\n            );\\n        }\\n\\n        // Confirm that resurrection or rewrap will occur before the maximumRewrapInterval elapses\\n        if (sarcophagus.resurrectionTime > block.timestamp + sarcophagus.maximumRewrapInterval) {\\n            revert LibErrors.ResurrectionTimeTooFarInFuture(sarcophagus.resurrectionTime, sarcophagus.maximumRewrapInterval);\\n        }\\n\\n        // Validate exactly 2 arweave TX IDs have been provided\\n        // TODO: See if we can verify exact byte length of arweave TXs\\n        if (arweaveTxIds.length != 2 || bytes(arweaveTxIds[0]).length == 0 || bytes(arweaveTxIds[1]).length == 0) {\\n            revert LibErrors.ArweaveTxIdsInvalid();\\n        }\\n\\n        // Confirm that archaeologists are provided\\n        if (selectedArchaeologists.length == 0) {\\n            revert LibErrors.NoArchaeologistsProvided();\\n        }\\n\\n        // Confirm that minShards is greater than 0\\n        if (sarcophagus.minShards == 0) {\\n            revert LibErrors.MinShardsZero();\\n        }\\n\\n        // Confirm that minShards is less than or equal to the number of archaeologists\\n        // (k <= n in a shamir secret sharing scheme)\\n        if (sarcophagus.minShards > selectedArchaeologists.length) {\\n            revert LibErrors.MinShardsGreaterThanArchaeologists(\\n                sarcophagus.minShards\\n            );\\n        }\\n\\n        // Initialize a list of archaeologist addresses to be passed in to the\\n        // sarcophagus object\\n        address[] memory cursedArchaeologists = new address[](\\n            selectedArchaeologists.length\\n        );\\n\\n        uint256 totalDiggingFees = 0;\\n\\n        for (uint256 i = 0; i < selectedArchaeologists.length; i++) {\\n            LibTypes.SelectedArchaeologistData memory arch = selectedArchaeologists[i];\\n            LibUtils.revertIfArchProfileDoesNotExist(arch.archAddress);\\n\\n            // Confirm that the archaeologist list is unique. This is done by\\n            // checking that the archaeologist does not already exist from\\n            // previous iterations in this loop.\\n            if (LibUtils.archaeologistExistsOnSarc(sarcoId, arch.archAddress)) {\\n                revert LibErrors.ArchaeologistListNotUnique(\\n                    cursedArchaeologists\\n                );\\n            }\\n\\n            // Validate the archaeologist has signed off on the sarcophagus parameters: double hashed key share,\\n            // arweaveTxId[1] (tx storing share on arweave), maximumRewrapInterval for sarcophagus\\n            LibUtils.verifyArchaeologistSignature(\\n                arch.unencryptedShardDoubleHash,\\n                arweaveTxIds[1],\\n                sarcophagus.maximumRewrapInterval,\\n                sarcophagus.timestamp,\\n                arch.diggingFee,\\n                arch.v,\\n                arch.r,\\n                arch.s,\\n                arch.archAddress\\n            );\\n\\n            totalDiggingFees += arch.diggingFee;\\n\\n            LibTypes.ArchaeologistStorage memory archaeologistStorage = LibTypes\\n                .ArchaeologistStorage({\\n                    diggingFee: arch.diggingFee,\\n                    diggingFeesPaid: 0,\\n                    unencryptedShardDoubleHash: arch.unencryptedShardDoubleHash,\\n                    unencryptedShard: \\\"\\\"\\n                });\\n\\n            // Map the double-hashed share to this archaeologist's address for easier referencing on accuse\\n            s.doubleHashedShardArchaeologists[arch.unencryptedShardDoubleHash] = arch\\n                .archAddress;\\n\\n            // Save the necessary archaeologist data to the sarcophagus\\n            s.sarcophagusArchaeologists[sarcoId][\\n                arch.archAddress\\n            ] = archaeologistStorage;\\n\\n            // Add the sarcophagus identifier to archaeologist's list of sarcophagi\\n            s.archaeologistSarcophagi[arch.archAddress].push(sarcoId);\\n\\n            // Move free bond to cursed bond on archaeologist\\n            LibBonds.curseArchaeologist(sarcoId, arch.archAddress);\\n\\n            // Add the archaeologist address to the list of addresses to be\\n            // passed in to the sarcophagus object\\n            cursedArchaeologists[i] = arch.archAddress;\\n        }\\n\\n        // Create the sarcophagus object and store it in AppStorage\\n\\n        // Sarco will continue to be in Active state past its resurrection window\\n        // if no archaeologist ever unwraps it and it's never cleaned, buried or accused.\\n        // Failure can be inferred by simply making sure to check if the Sarco has\\n        // expired when its state is Active.\\n        // Note this is also true for the Resurrecting state, if at leaset one of the\\n        // archaeologists did unwrap before it was too late.\\n        s.sarcophagi[sarcoId] = LibTypes.Sarcophagus({\\n            name: sarcophagus.name,\\n            state: LibTypes.SarcophagusState.Active,\\n            canBeTransferred: sarcophagus.canBeTransferred,\\n            minShards: sarcophagus.minShards,\\n            resurrectionTime: sarcophagus.resurrectionTime,\\n            maximumRewrapInterval: sarcophagus.maximumRewrapInterval,\\n            arweaveTxIds: arweaveTxIds,\\n            embalmer: msg.sender,\\n            recipientAddress: sarcophagus.recipient,\\n            archaeologists: cursedArchaeologists\\n        });\\n\\n        // Add the identifier to the necessary data structures\\n        s.sarcophagusIdentifiers.push(sarcoId);\\n        s.embalmerSarcophagi[msg.sender].push(sarcoId);\\n        s.recipientSarcophagi[sarcophagus.recipient].push(sarcoId);\\n\\n        // Transfer the total fees amount + protocol fees in sarco token from the embalmer to this contract\\n        uint256 protocolFees = LibUtils.calculateProtocolFees(totalDiggingFees);\\n\\n        // Add the create sarcophagus protocol fee to the total protocol fees in storage\\n        s.totalProtocolFees += protocolFees;\\n\\n        s.sarcoToken.transferFrom(\\n            msg.sender,\\n            address(this),\\n            totalDiggingFees + protocolFees\\n        );\\n\\n        // Emit the event\\n        emit CreateSarcophagus(\\n            sarcoId,\\n            sarcophagus.name,\\n            sarcophagus.canBeTransferred,\\n            sarcophagus.resurrectionTime,\\n            msg.sender,\\n            sarcophagus.recipient,\\n            cursedArchaeologists,\\n            totalDiggingFees,\\n            protocolFees,\\n            arweaveTxIds\\n        );\\n\\n        // Return the index of the sarcophagus\\n        return s.sarcophagusIdentifiers.length - 1;\\n    }\\n\\n    /// @notice The embalmer may extend the life of the sarcophagus as long as\\n    /// the resurrection time has not passed yet.\\n    /// @dev The embalmer sets a new resurrection time sometime in the future.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param resurrectionTime the new resurrection time\\n    function rewrapSarcophagus(bytes32 sarcoId, uint256 resurrectionTime)\\n        external\\n    {\\n        LibUtils.revertIfNotExistOrInactive(sarcoId);\\n\\n        // Confirm that the sender is the embalmer\\n        if (s.sarcophagi[sarcoId].embalmer != msg.sender) {\\n            revert LibErrors.SenderNotEmbalmer(\\n                msg.sender,\\n                s.sarcophagi[sarcoId].embalmer\\n            );\\n        }\\n\\n        // Confirm current resurrection time is in future (sarcophagus is rewrappable)\\n        if (s.sarcophagi[sarcoId].resurrectionTime <= block.timestamp) {\\n            revert LibErrors.SarcophagusIsUnwrappable();\\n        }\\n\\n        // Confirm that the new resurrection time is in the future\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.NewResurrectionTimeInPast(resurrectionTime);\\n        }\\n\\n\\n        // Confirm that the new resurrection time doesn't exceed the sarcophagus's maximumRewrapInterval\\n        if (resurrectionTime > block.timestamp + s.sarcophagi[sarcoId].maximumRewrapInterval) {\\n            revert LibErrors.NewResurrectionTimeTooLarge(resurrectionTime);\\n        }\\n\\n        // For each archaeologist on the sarcophagus, transfer their digging fee allocations to them\\n        address[] memory bondedArchaeologists = s\\n            .sarcophagi[sarcoId]\\n            .archaeologists;\\n\\n        uint256 totalDiggingFees = 0;\\n\\n        for (uint256 i = 0; i < bondedArchaeologists.length; i++) {\\n            // Get the archaeolgist's fee data\\n            LibTypes.ArchaeologistStorage memory archaeologistData = LibUtils\\n                .getArchaeologist(sarcoId, bondedArchaeologists[i]);\\n\\n            // Transfer the archaeologist's digging fee allocation to the archaeologist's reward pool\\n            s.archaeologistRewards[bondedArchaeologists[i]] += archaeologistData.diggingFee;\\n\\n            // Add to the total of digging fees paid\\n            archaeologistData.diggingFeesPaid += archaeologistData.diggingFee;\\n\\n            // Add the archaeologist's digging fee to the sum\\n            totalDiggingFees += archaeologistData.diggingFee;\\n\\n            // Update the archaeologist's data in storage\\n            s.sarcophagusArchaeologists[sarcoId][\\n                bondedArchaeologists[i]\\n            ] = archaeologistData;\\n        }\\n\\n        uint256 protocolFees = LibUtils.calculateProtocolFees(totalDiggingFees);\\n\\n        // Add the protocol fee to the total protocol fees in storage\\n        s.totalProtocolFees += protocolFees;\\n\\n        // Update the resurrectionTime on the sarcophagus to the supplied value\\n        s.sarcophagi[sarcoId].resurrectionTime = resurrectionTime;\\n\\n        // Transfer the new digging fees from the embalmer to the sarcophagus contract.\\n        // Archaeologists may withdraw their due from their respective reward pools\\n        s.sarcoToken.transferFrom(\\n            msg.sender,\\n            address(this),\\n            totalDiggingFees + protocolFees\\n        );\\n\\n        // Emit an event\\n        emit RewrapSarcophagus(sarcoId, resurrectionTime, totalDiggingFees, protocolFees);\\n    }\\n\\n    /// @notice Permanently closes the sarcophagus, giving it no opportunity to\\n    /// be resurrected.\\n    /// This may only be done before resurrection time has passed.\\n    /// @dev Extends the resurrection time into infinity so that that unwrap\\n    /// will never be successful.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    function burySarcophagus(bytes32 sarcoId) external {\\n        LibUtils.revertIfNotExistOrInactive(sarcoId);\\n\\n        // Confirm that the sender is the embalmer\\n        if (s.sarcophagi[sarcoId].embalmer != msg.sender) {\\n            revert LibErrors.SenderNotEmbalmer(\\n                msg.sender,\\n                s.sarcophagi[sarcoId].embalmer\\n            );\\n        }\\n\\n        // Confirm that the current resurrection time is in the future\\n        if (s.sarcophagi[sarcoId].resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(\\n                s.sarcophagi[sarcoId].resurrectionTime\\n            );\\n        }\\n\\n        // Set resurrection time to infinity\\n        s.sarcophagi[sarcoId].resurrectionTime = 2**256 - 1;\\n\\n        // Set sarcophagus state to done\\n        s.sarcophagi[sarcoId].state = LibTypes.SarcophagusState.Buried;\\n\\n        // For each archaeologist on the sarcophagus,\\n        // 1. Unlock their cursed bond\\n        // 2. Transfer digging fees to the archaeologist.\\n        address[] memory bondedArchaeologists = s\\n            .sarcophagi[sarcoId]\\n            .archaeologists;\\n\\n        for (uint256 i = 0; i < bondedArchaeologists.length; i++) {\\n            // Unlock the archaeologist's cursed bond\\n            LibBonds.freeArchaeologist(sarcoId, bondedArchaeologists[i]);\\n\\n            LibTypes.ArchaeologistStorage memory archaeologistData = LibUtils\\n                .getArchaeologist(sarcoId, bondedArchaeologists[i]);\\n\\n            // Transfer the digging fees to the archaeologist's reward pool\\n            s.archaeologistRewards[bondedArchaeologists[i]] += archaeologistData.diggingFee;\\n        }\\n\\n        // Emit an event\\n        emit BurySarcophagus(sarcoId);\\n    }\\n}\\n\",\"keccak256\":\"0xdb49187f7e89a65cca011aa7b2696ea1cfe99c90ca8a9ac8953a5bbe4bb5c3b8\",\"license\":\"Unlicense\"},\"contracts/libraries/LibBonds.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\nlibrary LibBonds {\\n    /// @notice Calculates the cursed bond that an archaeologist needs to lock\\n    /// up\\n    /// @dev The cursed bond amount is the digging fee\\n    /// @param diggingFee The digging fee of the sarcophagus\\n    /// @return The amount of cursed bond\\n    function calculateCursedBond(uint256 diggingFee)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // TODO: We dont need this function unless we implement a better algorithm\\n        // for calculating the cursed bond\\n        // Anywhere this method is used should be replaced with just the digging fee\\n        return diggingFee;\\n    }\\n\\n    /// @notice Decreases the amount stored in the freeBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's free bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function decreaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current free bond\\n        if (amount > s.archaeologistProfiles[archaeologist].freeBond) {\\n            revert LibErrors.NotEnoughFreeBond(\\n                s.archaeologistProfiles[archaeologist].freeBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the freeBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function increaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond += amount;\\n    }\\n\\n    /// @notice Decreases the amount stored in the cursedBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's cursed bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function decreaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current cursed bond\\n        if (amount > s.archaeologistProfiles[archaeologist].cursedBond) {\\n            revert LibErrors.NotEnoughCursedBond(\\n                s.archaeologistProfiles[archaeologist].cursedBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the cursedBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function increaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond += amount;\\n    }\\n\\n    /// @notice Locks up the archaeologist's bond, decreasing the\\n    /// archaeologist's free bond by an amount and increasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to lock up\\n    function lockUpBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the free bond amount\\n        decreaseFreeBond(archaeologist, amount);\\n\\n        // Increase the cursed bond amount\\n        increaseCursedBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Unlocks the archaeologist's bond, increasing the\\n    /// archaeologist's free bond by an amount and decreasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to unlock\\n    function unlockBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the cursed bond amount\\n        decreaseCursedBond(archaeologist, amount);\\n\\n        // Increase the free bond amount\\n        increaseFreeBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and curses them (locks\\n    /// up the free bond).\\n    /// @param sarcoId the identifier of the sarcophagus to bond the archaeologist with\\n    /// @param archaeologist the address of the archaeologist to curse\\n    function curseArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee\\n        );\\n\\n        // Lock up the archaeologist's bond by the cursed bond amount\\n        lockUpBond(archaeologist, cursedBondAmount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and frees them\\n    /// (unlocks the cursed bond).\\n    /// @param sarcoId the identifier of the sarcophagus to free the archaologist from\\n    /// @param archaeologist the address of the archaeologist to free\\n    function freeArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee\\n        );\\n\\n        // Free up the archaeologist's locked bond\\n        unlockBond(archaeologist, cursedBondAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x18f939f2a764ed05d12fd6ffa9e511718ab1a723d3bfda2d0e2a3cc0c1889084\",\"license\":\"Unlicense\"},\"contracts/libraries/LibErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of Errors\\n * @notice This library defines all of the Errors that the Sarcophagus system\\n * uses.\\n */\\nlibrary LibErrors {\\n    error AccuseNotEnoughProof(uint256 shardsProvided, uint8 minShards);\\n\\n    error AccuseIncorrectProof();\\n\\n    error ArchaeologistAlreadyUnwrapped(address archaeologist);\\n\\n    error ArchaeologistListNotUnique(address[] archaeologists);\\n\\n    error ArchaeologistNotOnSarcophagus(address archaeologist);\\n\\n    error ArchaeologistProfileExistsShouldBe(bool exists, address archaeologist);\\n\\n    error ArweaveTxIdsInvalid();\\n\\n    error DiggingFeeTooLow(uint256 diggingFee, address archaeologist);\\n\\n    error MinShardsGreaterThanArchaeologists(uint8 minShards);\\n\\n    error MinShardsZero();\\n\\n    error MaxResurrectionIntervalIsZero();\\n\\n    error NewResurrectionTimeInPast(uint256 newResurrectionTime);\\n\\n    error NewResurrectionTimeTooLarge(uint256 newResurrectionTime);\\n\\n    error NoArchaeologistsProvided();\\n\\n    error NotEnoughCursedBond(uint256 cursedBond, uint256 amount);\\n\\n    error NotEnoughFreeBond(uint256 freeBond, uint256 amount);\\n\\n    error NotEnoughReward(uint256 reward, uint256 amount);\\n\\n    error ResurrectionTimeInPast(uint256 resurrectionTime);\\n\\n    error ResurrectionTimeTooFarInFuture(uint256 resurrectionTime, uint256 sarcophagusMaximumRewrapInterval);\\n\\n    error SarcophagusAlreadyExists(bytes32 sarcoId);\\n\\n    error SarcophagusDoesNotExist(bytes32 sarcoId);\\n\\n    error SarcophagusInactive(bytes32 sarcoId);\\n\\n    error SenderNotEmbalmer(address sender, address embalmer);\\n\\n    error InvalidSignature(\\n    // address recovered from signature via ecrecover\\n        address recoveredAddress,\\n    // address we expected to have signed the data\\n        address expectedAddress\\n    );\\n\\n    error SignerNotArchaeologistOnSarcophagus(bytes32 sarcoId, address signer);\\n\\n    // Used when an attempt is made to accuse or rewrap after the resurrection time has already passed (so it's actually time to unwrap it)\\n    error SarcophagusIsUnwrappable();\\n\\n    // Used when an attempt is made to clean a sarcophagus before the grace period after the resurrection time has passed\\n    error SarcophagusNotCleanable();\\n\\n    error TooEarlyToUnwrap(uint256 resurrectionTime, uint256 currentTime);\\n\\n    error TooLateToUnwrap(\\n        uint256 resurrectionTime,\\n        uint256 gracePeriod,\\n        uint256 currentTime\\n    );\\n\\n    error UnencryptedShardHashMismatch(\\n        bytes unencryptedShard,\\n        bytes32 doubleHashedShard\\n    );\\n\\n    error SarcophagusParametersExpired(uint256 timestamp);\\n}\\n\\n\",\"keccak256\":\"0x3ebd897b208b998b087c16b72bfd527e9f45ea7dadc8c83ac8de50ce65b6c42c\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of defined structs\\n * @notice This library defines the various data models that the Sarcophagus\\n * system uses\\n */\\nlibrary LibTypes {\\n    // DoesNotExist must come first on the list to be the default value\\n    enum SarcophagusState {\\n        DoesNotExist,\\n        Active,\\n        Resurrecting,\\n        Resurrected,\\n        Buried,\\n        Cleaned,\\n        Accused,\\n        Failed\\n    }\\n\\n    // A struct of just the signature. This is used primarily by the\\n    // finalizeSarcophagus function for the arweave archaeologist. Note that,\\n    // unlike the regular archaeologists, the sarcophagus already stores the\\n    // single arweave archaeologist's address so there is no need to pass in the\\n    // address to the finalizeSarcophagus function.\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // Signature struct created to make passing in the signature argmuments into\\n    // finalizedSarcophagus easier and to avoid the \\\"stack too deep\\\" error.\\n    // Also attaching arachaeologist addresses so we can tie the signature back\\n    // to the address in finalizeSarcophagus.\\n    struct SignatureWithAccount {\\n        address account;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // SelectedArchaeologistData is the struct that is passed into the\\n    // initializeSarcophagus function. Even though we don't need each storage\\n    // fee of the archaeologist, the storage fee is included in the struct to\\n    // reduce the stack size within the function, preventing the \\\"stack too\\n    // deep\\\" error.\\n    struct SelectedArchaeologistData {\\n        address archAddress;\\n        uint256 diggingFee;\\n        bytes32 unencryptedShardDoubleHash;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // ArchaeologistStorage is the struct that is stored in AppStorage under the\\n    // sarcophagusArchaeologists mapping.\\n    //\\n    // The archaeologist address is left out since each archaeologist's address\\n    // is stored on the sarcophagus object as an array.\\n    //\\n    // The storage fee is left out because we only need to store the storage fee\\n    // of the archaeologist uploading to arweave, which will be stored directly\\n    // on the sarcophagus.\\n    struct ArchaeologistStorage {\\n        uint256 diggingFee;\\n        uint256 diggingFeesPaid;\\n        bytes32 unencryptedShardDoubleHash;\\n        bytes unencryptedShard;\\n    }\\n\\n    // ArchaeologistProfile is used to store archaeologist profile data\\n    struct ArchaeologistProfile {\\n        bool exists;\\n        string peerId;\\n        uint256 minimumDiggingFee;\\n        uint256 maximumRewrapInterval;\\n        uint256 freeBond;\\n        uint256 cursedBond;\\n    }\\n\\n    struct SarcophagusMemory {\\n        string name;\\n        address recipient;\\n        uint256 resurrectionTime;\\n        uint256 maximumRewrapInterval;\\n        bool canBeTransferred;\\n        uint8 minShards;\\n        uint256 timestamp;\\n    }\\n\\n    // The ArchaeologistStorage struct could be contained in this Sarcophagus\\n    // struct as a mapping, but it was put into it's own mapping\\n    // (sarcophagusArchaeologists) directly in AppStorage. Instead the\\n    // sarcophagus stores the addresses of each archaeologist added to it. This\\n    // was done to simplify the creation of a sarcophagus object in\\n    // initializeSarcophagus.\\n    struct Sarcophagus {\\n        string name;\\n        SarcophagusState state;\\n        bool canBeTransferred;\\n        uint8 minShards;\\n        uint256 resurrectionTime;\\n        uint256 maximumRewrapInterval;\\n        string[] arweaveTxIds;\\n        address embalmer;\\n        address recipientAddress;\\n        address[] archaeologists;\\n    }\\n\\n    struct MetadataAttributes {\\n        string sarcophagusName;\\n        uint256 diggingFee;\\n        uint256 resurrectionTime;\\n        uint256 diggingFeesPaid;\\n    }\\n\\n    // Only used in the ViewStateFacet to return statistics data.\\n    // Contains a list of sarcoIds for each category. We could simply return the counts of the\\n    // arrays but we are already storing the lists of sarcoIds so we may as well use them.\\n    struct ArchaeologistStatistics {\\n        uint256 successes;\\n        uint256 accusals;\\n        uint256 cleanups;\\n    }\\n}\\n\",\"keccak256\":\"0x1ebf49a2c2223309fc8975dfac35ffd03daf5746458d8e93b33fe86fad73ae1f\",\"license\":\"Unlicense\"},\"contracts/libraries/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\n/**\\n * @title Utility functions used within the Sarcophagus system\\n * @notice This library implements various functions that are used throughout\\n * Sarcophagus, mainly to DRY up the codebase\\n * @dev these functions are all stateless, public, pure/view\\n */\\nlibrary LibUtils {\\n    /**\\n     * @notice Reverts if the public key length is not exactly 64 bytes long\\n     * @param publicKey the key to check length of\\n     */\\n    function publicKeyLength(bytes memory publicKey) public pure {\\n        require(publicKey.length == 64, \\\"public key must be 64 bytes\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if the hash of singleHash does not equal doubleHash\\n     * @param doubleHash the hash to compare hash of singleHash to\\n     * @param singleHash the value to hash and compare against doubleHash\\n     */\\n    function hashCheck(bytes32 doubleHash, bytes memory singleHash)\\n        public\\n        pure\\n    {\\n        require(doubleHash == keccak256(singleHash), \\\"hashes do not match\\\");\\n    }\\n\\n    function archaeologistUnwrappedCheck(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n    {\\n        if (\\n            getArchaeologist(sarcoId, archaeologist).unencryptedShard.length > 0\\n        ) {\\n            revert LibErrors.ArchaeologistAlreadyUnwrapped(archaeologist);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reverts with `SarcophagusDoesNotExist` if the Sarcophagus does not exist,\\n     * or with `SarcophagusInactive` if the Sarcophagus exists but is not active.\\n     * @param sarcoId Identifier of the Sarcophagus\\n     */\\n    function revertIfNotExistOrInactive(bytes32 sarcoId) internal view {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (\\n            s.sarcophagi[sarcoId].state ==\\n            LibTypes.SarcophagusState.DoesNotExist\\n        ) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Active) {\\n            revert LibErrors.SarcophagusInactive(sarcoId);\\n        }\\n    }\\n\\n    /**\\n     * @notice The archaeologist needs to sign off on two pieces of data\\n     * to guarantee their unrwap will be successful\\n     *\\n     * @param unencryptedShardDoubleHash the double hash of the unencrypted shard\\n     * @param arweaveTxId the arweave TX ID that contains the archs encrypted shard\\n     * @param agreedMaximumRewrapInterval that the archaeologist has agreed to for the sarcophagus\\n     * @param timestamp that the archaeologist has agreed to for the sarcophagus\\n     * @param diggingFee that the archaeologist has agreed to for the sarcophagus\\n     * @param v signature element\\n     * @param r signature element\\n     * @param s signature element\\n     * @param account address to confirm signature of data came from\\n     */\\n    function verifyArchaeologistSignature(\\n        bytes32 unencryptedShardDoubleHash,\\n        string memory arweaveTxId,\\n        uint256 agreedMaximumRewrapInterval,\\n        uint256 timestamp,\\n        uint256 diggingFee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address account\\n    ) internal pure {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(arweaveTxId, unencryptedShardDoubleHash, agreedMaximumRewrapInterval, diggingFee, timestamp))\\n            )\\n        );\\n\\n        // Generate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        address recoveredAddress = ecrecover(messageHash, v, r, s);\\n\\n        if (recoveredAddress != account) {\\n            revert LibErrors.InvalidSignature(recoveredAddress, account);\\n        }\\n    }\\n\\n    /// @notice Returns the address that signed some data given the data and the\\n    /// signature.\\n    /// @param data the data to verify\\n    /// @param v signature element\\n    /// @param r signature element\\n    /// @param s signature element\\n    /// @return the address that signed the data\\n    function recoverAddress(\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        // It's highly recommended that a hash be passed into ecrecover\\n        address account = ecrecover(messageHash, v, r, s);\\n\\n        return account;\\n    }\\n\\n    /**\\n     * @notice Reverts if the given resurrection time is not in the future\\n     * @param resurrectionTime the time to check against block.timestamp\\n     */\\n    function resurrectionInFuture(uint256 resurrectionTime) internal view {\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(resurrectionTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reverts if the current block timestamp is not within the resurrection window\\n     * (window = [resurrection time, resurrection time + grace period] inclusive)\\n     * @param resurrectionTime the resurrection time of the sarcophagus\\n     * (absolute, i.e. a date time stamp)\\n     */\\n    function unwrapTime(uint256 resurrectionTime) internal view {\\n        // revert if too early\\n        if (resurrectionTime > block.timestamp) {\\n            revert LibErrors.TooEarlyToUnwrap(\\n                resurrectionTime,\\n                block.timestamp\\n            );\\n        }\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // revert if too late\\n        if (resurrectionTime + s.gracePeriod < block.timestamp) {\\n            revert LibErrors.TooLateToUnwrap(\\n                resurrectionTime,\\n                s.gracePeriod,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if the archaeologist exists on the sarcophagus.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The boolean true if the archaeologist exists on the sarcophagus\\n    function archaeologistExistsOnSarc(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // If the doubleHashedShard on an archaeologist is 0 (which is its default value),\\n        // then the archaeologist doesn't exist on the sarcophagus\\n        return\\n            s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist]\\n                .unencryptedShardDoubleHash != 0;\\n    }\\n\\n    /// @notice Checks if an archaeologist profile exists and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check existence of\\n    function revertIfArchProfileExists(address archaeologist)\\n        internal\\n        view\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(\\n                false,\\n                archaeologist\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if an archaeologist profile doesn't exist and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check lack of existence of\\n    function revertIfArchProfileDoesNotExist(address archaeologist)\\n        internal\\n        view\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (!s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(\\n                true,\\n                archaeologist\\n            );\\n        }\\n    }\\n\\n    /// @notice Gets an archaeologist given the sarcophagus identifier and the\\n    /// archaeologist's address.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The archaeologist\\n    function getArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (LibTypes.ArchaeologistStorage memory)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return s.sarcophagusArchaeologists[sarcoId][archaeologist];\\n    }\\n\\n    /// @notice Calculates the protocol fees to be taken from the embalmer.\\n    /// @return The protocol fees amount\\n    function calculateProtocolFees(uint256 totalDiggingFees) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return (totalDiggingFees * s.protocolFeeBasePercentage) / 100;\\n    }\\n}\\n\",\"keccak256\":\"0x847c25a01b73ab54cd375de984d05b755123438174ca298d2fb9970cedeb7d30\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n// Global storage for the app. Can be accessed in facets and in libraries\\nstruct AppStorage {\\n    IERC20 sarcoToken;\\n    // The percentage (i.e. 1 = 1%) of a sarcophagus' total digging fees that will be collected on\\n    // createSarcophagus and rewrapSarcophagus, paid by the embalmer\\n    uint256 protocolFeeBasePercentage;\\n    // The amount of protocol fees currently stored on the contract\\n    uint256 totalProtocolFees;\\n    // grace period an archaeologist is given to resurrect a sarcophagus after the resurrection time\\n    uint256 gracePeriod;\\n    // threshold after which archaeologist signatures on sarcophagus params expire and the sarcophagus must be renegotiated\\n    uint256 expirationThreshold;\\n    // sarcophagi\\n    bytes32[] sarcophagusIdentifiers;\\n    // archaeologist profiles\\n    address[] archaeologistProfileAddresses;\\n    mapping(address => LibTypes.ArchaeologistProfile) archaeologistProfiles;\\n\\n    // archaeologistSarcoSuccesses is needed by the clean function\\n    // to lookup whether an archaeologist has completed an unwrapping\\n    mapping(address => mapping(bytes32 => bool)) archaeologistSarcoSuccesses;\\n\\n    // Archaeologist reputation statistics\\n    mapping(address => bytes32[]) archaeologistSuccesses;\\n    mapping(address => bytes32[]) archaeologistAccusals;\\n    mapping(address => bytes32[]) archaeologistCleanups;\\n\\n    // Track how much archaeologists have made. To be credited and debited\\n    // as archaeologists fulfill their duties and withdraw their rewards\\n    mapping(address => uint256) archaeologistRewards;\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n    // sarcophagus ownerships\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n    // Mapping of unencrypted shard double hashes to archaeologists who are\\n    // responsible for them. Needed to optimise Accuse algo - unencrypted shard is\\n    // double hashed and used as a constant O(1) lookup here\\n    mapping(bytes32 => address) doubleHashedShardArchaeologists;\\n    // A mapping used to store an archaeologist's data on a sarcophagus.\\n    // Digging fees, storage fees, and the hashed shards of the\\n    // archaeologists all need to be stored per sarcophagus. This mapping of a\\n    // mapping stores the archaeologist's data we need per sarcophagus.\\n    // Example usage (to retrieve the digging fees an archaeologist may claim on some sarcophagus):\\n    //   LibTypes.ArchaeologistStorage bondedArchaeologist = sarcophagusArchaeologists[sarcoId][archAddress];\\n    //   uint256 diggingFees = bondedArchaeologist.diggingFees;\\n    mapping(bytes32 => mapping(address => LibTypes.ArchaeologistStorage)) sarcophagusArchaeologists;\\n}\\n\\nlibrary LibAppStorage {\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        // Set the position of our struct in contract storage\\n        // Since AppStorage s is the first and only state variable declared in\\n        // facets its position in contract storage is 0\\n        assembly {\\n            s.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8344e9d5a7574c1602c4f854e19aa58c255311a057346307663fa56e8b6f5f08\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613181806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630511f2ec146100465780638c0dfab414610062578063ab7d796914610092575b600080fd5b610060600480360381019061005b9190612222565b6100ae565b005b61007c600480360381019061007791906127bd565b610447565b6040516100899190612887565b60405180910390f35b6100ac60048036038101906100a791906128a2565b610efe565b005b6100b781611461565b3373ffffffffffffffffffffffffffffffffffffffff166000600d01600083815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461019b57336000600d01600083815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f0e37d99c0000000000000000000000000000000000000000000000000000000081526004016101929291906128f1565b60405180910390fd5b426000600d0160008381526020019081526020016000206002015411610211576000600d016000828152602001908152602001600020600201546040517f357efa270000000000000000000000000000000000000000000000000000000081526004016102089190612887565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000600d0160008381526020019081526020016000206002018190555060046000600d01600083815260200190815260200160002060010160006101000a81548160ff0219169083600781111561028c5761028b61291a565b5b0217905550600080600d01600083815260200190815260200160002060070180548060200260200160405190810160405280929190818152602001828054801561032b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102e1575b5050505050905060005b8151811015610415576103628383838151811061035557610354612949565b5b602002602001015161158d565b60006103888484848151811061037b5761037a612949565b5b60200260200101516116cc565b905080600001516000600c0160008585815181106103a9576103a8612949565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103fa91906129a7565b9250508190555050808061040d906129fd565b915050610335565b50817f3a0205aa93b1a96da7d6405b2967f91b441383623de2d1ee3b27bfd1642b167a60405160405180910390a25050565b600080600781111561045c5761045b61291a565b5b6000600d01600087815260200190815260200160002060010160009054906101000a900460ff1660078111156104955761049461291a565b5b146104d757846040517fb9d0d5840000000000000000000000000000000000000000000000000000000081526004016104ce9190612a54565b60405180910390fd5b426000600401548560c001516104ed91906129a7565b1015610534578360c001516040517fdbff58b000000000000000000000000000000000000000000000000000000000815260040161052b9190612887565b60405180910390fd5b428460400151116105805783604001516040517f357efa270000000000000000000000000000000000000000000000000000000081526004016105779190612887565b60405180910390fd5b83606001514261059091906129a7565b846040015111156105e257836040015184606001516040517f9abac2dc0000000000000000000000000000000000000000000000000000000081526004016105d9929190612a6f565b60405180910390fd5b6002825114158061060f575060008260008151811061060457610603612949565b5b602002602001015151145b80610636575060008260018151811061062b5761062a612949565b5b602002602001015151145b1561066d576040517fe04bf6fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008351036106a8576040517fb274cdd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008460a0015160ff16036106e9576040517fc289fea400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82518460a0015160ff16111561073a578360a001516040517f4f1dd41a0000000000000000000000000000000000000000000000000000000081526004016107319190612aa7565b60405180910390fd5b6000835167ffffffffffffffff81111561075757610756612265565b5b6040519080825280602002602001820160405280156107855781602001602082028036833780820191505090505b5090506000805b8551811015610a815760008682815181106107aa576107a9612949565b5b602002602001015190506107c181600001516117f6565b6107cf89826000015161189c565b1561081157836040517f8cdcf3410000000000000000000000000000000000000000000000000000000081526004016108089190612b80565b60405180910390fd5b61085d81604001518760018151811061082d5761082c612949565b5b60200260200101518a606001518b60c001518560200151866060015187608001518860a00151896000015161190e565b80602001518361086d91906129a7565b9250600060405180608001604052808360200151815260200160008152602001836040015181526020016040518060200160405280600081525081525090508160000151600060110160008460400151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060120160008c81526020019081526020016000206000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908051906020019061099b929190611f36565b509050506000600f016000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a9080600181540180825580915050600190039060005260206000200160009091909190915055610a1a8a8360000151611a39565b8160000151858481518110610a3257610a31612949565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505050508080610a79906129fd565b91505061078c565b506040518061014001604052808760000151815260200160016007811115610aac57610aab61291a565b5b81526020018760800151151581526020018760a0015160ff16815260200187604001518152602001876060015181526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001876020015173ffffffffffffffffffffffffffffffffffffffff168152602001838152506000600d0160008981526020019081526020016000206000820151816000019080519060200190610b56929190611fbc565b5060208201518160010160006101000a81548160ff02191690836007811115610b8257610b8161291a565b5b021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160010160026101000a81548160ff021916908360ff1602179055506080820151816002015560a0820151816003015560c0820151816004019080519060200190610bf8929190612042565b5060e08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816007019080519060200190610ca59291906120a2565b5090505060006005018790806001815401808255809150506001900390600052602060002001600090919091909150556000600e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087908060018154018082558091505060019003906000526020600020016000909190919091505560006010016000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150556000610db682611b78565b90508060006002016000828254610dcd91906129a7565b925050819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308486610e2291906129a7565b6040518463ffffffff1660e01b8152600401610e4093929190612ba2565b6020604051808303816000875af1158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190612bee565b50877fff3c601046b9adeef393103e1de72cc0c98666bbefcd1a5184f0bc7ce619a453886000015189608001518a60400151338c602001518989898e604051610ed499989796959493929190612dbe565b60405180910390a26001600060050180549050610ef19190612e60565b9350505050949350505050565b610f0782611461565b3373ffffffffffffffffffffffffffffffffffffffff166000600d01600084815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610feb57336000600d01600084815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f0e37d99c000000000000000000000000000000000000000000000000000000008152600401610fe29291906128f1565b60405180910390fd5b426000600d016000848152602001908152602001600020600201541161103d576040517f8680d5de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42811161108157806040517f365e35340000000000000000000000000000000000000000000000000000000081526004016110789190612887565b60405180910390fd5b6000600d01600083815260200190815260200160002060030154426110a691906129a7565b8111156110ea57806040517fe4b2b6180000000000000000000000000000000000000000000000000000000081526004016110e19190612887565b60405180910390fd5b600080600d01600084815260200190815260200160002060070180548060200260200160405190810160405280929190818152602001828054801561118457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161113a575b505050505090506000805b82518110156113265760006111be868584815181106111b1576111b0612949565b5b60200260200101516116cc565b905080600001516000600c0160008685815181106111df576111de612949565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461123091906129a7565b9250508190555080600001518160200181815161124d91906129a7565b9150818152505080600001518361126491906129a7565b92508060006012016000888152602001908152602001600020600086858151811061129257611291612949565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908051906020019061130e929190611f36565b5090505050808061131e906129fd565b91505061118f565b50600061133282611b78565b9050806000600201600082825461134991906129a7565b92505081905550836000600d016000878152602001908152602001600020600201819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084866113bc91906129a7565b6040518463ffffffff1660e01b81526004016113da93929190612ba2565b6020604051808303816000875af11580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d9190612bee565b50847ff2ded5f77c6de574fac210979efbdd01ff3071d109e50651be4e05211f6e494385848460405161145293929190612e94565b60405180910390a25050505050565b600061146b611ba9565b9050600060078111156114815761148061291a565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff1660078111156114b9576114b861291a565b5b036114fb57816040517f018da6880000000000000000000000000000000000000000000000000000000081526004016114f29190612a54565b60405180910390fd5b6001600781111561150f5761150e61291a565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff1660078111156115475761154661291a565b5b1461158957816040517f7c6a6d700000000000000000000000000000000000000000000000000000000081526004016115809190612a54565b60405180910390fd5b5050565b6000611597611ba9565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461162690612efa565b80601f016020809104026020016040519081016040528092919081815260200182805461165290612efa565b801561169f5780601f106116745761010080835404028352916020019161169f565b820191906000526020600020905b81548152906001019060200180831161168257829003601f168201915b505050505081525050905060006116b98260000151611bae565b90506116c58482611bb8565b5050505050565b6116d461212c565b60006116de611ba9565b905080601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461176b90612efa565b80601f016020809104026020016040519081016040528092919081815260200182805461179790612efa565b80156117e45780601f106117b9576101008083540402835291602001916117e4565b820191906000526020600020905b8154815290600101906020018083116117c757829003601f168201915b50505050508152505091505092915050565b6000611800611ba9565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611898576001826040517f2eeb357100000000000000000000000000000000000000000000000000000000815260040161188f929190612f2b565b60405180910390fd5b5050565b6000806118a7611ba9565b90506000801b81601201600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154141591505092915050565b6000888a89888a604051602001611929959493929190612f54565b6040516020818303038152906040528051906020012060405160200161194f9190613026565b60405160208183030381529060405280519060200120905060006001828787876040516000815260200160405260405161198c949392919061304c565b6020604051602081039080840390855afa1580156119ae573d6000803e3d6000fd5b5050506020604051035190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a2c5780836040517f42d750dc000000000000000000000000000000000000000000000000000000008152600401611a239291906128f1565b60405180910390fd5b5050505050505050505050565b6000611a43611ba9565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054611ad290612efa565b80601f0160208091040260200160405190810160405280929190818152602001828054611afe90612efa565b8015611b4b5780601f10611b2057610100808354040283529160200191611b4b565b820191906000526020600020905b815481529060010190602001808311611b2e57829003601f168201915b50505050508152505090506000611b658260000151611bae565b9050611b718482611bd0565b5050505050565b600080611b83611ba9565b90506064816001015484611b979190613091565b611ba1919061311a565b915050919050565b600090565b6000819050919050565b611bc28282611be8565b611bcc8282611d23565b5050565b611bda8282611d8f565b611be48282611eca565b5050565b6000611bf2611ba9565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154821115611cc3578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401611cba929190612a6f565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611d179190612e60565b92505081905550505050565b6000611d2d611ba9565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254611d8391906129a7565b92505081905550505050565b6000611d99611ba9565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154821115611e6a578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154826040517fa4e3bead000000000000000000000000000000000000000000000000000000008152600401611e61929190612a6f565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254611ebe9190612e60565b92505081905550505050565b6000611ed4611ba9565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611f2a91906129a7565b92505081905550505050565b828054611f4290612efa565b90600052602060002090601f016020900481019282611f645760008555611fab565b82601f10611f7d57805160ff1916838001178555611fab565b82800160010185558215611fab579182015b82811115611faa578251825591602001919060010190611f8f565b5b509050611fb89190612157565b5090565b828054611fc890612efa565b90600052602060002090601f016020900481019282611fea5760008555612031565b82601f1061200357805160ff1916838001178555612031565b82800160010185558215612031579182015b82811115612030578251825591602001919060010190612015565b5b50905061203e9190612157565b5090565b828054828255906000526020600020908101928215612091579160200282015b82811115612090578251829080519060200190612080929190611fbc565b5091602001919060010190612062565b5b50905061209e9190612174565b5090565b82805482825590600052602060002090810192821561211b579160200282015b8281111561211a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906120c2565b5b5090506121289190612157565b5090565b6040518060800160405280600081526020016000815260200160008019168152602001606081525090565b5b80821115612170576000816000905550600101612158565b5090565b5b80821115612194576000818161218b9190612198565b50600101612175565b5090565b5080546121a490612efa565b6000825580601f106121b657506121d5565b601f0160209004906000526020600020908101906121d49190612157565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6121ff816121ec565b811461220a57600080fd5b50565b60008135905061221c816121f6565b92915050565b600060208284031215612238576122376121e2565b5b60006122468482850161220d565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61229d82612254565b810181811067ffffffffffffffff821117156122bc576122bb612265565b5b80604052505050565b60006122cf6121d8565b90506122db8282612294565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561230a57612309612265565b5b61231382612254565b9050602081019050919050565b82818337600083830152505050565b600061234261233d846122ef565b6122c5565b90508281526020810184848401111561235e5761235d6122ea565b5b612369848285612320565b509392505050565b600082601f830112612386576123856122e5565b5b813561239684826020860161232f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123ca8261239f565b9050919050565b6123da816123bf565b81146123e557600080fd5b50565b6000813590506123f7816123d1565b92915050565b6000819050919050565b612410816123fd565b811461241b57600080fd5b50565b60008135905061242d81612407565b92915050565b60008115159050919050565b61244881612433565b811461245357600080fd5b50565b6000813590506124658161243f565b92915050565b600060ff82169050919050565b6124818161246b565b811461248c57600080fd5b50565b60008135905061249e81612478565b92915050565b600060e082840312156124ba576124b961224f565b5b6124c460e06122c5565b9050600082013567ffffffffffffffff8111156124e4576124e36122e0565b5b6124f084828501612371565b6000830152506020612504848285016123e8565b60208301525060406125188482850161241e565b604083015250606061252c8482850161241e565b606083015250608061254084828501612456565b60808301525060a06125548482850161248f565b60a08301525060c06125688482850161241e565b60c08301525092915050565b600067ffffffffffffffff82111561258f5761258e612265565b5b602082029050602081019050919050565b600080fd5b600060c082840312156125bb576125ba61224f565b5b6125c560c06122c5565b905060006125d5848285016123e8565b60008301525060206125e98482850161241e565b60208301525060406125fd8482850161220d565b60408301525060606126118482850161248f565b60608301525060806126258482850161220d565b60808301525060a06126398482850161220d565b60a08301525092915050565b600061265861265384612574565b6122c5565b90508083825260208201905060c0840283018581111561267b5761267a6125a0565b5b835b818110156126a4578061269088826125a5565b84526020840193505060c08101905061267d565b5050509392505050565b600082601f8301126126c3576126c26122e5565b5b81356126d3848260208601612645565b91505092915050565b600067ffffffffffffffff8211156126f7576126f6612265565b5b602082029050602081019050919050565b600061271b612716846126dc565b6122c5565b9050808382526020820190506020840283018581111561273e5761273d6125a0565b5b835b8181101561278557803567ffffffffffffffff811115612763576127626122e5565b5b8086016127708982612371565b85526020850194505050602081019050612740565b5050509392505050565b600082601f8301126127a4576127a36122e5565b5b81356127b4848260208601612708565b91505092915050565b600080600080608085870312156127d7576127d66121e2565b5b60006127e58782880161220d565b945050602085013567ffffffffffffffff811115612806576128056121e7565b5b612812878288016124a4565b935050604085013567ffffffffffffffff811115612833576128326121e7565b5b61283f878288016126ae565b925050606085013567ffffffffffffffff8111156128605761285f6121e7565b5b61286c8782880161278f565b91505092959194509250565b612881816123fd565b82525050565b600060208201905061289c6000830184612878565b92915050565b600080604083850312156128b9576128b86121e2565b5b60006128c78582860161220d565b92505060206128d88582860161241e565b9150509250929050565b6128eb816123bf565b82525050565b600060408201905061290660008301856128e2565b61291360208301846128e2565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129b2826123fd565b91506129bd836123fd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156129f2576129f1612978565b5b828201905092915050565b6000612a08826123fd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a3a57612a39612978565b5b600182019050919050565b612a4e816121ec565b82525050565b6000602082019050612a696000830184612a45565b92915050565b6000604082019050612a846000830185612878565b612a916020830184612878565b9392505050565b612aa18161246b565b82525050565b6000602082019050612abc6000830184612a98565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612af7816123bf565b82525050565b6000612b098383612aee565b60208301905092915050565b6000602082019050919050565b6000612b2d82612ac2565b612b378185612acd565b9350612b4283612ade565b8060005b83811015612b73578151612b5a8882612afd565b9750612b6583612b15565b925050600181019050612b46565b5085935050505092915050565b60006020820190508181036000830152612b9a8184612b22565b905092915050565b6000606082019050612bb760008301866128e2565b612bc460208301856128e2565b612bd16040830184612878565b949350505050565b600081519050612be88161243f565b92915050565b600060208284031215612c0457612c036121e2565b5b6000612c1284828501612bd9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c55578082015181840152602081019050612c3a565b83811115612c64576000848401525b50505050565b6000612c7582612c1b565b612c7f8185612c26565b9350612c8f818560208601612c37565b612c9881612254565b840191505092915050565b612cac81612433565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000612cfa82612c1b565b612d048185612cde565b9350612d14818560208601612c37565b612d1d81612254565b840191505092915050565b6000612d348383612cef565b905092915050565b6000602082019050919050565b6000612d5482612cb2565b612d5e8185612cbd565b935083602082028501612d7085612cce565b8060005b85811015612dac5784840389528151612d8d8582612d28565b9450612d9883612d3c565b925060208a01995050600181019050612d74565b50829750879550505050505092915050565b6000610120820190508181036000830152612dd9818c612c6a565b9050612de8602083018b612ca3565b612df5604083018a612878565b612e0260608301896128e2565b612e0f60808301886128e2565b81810360a0830152612e218187612b22565b9050612e3060c0830186612878565b612e3d60e0830185612878565b818103610100830152612e508184612d49565b90509a9950505050505050505050565b6000612e6b826123fd565b9150612e76836123fd565b925082821015612e8957612e88612978565b5b828203905092915050565b6000606082019050612ea96000830186612878565b612eb66020830185612878565b612ec36040830184612878565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f1257607f821691505b602082108103612f2557612f24612ecb565b5b50919050565b6000604082019050612f406000830185612ca3565b612f4d60208301846128e2565b9392505050565b600060a0820190508181036000830152612f6e8188612c6a565b9050612f7d6020830187612a45565b612f8a6040830186612878565b612f976060830185612878565b612fa46080830184612878565b9695505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000612fef601c83612fae565b9150612ffa82612fb9565b601c82019050919050565b6000819050919050565b61302061301b826121ec565b613005565b82525050565b600061303182612fe2565b915061303d828461300f565b60208201915081905092915050565b60006080820190506130616000830187612a45565b61306e6020830186612a98565b61307b6040830185612a45565b6130886060830184612a45565b95945050505050565b600061309c826123fd565b91506130a7836123fd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156130e0576130df612978565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613125826123fd565b9150613130836123fd565b9250826131405761313f6130eb565b5b82820490509291505056fea2646970667358221220d653578b0c8f7e931ae09a13111573d46e2555c633cd638fe06095586406b8e264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630511f2ec146100465780638c0dfab414610062578063ab7d796914610092575b600080fd5b610060600480360381019061005b9190612222565b6100ae565b005b61007c600480360381019061007791906127bd565b610447565b6040516100899190612887565b60405180910390f35b6100ac60048036038101906100a791906128a2565b610efe565b005b6100b781611461565b3373ffffffffffffffffffffffffffffffffffffffff166000600d01600083815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461019b57336000600d01600083815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f0e37d99c0000000000000000000000000000000000000000000000000000000081526004016101929291906128f1565b60405180910390fd5b426000600d0160008381526020019081526020016000206002015411610211576000600d016000828152602001908152602001600020600201546040517f357efa270000000000000000000000000000000000000000000000000000000081526004016102089190612887565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000600d0160008381526020019081526020016000206002018190555060046000600d01600083815260200190815260200160002060010160006101000a81548160ff0219169083600781111561028c5761028b61291a565b5b0217905550600080600d01600083815260200190815260200160002060070180548060200260200160405190810160405280929190818152602001828054801561032b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102e1575b5050505050905060005b8151811015610415576103628383838151811061035557610354612949565b5b602002602001015161158d565b60006103888484848151811061037b5761037a612949565b5b60200260200101516116cc565b905080600001516000600c0160008585815181106103a9576103a8612949565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103fa91906129a7565b9250508190555050808061040d906129fd565b915050610335565b50817f3a0205aa93b1a96da7d6405b2967f91b441383623de2d1ee3b27bfd1642b167a60405160405180910390a25050565b600080600781111561045c5761045b61291a565b5b6000600d01600087815260200190815260200160002060010160009054906101000a900460ff1660078111156104955761049461291a565b5b146104d757846040517fb9d0d5840000000000000000000000000000000000000000000000000000000081526004016104ce9190612a54565b60405180910390fd5b426000600401548560c001516104ed91906129a7565b1015610534578360c001516040517fdbff58b000000000000000000000000000000000000000000000000000000000815260040161052b9190612887565b60405180910390fd5b428460400151116105805783604001516040517f357efa270000000000000000000000000000000000000000000000000000000081526004016105779190612887565b60405180910390fd5b83606001514261059091906129a7565b846040015111156105e257836040015184606001516040517f9abac2dc0000000000000000000000000000000000000000000000000000000081526004016105d9929190612a6f565b60405180910390fd5b6002825114158061060f575060008260008151811061060457610603612949565b5b602002602001015151145b80610636575060008260018151811061062b5761062a612949565b5b602002602001015151145b1561066d576040517fe04bf6fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008351036106a8576040517fb274cdd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008460a0015160ff16036106e9576040517fc289fea400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82518460a0015160ff16111561073a578360a001516040517f4f1dd41a0000000000000000000000000000000000000000000000000000000081526004016107319190612aa7565b60405180910390fd5b6000835167ffffffffffffffff81111561075757610756612265565b5b6040519080825280602002602001820160405280156107855781602001602082028036833780820191505090505b5090506000805b8551811015610a815760008682815181106107aa576107a9612949565b5b602002602001015190506107c181600001516117f6565b6107cf89826000015161189c565b1561081157836040517f8cdcf3410000000000000000000000000000000000000000000000000000000081526004016108089190612b80565b60405180910390fd5b61085d81604001518760018151811061082d5761082c612949565b5b60200260200101518a606001518b60c001518560200151866060015187608001518860a00151896000015161190e565b80602001518361086d91906129a7565b9250600060405180608001604052808360200151815260200160008152602001836040015181526020016040518060200160405280600081525081525090508160000151600060110160008460400151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060120160008c81526020019081526020016000206000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908051906020019061099b929190611f36565b509050506000600f016000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a9080600181540180825580915050600190039060005260206000200160009091909190915055610a1a8a8360000151611a39565b8160000151858481518110610a3257610a31612949565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505050508080610a79906129fd565b91505061078c565b506040518061014001604052808760000151815260200160016007811115610aac57610aab61291a565b5b81526020018760800151151581526020018760a0015160ff16815260200187604001518152602001876060015181526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001876020015173ffffffffffffffffffffffffffffffffffffffff168152602001838152506000600d0160008981526020019081526020016000206000820151816000019080519060200190610b56929190611fbc565b5060208201518160010160006101000a81548160ff02191690836007811115610b8257610b8161291a565b5b021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160010160026101000a81548160ff021916908360ff1602179055506080820151816002015560a0820151816003015560c0820151816004019080519060200190610bf8929190612042565b5060e08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816007019080519060200190610ca59291906120a2565b5090505060006005018790806001815401808255809150506001900390600052602060002001600090919091909150556000600e0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002087908060018154018082558091505060019003906000526020600020016000909190919091505560006010016000876020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150556000610db682611b78565b90508060006002016000828254610dcd91906129a7565b925050819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308486610e2291906129a7565b6040518463ffffffff1660e01b8152600401610e4093929190612ba2565b6020604051808303816000875af1158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190612bee565b50877fff3c601046b9adeef393103e1de72cc0c98666bbefcd1a5184f0bc7ce619a453886000015189608001518a60400151338c602001518989898e604051610ed499989796959493929190612dbe565b60405180910390a26001600060050180549050610ef19190612e60565b9350505050949350505050565b610f0782611461565b3373ffffffffffffffffffffffffffffffffffffffff166000600d01600084815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610feb57336000600d01600084815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f0e37d99c000000000000000000000000000000000000000000000000000000008152600401610fe29291906128f1565b60405180910390fd5b426000600d016000848152602001908152602001600020600201541161103d576040517f8680d5de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42811161108157806040517f365e35340000000000000000000000000000000000000000000000000000000081526004016110789190612887565b60405180910390fd5b6000600d01600083815260200190815260200160002060030154426110a691906129a7565b8111156110ea57806040517fe4b2b6180000000000000000000000000000000000000000000000000000000081526004016110e19190612887565b60405180910390fd5b600080600d01600084815260200190815260200160002060070180548060200260200160405190810160405280929190818152602001828054801561118457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161113a575b505050505090506000805b82518110156113265760006111be868584815181106111b1576111b0612949565b5b60200260200101516116cc565b905080600001516000600c0160008685815181106111df576111de612949565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461123091906129a7565b9250508190555080600001518160200181815161124d91906129a7565b9150818152505080600001518361126491906129a7565b92508060006012016000888152602001908152602001600020600086858151811061129257611291612949565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908051906020019061130e929190611f36565b5090505050808061131e906129fd565b91505061118f565b50600061133282611b78565b9050806000600201600082825461134991906129a7565b92505081905550836000600d016000878152602001908152602001600020600201819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084866113bc91906129a7565b6040518463ffffffff1660e01b81526004016113da93929190612ba2565b6020604051808303816000875af11580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d9190612bee565b50847ff2ded5f77c6de574fac210979efbdd01ff3071d109e50651be4e05211f6e494385848460405161145293929190612e94565b60405180910390a25050505050565b600061146b611ba9565b9050600060078111156114815761148061291a565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff1660078111156114b9576114b861291a565b5b036114fb57816040517f018da6880000000000000000000000000000000000000000000000000000000081526004016114f29190612a54565b60405180910390fd5b6001600781111561150f5761150e61291a565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff1660078111156115475761154661291a565b5b1461158957816040517f7c6a6d700000000000000000000000000000000000000000000000000000000081526004016115809190612a54565b60405180910390fd5b5050565b6000611597611ba9565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461162690612efa565b80601f016020809104026020016040519081016040528092919081815260200182805461165290612efa565b801561169f5780601f106116745761010080835404028352916020019161169f565b820191906000526020600020905b81548152906001019060200180831161168257829003601f168201915b505050505081525050905060006116b98260000151611bae565b90506116c58482611bb8565b5050505050565b6116d461212c565b60006116de611ba9565b905080601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461176b90612efa565b80601f016020809104026020016040519081016040528092919081815260200182805461179790612efa565b80156117e45780601f106117b9576101008083540402835291602001916117e4565b820191906000526020600020905b8154815290600101906020018083116117c757829003601f168201915b50505050508152505091505092915050565b6000611800611ba9565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611898576001826040517f2eeb357100000000000000000000000000000000000000000000000000000000815260040161188f929190612f2b565b60405180910390fd5b5050565b6000806118a7611ba9565b90506000801b81601201600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154141591505092915050565b6000888a89888a604051602001611929959493929190612f54565b6040516020818303038152906040528051906020012060405160200161194f9190613026565b60405160208183030381529060405280519060200120905060006001828787876040516000815260200160405260405161198c949392919061304c565b6020604051602081039080840390855afa1580156119ae573d6000803e3d6000fd5b5050506020604051035190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a2c5780836040517f42d750dc000000000000000000000000000000000000000000000000000000008152600401611a239291906128f1565b60405180910390fd5b5050505050505050505050565b6000611a43611ba9565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054611ad290612efa565b80601f0160208091040260200160405190810160405280929190818152602001828054611afe90612efa565b8015611b4b5780601f10611b2057610100808354040283529160200191611b4b565b820191906000526020600020905b815481529060010190602001808311611b2e57829003601f168201915b50505050508152505090506000611b658260000151611bae565b9050611b718482611bd0565b5050505050565b600080611b83611ba9565b90506064816001015484611b979190613091565b611ba1919061311a565b915050919050565b600090565b6000819050919050565b611bc28282611be8565b611bcc8282611d23565b5050565b611bda8282611d8f565b611be48282611eca565b5050565b6000611bf2611ba9565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154821115611cc3578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401611cba929190612a6f565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611d179190612e60565b92505081905550505050565b6000611d2d611ba9565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254611d8391906129a7565b92505081905550505050565b6000611d99611ba9565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154821115611e6a578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154826040517fa4e3bead000000000000000000000000000000000000000000000000000000008152600401611e61929190612a6f565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254611ebe9190612e60565b92505081905550505050565b6000611ed4611ba9565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611f2a91906129a7565b92505081905550505050565b828054611f4290612efa565b90600052602060002090601f016020900481019282611f645760008555611fab565b82601f10611f7d57805160ff1916838001178555611fab565b82800160010185558215611fab579182015b82811115611faa578251825591602001919060010190611f8f565b5b509050611fb89190612157565b5090565b828054611fc890612efa565b90600052602060002090601f016020900481019282611fea5760008555612031565b82601f1061200357805160ff1916838001178555612031565b82800160010185558215612031579182015b82811115612030578251825591602001919060010190612015565b5b50905061203e9190612157565b5090565b828054828255906000526020600020908101928215612091579160200282015b82811115612090578251829080519060200190612080929190611fbc565b5091602001919060010190612062565b5b50905061209e9190612174565b5090565b82805482825590600052602060002090810192821561211b579160200282015b8281111561211a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906120c2565b5b5090506121289190612157565b5090565b6040518060800160405280600081526020016000815260200160008019168152602001606081525090565b5b80821115612170576000816000905550600101612158565b5090565b5b80821115612194576000818161218b9190612198565b50600101612175565b5090565b5080546121a490612efa565b6000825580601f106121b657506121d5565b601f0160209004906000526020600020908101906121d49190612157565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6121ff816121ec565b811461220a57600080fd5b50565b60008135905061221c816121f6565b92915050565b600060208284031215612238576122376121e2565b5b60006122468482850161220d565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61229d82612254565b810181811067ffffffffffffffff821117156122bc576122bb612265565b5b80604052505050565b60006122cf6121d8565b90506122db8282612294565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561230a57612309612265565b5b61231382612254565b9050602081019050919050565b82818337600083830152505050565b600061234261233d846122ef565b6122c5565b90508281526020810184848401111561235e5761235d6122ea565b5b612369848285612320565b509392505050565b600082601f830112612386576123856122e5565b5b813561239684826020860161232f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123ca8261239f565b9050919050565b6123da816123bf565b81146123e557600080fd5b50565b6000813590506123f7816123d1565b92915050565b6000819050919050565b612410816123fd565b811461241b57600080fd5b50565b60008135905061242d81612407565b92915050565b60008115159050919050565b61244881612433565b811461245357600080fd5b50565b6000813590506124658161243f565b92915050565b600060ff82169050919050565b6124818161246b565b811461248c57600080fd5b50565b60008135905061249e81612478565b92915050565b600060e082840312156124ba576124b961224f565b5b6124c460e06122c5565b9050600082013567ffffffffffffffff8111156124e4576124e36122e0565b5b6124f084828501612371565b6000830152506020612504848285016123e8565b60208301525060406125188482850161241e565b604083015250606061252c8482850161241e565b606083015250608061254084828501612456565b60808301525060a06125548482850161248f565b60a08301525060c06125688482850161241e565b60c08301525092915050565b600067ffffffffffffffff82111561258f5761258e612265565b5b602082029050602081019050919050565b600080fd5b600060c082840312156125bb576125ba61224f565b5b6125c560c06122c5565b905060006125d5848285016123e8565b60008301525060206125e98482850161241e565b60208301525060406125fd8482850161220d565b60408301525060606126118482850161248f565b60608301525060806126258482850161220d565b60808301525060a06126398482850161220d565b60a08301525092915050565b600061265861265384612574565b6122c5565b90508083825260208201905060c0840283018581111561267b5761267a6125a0565b5b835b818110156126a4578061269088826125a5565b84526020840193505060c08101905061267d565b5050509392505050565b600082601f8301126126c3576126c26122e5565b5b81356126d3848260208601612645565b91505092915050565b600067ffffffffffffffff8211156126f7576126f6612265565b5b602082029050602081019050919050565b600061271b612716846126dc565b6122c5565b9050808382526020820190506020840283018581111561273e5761273d6125a0565b5b835b8181101561278557803567ffffffffffffffff811115612763576127626122e5565b5b8086016127708982612371565b85526020850194505050602081019050612740565b5050509392505050565b600082601f8301126127a4576127a36122e5565b5b81356127b4848260208601612708565b91505092915050565b600080600080608085870312156127d7576127d66121e2565b5b60006127e58782880161220d565b945050602085013567ffffffffffffffff811115612806576128056121e7565b5b612812878288016124a4565b935050604085013567ffffffffffffffff811115612833576128326121e7565b5b61283f878288016126ae565b925050606085013567ffffffffffffffff8111156128605761285f6121e7565b5b61286c8782880161278f565b91505092959194509250565b612881816123fd565b82525050565b600060208201905061289c6000830184612878565b92915050565b600080604083850312156128b9576128b86121e2565b5b60006128c78582860161220d565b92505060206128d88582860161241e565b9150509250929050565b6128eb816123bf565b82525050565b600060408201905061290660008301856128e2565b61291360208301846128e2565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129b2826123fd565b91506129bd836123fd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156129f2576129f1612978565b5b828201905092915050565b6000612a08826123fd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a3a57612a39612978565b5b600182019050919050565b612a4e816121ec565b82525050565b6000602082019050612a696000830184612a45565b92915050565b6000604082019050612a846000830185612878565b612a916020830184612878565b9392505050565b612aa18161246b565b82525050565b6000602082019050612abc6000830184612a98565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612af7816123bf565b82525050565b6000612b098383612aee565b60208301905092915050565b6000602082019050919050565b6000612b2d82612ac2565b612b378185612acd565b9350612b4283612ade565b8060005b83811015612b73578151612b5a8882612afd565b9750612b6583612b15565b925050600181019050612b46565b5085935050505092915050565b60006020820190508181036000830152612b9a8184612b22565b905092915050565b6000606082019050612bb760008301866128e2565b612bc460208301856128e2565b612bd16040830184612878565b949350505050565b600081519050612be88161243f565b92915050565b600060208284031215612c0457612c036121e2565b5b6000612c1284828501612bd9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c55578082015181840152602081019050612c3a565b83811115612c64576000848401525b50505050565b6000612c7582612c1b565b612c7f8185612c26565b9350612c8f818560208601612c37565b612c9881612254565b840191505092915050565b612cac81612433565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000612cfa82612c1b565b612d048185612cde565b9350612d14818560208601612c37565b612d1d81612254565b840191505092915050565b6000612d348383612cef565b905092915050565b6000602082019050919050565b6000612d5482612cb2565b612d5e8185612cbd565b935083602082028501612d7085612cce565b8060005b85811015612dac5784840389528151612d8d8582612d28565b9450612d9883612d3c565b925060208a01995050600181019050612d74565b50829750879550505050505092915050565b6000610120820190508181036000830152612dd9818c612c6a565b9050612de8602083018b612ca3565b612df5604083018a612878565b612e0260608301896128e2565b612e0f60808301886128e2565b81810360a0830152612e218187612b22565b9050612e3060c0830186612878565b612e3d60e0830185612878565b818103610100830152612e508184612d49565b90509a9950505050505050505050565b6000612e6b826123fd565b9150612e76836123fd565b925082821015612e8957612e88612978565b5b828203905092915050565b6000606082019050612ea96000830186612878565b612eb66020830185612878565b612ec36040830184612878565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f1257607f821691505b602082108103612f2557612f24612ecb565b5b50919050565b6000604082019050612f406000830185612ca3565b612f4d60208301846128e2565b9392505050565b600060a0820190508181036000830152612f6e8188612c6a565b9050612f7d6020830187612a45565b612f8a6040830186612878565b612f976060830185612878565b612fa46080830184612878565b9695505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000612fef601c83612fae565b9150612ffa82612fb9565b601c82019050919050565b6000819050919050565b61302061301b826121ec565b613005565b82525050565b600061303182612fe2565b915061303d828461300f565b60208201915081905092915050565b60006080820190506130616000830187612a45565b61306e6020830186612a98565b61307b6040830185612a45565b6130886060830184612a45565b95945050505050565b600061309c826123fd565b91506130a7836123fd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156130e0576130df612978565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613125826123fd565b9150613130836123fd565b9250826131405761313f6130eb565b5b82820490509291505056fea2646970667358221220d653578b0c8f7e931ae09a13111573d46e2555c633cd638fe06095586406b8e264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burySarcophagus(bytes32)": {
        "details": "Extends the resurrection time into infinity so that that unwrap will never be successful.",
        "params": {
          "sarcoId": "the identifier of the sarcophagus"
        }
      },
      "createSarcophagus(bytes32,(string,address,uint256,uint256,bool,uint8,uint256),(address,uint256,bytes32,uint8,bytes32,bytes32)[],string[])": {
        "params": {
          "arweaveTxIds": "ordered pair of arweave tx ids: [tx storing sarcophagus payload,         tx storing the archaeologists' encrypted key shares]",
          "sarcoId": "the identifier of the sarcophagus",
          "sarcophagus": "an object that contains the sarcophagus data",
          "selectedArchaeologists": "the archaeologists the embalmer has selected to curse"
        },
        "returns": {
          "_0": "The index of the new sarcophagus"
        }
      },
      "rewrapSarcophagus(bytes32,uint256)": {
        "details": "The embalmer sets a new resurrection time sometime in the future.",
        "params": {
          "resurrectionTime": "the new resurrection time",
          "sarcoId": "the identifier of the sarcophagus"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burySarcophagus(bytes32)": {
        "notice": "Permanently closes the sarcophagus, giving it no opportunity to be resurrected. This may only be done before resurrection time has passed."
      },
      "createSarcophagus(bytes32,(string,address,uint256,uint256,bool,uint8,uint256),(address,uint256,bytes32,uint8,bytes32,bytes32)[],string[])": {
        "notice": "Embalmer creates the sarcophagus. The purpose of createSarcophagus is to:   - Lock up payment for the selected archaeologists (digging fees)   - Store the arweave TX IDs pertaining to the encrypted file payload   -    and the encrypted shards   - Verify the selected archaeologists have signed off on the         double hash of their key share,         arweave tx id storing key shares,         and maximumRewrapInterval to be used for lifetime of the sarcophagus   - Store the selected archaeologists' addresses, digging fees and   -     unencrypted double hashes   - Curse each participating archaeologist   - Create the sarcophagus object"
      },
      "rewrapSarcophagus(bytes32,uint256)": {
        "notice": "The embalmer may extend the life of the sarcophagus as long as the resurrection time has not passed yet."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1118,
        "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4106_storage"
      },
      {
        "astId": 1162,
        "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
        "label": "verifiedArchaeologists",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SarcophagusState)3448": {
        "encoding": "inplace",
        "label": "enum LibTypes.SarcophagusState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(ArchaeologistProfile)3499_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistProfile)3499_storage"
      },
      "t_mapping(t_address,t_struct(ArchaeologistStorage)3486_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistStorage)3486_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3486_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct LibTypes.ArchaeologistStorage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ArchaeologistStorage)3486_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Sarcophagus)3538_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibTypes.Sarcophagus)",
        "numberOfBytes": "32",
        "value": "t_struct(Sarcophagus)3538_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4106_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4030,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcoToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 4032,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "protocolFeeBasePercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4034,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "totalProtocolFees",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4036,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "gracePeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4038,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "expirationThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4041,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcophagusIdentifiers",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4044,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistProfileAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4049,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistProfiles",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(ArchaeologistProfile)3499_storage)"
          },
          {
            "astId": 4055,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistSarcoSuccesses",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
          },
          {
            "astId": 4060,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistSuccesses",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4065,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistAccusals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4070,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistCleanups",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4074,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistRewards",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4079,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcophagi",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_bytes32,t_struct(Sarcophagus)3538_storage)"
          },
          {
            "astId": 4084,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "embalmerSarcophagi",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4089,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistSarcophagi",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4094,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "recipientSarcophagi",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4098,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "doubleHashedShardArchaeologists",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 4105,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcophagusArchaeologists",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3486_storage))"
          }
        ],
        "numberOfBytes": "608"
      },
      "t_struct(ArchaeologistProfile)3499_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistProfile",
        "members": [
          {
            "astId": 3488,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3490,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3492,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "minimumDiggingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3494,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3496,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "freeBond",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3498,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "cursedBond",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ArchaeologistStorage)3486_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistStorage",
        "members": [
          {
            "astId": 3479,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "diggingFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3481,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "diggingFeesPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3483,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "unencryptedShardDoubleHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 3485,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "unencryptedShard",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Sarcophagus)3538_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.Sarcophagus",
        "members": [
          {
            "astId": 3516,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3519,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(SarcophagusState)3448"
          },
          {
            "astId": 3521,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "canBeTransferred",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3523,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "minShards",
            "offset": 2,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 3525,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "resurrectionTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3527,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3530,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "arweaveTxIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3532,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "embalmer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3534,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3537,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologists",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}