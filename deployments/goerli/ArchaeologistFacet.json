{
  "address": "0x2B3711105a9d34C707455e490349F5F062Ff004B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistAlreadyUnwrapped",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistNotOnSarcophagus",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistProfileExistsShouldBe",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursedBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughCursedBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughFreeBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "ResurrectionTimeInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusInactive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerNotArchaeologistOnSarcophagus",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        }
      ],
      "name": "TooEarlyToUnwrap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gracePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        }
      ],
      "name": "TooLateToUnwrap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unencryptedShard",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "doubleHashedShard",
          "type": "bytes32"
        }
      ],
      "name": "UnencryptedShardHashMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositedBond",
          "type": "uint256"
        }
      ],
      "name": "DepositFreeBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "arweaveTxId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldArchaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newArchaeologist",
          "type": "address"
        }
      ],
      "name": "FinalizeTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumDiggingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximumRewrapInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        }
      ],
      "name": "RegisterArchaeologist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "unencryptedShard",
          "type": "bytes"
        }
      ],
      "name": "UnwrapSarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumDiggingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximumRewrapInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        }
      ],
      "name": "UpdateArchaeologist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnBond",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFreeBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnReward",
          "type": "uint256"
        }
      ],
      "name": "WithdrawReward",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFreeBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "arweaveTxId",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibTypes.Signature",
          "name": "oldArchSignature",
          "type": "tuple"
        }
      ],
      "name": "finalizeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minimumDiggingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumRewrapInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        }
      ],
      "name": "registerArchaeologist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "unencryptedShard",
          "type": "bytes"
        }
      ],
      "name": "unwrapSarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minimumDiggingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumRewrapInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        }
      ],
      "name": "updateArchaeologist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFreeBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb54d9cbd32d9f9c89254a533bdf9bd80f91bd1fd37b73c75319c8c1824174df9",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x16C5D075eC8F7fcA5FD893023CCFb45a0f7CDe8a",
    "contractAddress": null,
    "transactionIndex": 28,
    "gasUsed": "2353852",
    "logsBloom": "0x
    "blockHash": "0x1d89bb49e9c93ea39bd28f5e68497ae7a11a2a74c55acaf47aa87e435d027462",
    "transactionHash": "0xb54d9cbd32d9f9c89254a533bdf9bd80f91bd1fd37b73c75319c8c1824174df9",
    "logs": [],
    "blockNumber": 7929207,
    "cumulativeGasUsed": "8199335",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "56130bd9f01ace07412cd56d3f8a0e58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistAlreadyUnwrapped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistNotOnSarcophagus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistProfileExistsShouldBe\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursedBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughCursedBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFreeBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"}],\"name\":\"ResurrectionTimeInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusInactive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerNotArchaeologistOnSarcophagus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"TooEarlyToUnwrap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"TooLateToUnwrap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"doubleHashedShard\",\"type\":\"bytes32\"}],\"name\":\"UnencryptedShardHashMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedBond\",\"type\":\"uint256\"}],\"name\":\"DepositFreeBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"arweaveTxId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldArchaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newArchaeologist\",\"type\":\"address\"}],\"name\":\"FinalizeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDiggingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"}],\"name\":\"RegisterArchaeologist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"}],\"name\":\"UnwrapSarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDiggingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"}],\"name\":\"UpdateArchaeologist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnBond\",\"type\":\"uint256\"}],\"name\":\"WithdrawFreeBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnReward\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFreeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"arweaveTxId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibTypes.Signature\",\"name\":\"oldArchSignature\",\"type\":\"tuple\"}],\"name\":\"finalizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minimumDiggingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"}],\"name\":\"registerArchaeologist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"}],\"name\":\"unwrapSarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minimumDiggingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"}],\"name\":\"updateArchaeologist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFreeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositFreeBond(uint256)\":{\"params\":{\"amount\":\"The amount to deposit\"}},\"finalizeTransfer(bytes32,string,(uint8,bytes32,bytes32))\":{\"params\":{\"arweaveTxId\":\"The id of the arweave transaction where the new shard\",\"oldArchSignature\":\"The signature of the old archaeologist was uploaded\",\"sarcoId\":\"The identifier of the sarcophagus\"}},\"registerArchaeologist(string,uint256,uint256,uint256)\":{\"params\":{\"freeBond\":\"How much bond the archaeologist wants to deposit during the register call (if any)\",\"maximumRewrapInterval\":\"The longest interval of time from a rewrap time the arch will accept for a resurrection\",\"minimumDiggingFee\":\"The archaeologist's minimum amount to accept for a digging fee\",\"peerId\":\"The libp2p identifier for the archaeologist\"}},\"unwrapSarcophagus(bytes32,bytes)\":{\"details\":\"Verifies that the unencrypted shard matches the hashedShard stored on chain and pays the archaeologist.\",\"params\":{\"sarcoId\":\"The identifier of the sarcophagus to unwrap\",\"unencryptedShard\":\"The archaeologist's corresponding unencrypted shard\"}},\"updateArchaeologist(string,uint256,uint256,uint256)\":{\"params\":{\"maximumRewrapInterval\":\"The longest interval of time from a rewrap time the arch will accept for a resurrection freeBond How much bond the archaeologist wants to deposit during the update call (if any)\",\"minimumDiggingFee\":\"The archaeologist's minimum amount to accept for a digging fee\",\"peerId\":\"The libp2p identifier for the archaeologist\"}},\"withdrawFreeBond(uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositFreeBond(uint256)\":{\"notice\":\"Deposits an archaeologist's free bond to the contract.\"},\"finalizeTransfer(bytes32,string,(uint8,bytes32,bytes32))\":{\"notice\":\"Finalizes a transfer of roles and responsibilities between two archaeologists. This is to be called by the new archaeologist.\"},\"registerArchaeologist(string,uint256,uint256,uint256)\":{\"notice\":\"Registers the archaeologist profile\"},\"unwrapSarcophagus(bytes32,bytes)\":{\"notice\":\"Unwraps the sarcophagus.\"},\"updateArchaeologist(string,uint256,uint256,uint256)\":{\"notice\":\"Updates the archaeologist profile\"},\"withdrawFreeBond(uint256)\":{\"notice\":\"Withdraws an archaeologist's free bond from the contract.\"},\"withdrawReward()\":{\"notice\":\"Withdraws all rewards from an archaeologist's reward pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ArchaeologistFacet.sol\":\"ArchaeologistFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/facets/ArchaeologistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibUtils} from \\\"../libraries/LibUtils.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\nimport {LibBonds} from \\\"../libraries/LibBonds.sol\\\";\\nimport {AppStorage} from \\\"../storage/LibAppStorage.sol\\\";\\n\\ncontract ArchaeologistFacet {\\n    AppStorage internal s;\\n\\n    event FinalizeTransfer(\\n        bytes32 sarcoId,\\n        string arweaveTxId,\\n        address oldArchaeologist,\\n        address newArchaeologist\\n    );\\n\\n    event UnwrapSarcophagus(bytes32 indexed sarcoId, bytes unencryptedShard);\\n\\n    event DepositFreeBond(address indexed archaeologist, uint256 depositedBond);\\n\\n    event RegisterArchaeologist(\\n        address indexed archaeologist,\\n        string peerId,\\n        uint256 minimumDiggingFee,\\n        uint256 maximumRewrapInterval,\\n        uint256 freeBond\\n    );\\n\\n    event UpdateArchaeologist(\\n        address indexed archaeologist,\\n        string peerId,\\n        uint256 minimumDiggingFee,\\n        uint256 maximumRewrapInterval,\\n        uint256 freeBond\\n    );\\n\\n    event WithdrawFreeBond(\\n        address indexed archaeologist,\\n        uint256 withdrawnBond\\n    );\\n\\n    event WithdrawReward(\\n        address indexed archaeologist,\\n        uint256 withdrawnReward\\n    );\\n\\n    /// @notice Registers the archaeologist profile\\n    /// @param peerId The libp2p identifier for the archaeologist\\n    /// @param minimumDiggingFee The archaeologist's minimum amount to accept for a digging fee\\n    /// @param maximumRewrapInterval The longest interval of time from a rewrap time the arch will accept\\n    /// for a resurrection\\n    /// @param freeBond How much bond the archaeologist wants to deposit during the register call (if any)\\n    function registerArchaeologist(\\n        string memory peerId,\\n        uint256 minimumDiggingFee,\\n        uint256 maximumRewrapInterval,\\n        uint256 freeBond\\n    ) external {\\n        // verify that the archaeologist does not already exist\\n        LibUtils.revertIfArchProfileExists(msg.sender);\\n\\n        // create a new archaeologist\\n        LibTypes.ArchaeologistProfile memory newArch = LibTypes\\n            .ArchaeologistProfile({\\n                exists: true,\\n                peerId: peerId,\\n                minimumDiggingFee: minimumDiggingFee,\\n                maximumRewrapInterval: maximumRewrapInterval,\\n                freeBond: freeBond,\\n                cursedBond: 0\\n            });\\n\\n        // transfer SARCO tokens from the archaeologist to this contract, to be\\n        // used as their free bond. can be 0.\\n        if (freeBond > 0) {\\n            s.sarcoToken.transferFrom(msg.sender, address(this), freeBond);\\n        }\\n\\n        // save the new archaeologist into relevant data structures\\n        s.archaeologistProfiles[msg.sender] = newArch;\\n        s.archaeologistProfileAddresses.push(msg.sender);\\n\\n        emit RegisterArchaeologist(\\n            msg.sender,\\n            newArch.peerId,\\n            newArch.minimumDiggingFee,\\n            newArch.maximumRewrapInterval,\\n            newArch.freeBond\\n        );\\n    }\\n\\n    /// @notice Updates the archaeologist profile\\n    /// @param peerId The libp2p identifier for the archaeologist\\n    /// @param minimumDiggingFee The archaeologist's minimum amount to accept for a digging fee\\n    /// @param maximumRewrapInterval The longest interval of time from a rewrap time the arch will accept\\n    /// for a resurrection\\n    /// freeBond How much bond the archaeologist wants to deposit during the update call (if any)\\n    function updateArchaeologist(\\n        string memory peerId,\\n        uint256 minimumDiggingFee,\\n        uint256 maximumRewrapInterval,\\n        uint256 freeBond\\n    ) external {\\n        // verify that the archaeologist exists\\n        LibUtils.revertIfArchProfileDoesNotExist(msg.sender);\\n\\n        // create a new archaeologist\\n        LibTypes.ArchaeologistProfile storage existingArch = s\\n            .archaeologistProfiles[msg.sender];\\n        existingArch.peerId = peerId;\\n        existingArch.minimumDiggingFee = minimumDiggingFee;\\n        existingArch.maximumRewrapInterval = maximumRewrapInterval;\\n\\n        // transfer SARCO tokens from the archaeologist to this contract, to be\\n        // used as their free bond. can be 0.\\n        if (freeBond > 0) {\\n            LibBonds.increaseFreeBond(msg.sender, freeBond);\\n            s.sarcoToken.transferFrom(msg.sender, address(this), freeBond);\\n        }\\n\\n        emit UpdateArchaeologist(\\n            msg.sender,\\n            existingArch.peerId,\\n            existingArch.minimumDiggingFee,\\n            existingArch.maximumRewrapInterval,\\n            existingArch.freeBond\\n        );\\n    }\\n\\n    /// @notice Deposits an archaeologist's free bond to the contract.\\n    /// @param amount The amount to deposit\\n    function depositFreeBond(uint256 amount) external {\\n        LibUtils.revertIfArchProfileDoesNotExist(msg.sender);\\n        // Increase the archaeologist's free bond in app storage\\n        LibBonds.increaseFreeBond(msg.sender, amount);\\n\\n        // Transfer the amount of sarcoToken from the archaeologist to the contract\\n        s.sarcoToken.transferFrom(msg.sender, address(this), amount);\\n        // Emit an event\\n        emit DepositFreeBond(msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraws an archaeologist's free bond from the contract.\\n    /// @param amount The amount to withdraw\\n    function withdrawFreeBond(uint256 amount) external {\\n        LibUtils.revertIfArchProfileDoesNotExist(msg.sender);\\n        // Decrease the archaeologist's free bond amount.\\n        // Reverts if there is not enough free bond on the contract.\\n        LibBonds.decreaseFreeBond(msg.sender, amount);\\n\\n        // Transfer the amount of sarcoToken to the archaeologist\\n        s.sarcoToken.transfer(msg.sender, amount);\\n\\n        // Emit an event\\n        emit WithdrawFreeBond(msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraws all rewards from an archaeologist's reward pool\\n    function withdrawReward() external {\\n        uint256 amountToWithdraw = s.archaeologistRewards[msg.sender];\\n        s.archaeologistRewards[msg.sender] = 0;\\n\\n        // Transfer the amount of sarcoToken to the archaeologist\\n        s.sarcoToken.transfer(msg.sender, amountToWithdraw);\\n\\n        emit WithdrawReward(msg.sender, amountToWithdraw);\\n    }\\n\\n    /// @notice Unwraps the sarcophagus.\\n    /// @dev Verifies that the unencrypted shard matches the hashedShard stored\\n    /// on chain and pays the archaeologist.\\n    /// @param sarcoId The identifier of the sarcophagus to unwrap\\n    /// @param unencryptedShard The archaeologist's corresponding unencrypted shard\\n    function unwrapSarcophagus(bytes32 sarcoId, bytes memory unencryptedShard)\\n        external\\n    {\\n        LibUtils.revertIfNotExistOrInactive(sarcoId);\\n\\n        // Confirm that the archaeologist has not already unwrapped by checking\\n        // if the unencryptedShard is empty\\n        LibUtils.archaeologistUnwrappedCheck(sarcoId, msg.sender);\\n\\n        // Confirm that the sender is an archaeologist on this sarcophagus\\n        if (!LibUtils.archaeologistExistsOnSarc(sarcoId, msg.sender)) {\\n            revert LibErrors.ArchaeologistNotOnSarcophagus(msg.sender);\\n        }\\n\\n        // Confirm that the resurrection time has passed and that the\\n        // grace period has not passed\\n        LibUtils.unwrapTime(s.sarcophagi[sarcoId].resurrectionTime);\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = LibUtils\\n            .getArchaeologist(sarcoId, msg.sender);\\n\\n        // Confirm that the double hash of the unencrypted shard matches the hashedShard in storage\\n        bytes32 doubleHash = keccak256(abi.encode(keccak256(unencryptedShard)));\\n        if (doubleHash != archaeologistData.unencryptedShardDoubleHash) {\\n            revert LibErrors.UnencryptedShardHashMismatch(\\n                unencryptedShard,\\n                archaeologistData.unencryptedShardDoubleHash\\n            );\\n        }\\n\\n        // Store the unencrypted shard in on the archaeologist object in the sarcophagus\\n        s\\n        .sarcophagusArchaeologists[sarcoId][msg.sender]\\n            .unencryptedShard = unencryptedShard;\\n\\n        // Free the archaeologist's cursed bond\\n        LibBonds.freeArchaeologist(sarcoId, msg.sender);\\n\\n        // Save the successful sarcophagus against the archaeologist\\n        s.archaeologistSarcoSuccesses[msg.sender][sarcoId] = true;\\n        s.archaeologistSuccesses[msg.sender].push(sarcoId);\\n\\n        // Transfer the digging fee to the archaeologist's reward pool\\n        s.archaeologistRewards[msg.sender] += archaeologistData.diggingFee;\\n\\n        // Emit an event\\n        emit UnwrapSarcophagus(sarcoId, unencryptedShard);\\n    }\\n\\n    /// @notice Finalizes a transfer of roles and responsibilities between two\\n    /// archaeologists. This is to be called by the new archaeologist.\\n    /// @param sarcoId The identifier of the sarcophagus\\n    /// @param arweaveTxId The id of the arweave transaction where the new shard\\n    /// @param oldArchSignature The signature of the old archaeologist\\n    /// was uploaded\\n    function finalizeTransfer(\\n        bytes32 sarcoId,\\n        string memory arweaveTxId,\\n        LibTypes.Signature memory oldArchSignature\\n    ) external {\\n        LibUtils.revertIfNotExistOrInactive(sarcoId);\\n\\n        // Confirm that the resurrection time is in the future\\n        LibUtils.resurrectionInFuture(s.sarcophagi[sarcoId].resurrectionTime);\\n\\n        // Get the address that signed the oldArchSignature\\n        address oldArchaeologist = LibUtils.recoverAddress(\\n            bytes(arweaveTxId),\\n            oldArchSignature.v,\\n            oldArchSignature.r,\\n            oldArchSignature.s\\n        );\\n\\n        // Confirm that the oldArchaeologist is an archaeologist on this\\n        // sarcophagus. Failure here means that someone besides an archaeologist\\n        // on the sarcophagus signed this message or that the data being signed\\n        // was not the provided arweaveTxId.\\n        if (!LibUtils.archaeologistExistsOnSarc(sarcoId, oldArchaeologist)) {\\n            revert LibErrors.SignerNotArchaeologistOnSarcophagus(\\n                sarcoId,\\n                oldArchaeologist\\n            );\\n        }\\n\\n        // Update the list of archaeologist's on the sarcophagus\\n        // For each archaeologist on the sarcophagus, find the old archaeologist\\n        // and replace it with the sender's address.\\n        for (\\n            uint256 i = 0;\\n            i < s.sarcophagi[sarcoId].archaeologists.length;\\n            i++\\n        ) {\\n            // Find the archaeologist that matches the old archaeologist's address\\n            if (s.sarcophagi[sarcoId].archaeologists[i] == oldArchaeologist) {\\n                s.sarcophagi[sarcoId].archaeologists[i] = msg.sender;\\n\\n                // Once found there is no need to continue\\n                break;\\n            }\\n        }\\n\\n        // Free the old archaeologist's bond\\n        LibBonds.freeArchaeologist(sarcoId, oldArchaeologist);\\n\\n        LibTypes.ArchaeologistStorage storage newArchData = s\\n            .sarcophagusArchaeologists[sarcoId][msg.sender];\\n\\n        LibTypes.ArchaeologistStorage storage oldArchData = s\\n            .sarcophagusArchaeologists[sarcoId][oldArchaeologist];\\n\\n        // Add the new archaeologist's address to the sarcohpagusArchaeologists mapping\\n        newArchData.diggingFee = oldArchData.diggingFee;\\n        newArchData.unencryptedShardDoubleHash = oldArchData\\n            .unencryptedShardDoubleHash;\\n        newArchData.unencryptedShard = \\\"\\\";\\n\\n        // Set the old archaeologist's data in the sarcophagusArchaeologists\\n        // mapping to their default values\\n        oldArchData.diggingFee = 0;\\n        oldArchData.unencryptedShardDoubleHash = 0;\\n        oldArchData.unencryptedShard = \\\"\\\";\\n\\n        // Add the arweave transaction id to arweaveTxIds on the sarcophagus\\n        s.sarcophagi[sarcoId].arweaveTxIds.push(arweaveTxId);\\n\\n        // Curse the new archaeologist's bond\\n        LibBonds.curseArchaeologist(sarcoId, msg.sender);\\n\\n        // Emit an event\\n        emit FinalizeTransfer(\\n            sarcoId,\\n            arweaveTxId,\\n            oldArchaeologist,\\n            msg.sender\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x57f9cfbde2770f454ff49ab5e26bfc42263b781a0d6c476238ee912877428705\",\"license\":\"Unlicense\"},\"contracts/libraries/LibBonds.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\nlibrary LibBonds {\\n    /// @notice Calculates the cursed bond that an archaeologist needs to lock\\n    /// up\\n    /// @dev The cursed bond amount is the digging fee\\n    /// @param diggingFee The digging fee of the sarcophagus\\n    /// @return The amount of cursed bond\\n    function calculateCursedBond(uint256 diggingFee)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // TODO: We dont need this function unless we implement a better algorithm\\n        // for calculating the cursed bond\\n        // Anywhere this method is used should be replaced with just the digging fee\\n        return diggingFee;\\n    }\\n\\n    /// @notice Decreases the amount stored in the freeBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's free bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function decreaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current free bond\\n        if (amount > s.archaeologistProfiles[archaeologist].freeBond) {\\n            revert LibErrors.NotEnoughFreeBond(\\n                s.archaeologistProfiles[archaeologist].freeBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the freeBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function increaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond += amount;\\n    }\\n\\n    /// @notice Decreases the amount stored in the cursedBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's cursed bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function decreaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current cursed bond\\n        if (amount > s.archaeologistProfiles[archaeologist].cursedBond) {\\n            revert LibErrors.NotEnoughCursedBond(\\n                s.archaeologistProfiles[archaeologist].cursedBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the cursedBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function increaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond += amount;\\n    }\\n\\n    /// @notice Locks up the archaeologist's bond, decreasing the\\n    /// archaeologist's free bond by an amount and increasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to lock up\\n    function lockUpBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the free bond amount\\n        decreaseFreeBond(archaeologist, amount);\\n\\n        // Increase the cursed bond amount\\n        increaseCursedBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Unlocks the archaeologist's bond, increasing the\\n    /// archaeologist's free bond by an amount and decreasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to unlock\\n    function unlockBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the cursed bond amount\\n        decreaseCursedBond(archaeologist, amount);\\n\\n        // Increase the free bond amount\\n        increaseFreeBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and curses them (locks\\n    /// up the free bond).\\n    /// @param sarcoId the identifier of the sarcophagus to bond the archaeologist with\\n    /// @param archaeologist the address of the archaeologist to curse\\n    function curseArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee\\n        );\\n\\n        // Lock up the archaeologist's bond by the cursed bond amount\\n        lockUpBond(archaeologist, cursedBondAmount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and frees them\\n    /// (unlocks the cursed bond).\\n    /// @param sarcoId the identifier of the sarcophagus to free the archaologist from\\n    /// @param archaeologist the address of the archaeologist to free\\n    function freeArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee\\n        );\\n\\n        // Free up the archaeologist's locked bond\\n        unlockBond(archaeologist, cursedBondAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x18f939f2a764ed05d12fd6ffa9e511718ab1a723d3bfda2d0e2a3cc0c1889084\",\"license\":\"Unlicense\"},\"contracts/libraries/LibErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of Errors\\n * @notice This library defines all of the Errors that the Sarcophagus system\\n * uses.\\n */\\nlibrary LibErrors {\\n    error AccuseNotEnoughProof(uint256 shardsProvided, uint8 minShards);\\n\\n    error AccuseIncorrectProof();\\n\\n    error ArchaeologistAlreadyUnwrapped(address archaeologist);\\n\\n    error ArchaeologistListNotUnique(address[] archaeologists);\\n\\n    error ArchaeologistNotOnSarcophagus(address archaeologist);\\n\\n    error ArchaeologistProfileExistsShouldBe(bool exists, address archaeologist);\\n\\n    error ArweaveTxIdsInvalid();\\n\\n    error DiggingFeeTooLow(uint256 diggingFee, address archaeologist);\\n\\n    error MinShardsGreaterThanArchaeologists(uint8 minShards);\\n\\n    error MinShardsZero();\\n\\n    error MaxResurrectionIntervalIsZero();\\n\\n    error NewResurrectionTimeInPast(uint256 newResurrectionTime);\\n\\n    error NewResurrectionTimeTooLarge(uint256 newResurrectionTime);\\n\\n    error NoArchaeologistsProvided();\\n\\n    error NotEnoughCursedBond(uint256 cursedBond, uint256 amount);\\n\\n    error NotEnoughFreeBond(uint256 freeBond, uint256 amount);\\n\\n    error NotEnoughReward(uint256 reward, uint256 amount);\\n\\n    error ResurrectionTimeInPast(uint256 resurrectionTime);\\n\\n    error ResurrectionTimeTooFarInFuture(uint256 resurrectionTime, uint256 sarcophagusMaximumRewrapInterval);\\n\\n    error SarcophagusAlreadyExists(bytes32 sarcoId);\\n\\n    error SarcophagusDoesNotExist(bytes32 sarcoId);\\n\\n    error SarcophagusInactive(bytes32 sarcoId);\\n\\n    error SenderNotEmbalmer(address sender, address embalmer);\\n\\n    error InvalidSignature(\\n    // address recovered from signature via ecrecover\\n        address recoveredAddress,\\n    // address we expected to have signed the data\\n        address expectedAddress\\n    );\\n\\n    error SignerNotArchaeologistOnSarcophagus(bytes32 sarcoId, address signer);\\n\\n    // Used when an attempt is made to accuse or rewrap after the resurrection time has already passed (so it's actually time to unwrap it)\\n    error SarcophagusIsUnwrappable();\\n\\n    // Used when an attempt is made to clean a sarcophagus before the grace period after the resurrection time has passed\\n    error SarcophagusNotCleanable();\\n\\n    error TooEarlyToUnwrap(uint256 resurrectionTime, uint256 currentTime);\\n\\n    error TooLateToUnwrap(\\n        uint256 resurrectionTime,\\n        uint256 gracePeriod,\\n        uint256 currentTime\\n    );\\n\\n    error UnencryptedShardHashMismatch(\\n        bytes unencryptedShard,\\n        bytes32 doubleHashedShard\\n    );\\n\\n    error SarcophagusParametersExpired(uint256 timestamp);\\n}\\n\\n\",\"keccak256\":\"0x3ebd897b208b998b087c16b72bfd527e9f45ea7dadc8c83ac8de50ce65b6c42c\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of defined structs\\n * @notice This library defines the various data models that the Sarcophagus\\n * system uses\\n */\\nlibrary LibTypes {\\n    // DoesNotExist must come first on the list to be the default value\\n    enum SarcophagusState {\\n        DoesNotExist,\\n        Active,\\n        Resurrecting,\\n        Resurrected,\\n        Buried,\\n        Cleaned,\\n        Accused,\\n        Failed\\n    }\\n\\n    // A struct of just the signature. This is used primarily by the\\n    // finalizeSarcophagus function for the arweave archaeologist. Note that,\\n    // unlike the regular archaeologists, the sarcophagus already stores the\\n    // single arweave archaeologist's address so there is no need to pass in the\\n    // address to the finalizeSarcophagus function.\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // Signature struct created to make passing in the signature argmuments into\\n    // finalizedSarcophagus easier and to avoid the \\\"stack too deep\\\" error.\\n    // Also attaching arachaeologist addresses so we can tie the signature back\\n    // to the address in finalizeSarcophagus.\\n    struct SignatureWithAccount {\\n        address account;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // SelectedArchaeologistData is the struct that is passed into the\\n    // initializeSarcophagus function. Even though we don't need each storage\\n    // fee of the archaeologist, the storage fee is included in the struct to\\n    // reduce the stack size within the function, preventing the \\\"stack too\\n    // deep\\\" error.\\n    struct SelectedArchaeologistData {\\n        address archAddress;\\n        uint256 diggingFee;\\n        bytes32 unencryptedShardDoubleHash;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // ArchaeologistStorage is the struct that is stored in AppStorage under the\\n    // sarcophagusArchaeologists mapping.\\n    //\\n    // The archaeologist address is left out since each archaeologist's address\\n    // is stored on the sarcophagus object as an array.\\n    //\\n    // The storage fee is left out because we only need to store the storage fee\\n    // of the archaeologist uploading to arweave, which will be stored directly\\n    // on the sarcophagus.\\n    struct ArchaeologistStorage {\\n        uint256 diggingFee;\\n        uint256 diggingFeesPaid;\\n        bytes32 unencryptedShardDoubleHash;\\n        bytes unencryptedShard;\\n    }\\n\\n    // ArchaeologistProfile is used to store archaeologist profile data\\n    struct ArchaeologistProfile {\\n        bool exists;\\n        string peerId;\\n        uint256 minimumDiggingFee;\\n        uint256 maximumRewrapInterval;\\n        uint256 freeBond;\\n        uint256 cursedBond;\\n    }\\n\\n    struct SarcophagusMemory {\\n        string name;\\n        address recipient;\\n        uint256 resurrectionTime;\\n        uint256 maximumRewrapInterval;\\n        bool canBeTransferred;\\n        uint8 minShards;\\n        uint256 timestamp;\\n    }\\n\\n    // The ArchaeologistStorage struct could be contained in this Sarcophagus\\n    // struct as a mapping, but it was put into it's own mapping\\n    // (sarcophagusArchaeologists) directly in AppStorage. Instead the\\n    // sarcophagus stores the addresses of each archaeologist added to it. This\\n    // was done to simplify the creation of a sarcophagus object in\\n    // initializeSarcophagus.\\n    struct Sarcophagus {\\n        string name;\\n        SarcophagusState state;\\n        bool canBeTransferred;\\n        uint8 minShards;\\n        uint256 resurrectionTime;\\n        uint256 maximumRewrapInterval;\\n        string[] arweaveTxIds;\\n        address embalmer;\\n        address recipientAddress;\\n        address[] archaeologists;\\n    }\\n\\n    struct MetadataAttributes {\\n        string sarcophagusName;\\n        uint256 diggingFee;\\n        uint256 resurrectionTime;\\n        uint256 diggingFeesPaid;\\n    }\\n\\n    // Only used in the ViewStateFacet to return statistics data.\\n    // Contains a list of sarcoIds for each category. We could simply return the counts of the\\n    // arrays but we are already storing the lists of sarcoIds so we may as well use them.\\n    struct ArchaeologistStatistics {\\n        uint256 successes;\\n        uint256 accusals;\\n        uint256 cleanups;\\n    }\\n}\\n\",\"keccak256\":\"0x1ebf49a2c2223309fc8975dfac35ffd03daf5746458d8e93b33fe86fad73ae1f\",\"license\":\"Unlicense\"},\"contracts/libraries/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\n/**\\n * @title Utility functions used within the Sarcophagus system\\n * @notice This library implements various functions that are used throughout\\n * Sarcophagus, mainly to DRY up the codebase\\n * @dev these functions are all stateless, public, pure/view\\n */\\nlibrary LibUtils {\\n    /**\\n     * @notice Reverts if the public key length is not exactly 64 bytes long\\n     * @param publicKey the key to check length of\\n     */\\n    function publicKeyLength(bytes memory publicKey) public pure {\\n        require(publicKey.length == 64, \\\"public key must be 64 bytes\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if the hash of singleHash does not equal doubleHash\\n     * @param doubleHash the hash to compare hash of singleHash to\\n     * @param singleHash the value to hash and compare against doubleHash\\n     */\\n    function hashCheck(bytes32 doubleHash, bytes memory singleHash)\\n        public\\n        pure\\n    {\\n        require(doubleHash == keccak256(singleHash), \\\"hashes do not match\\\");\\n    }\\n\\n    function archaeologistUnwrappedCheck(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n    {\\n        if (\\n            getArchaeologist(sarcoId, archaeologist).unencryptedShard.length > 0\\n        ) {\\n            revert LibErrors.ArchaeologistAlreadyUnwrapped(archaeologist);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reverts with `SarcophagusDoesNotExist` if the Sarcophagus does not exist,\\n     * or with `SarcophagusInactive` if the Sarcophagus exists but is not active.\\n     * @param sarcoId Identifier of the Sarcophagus\\n     */\\n    function revertIfNotExistOrInactive(bytes32 sarcoId) internal view {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (\\n            s.sarcophagi[sarcoId].state ==\\n            LibTypes.SarcophagusState.DoesNotExist\\n        ) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Active) {\\n            revert LibErrors.SarcophagusInactive(sarcoId);\\n        }\\n    }\\n\\n    /**\\n     * @notice The archaeologist needs to sign off on two pieces of data\\n     * to guarantee their unrwap will be successful\\n     *\\n     * @param unencryptedShardDoubleHash the double hash of the unencrypted shard\\n     * @param arweaveTxId the arweave TX ID that contains the archs encrypted shard\\n     * @param agreedMaximumRewrapInterval that the archaeologist has agreed to for the sarcophagus\\n     * @param timestamp that the archaeologist has agreed to for the sarcophagus\\n     * @param diggingFee that the archaeologist has agreed to for the sarcophagus\\n     * @param v signature element\\n     * @param r signature element\\n     * @param s signature element\\n     * @param account address to confirm signature of data came from\\n     */\\n    function verifyArchaeologistSignature(\\n        bytes32 unencryptedShardDoubleHash,\\n        string memory arweaveTxId,\\n        uint256 agreedMaximumRewrapInterval,\\n        uint256 timestamp,\\n        uint256 diggingFee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address account\\n    ) internal pure {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(arweaveTxId, unencryptedShardDoubleHash, agreedMaximumRewrapInterval, diggingFee, timestamp))\\n            )\\n        );\\n\\n        // Generate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        address recoveredAddress = ecrecover(messageHash, v, r, s);\\n\\n        if (recoveredAddress != account) {\\n            revert LibErrors.InvalidSignature(recoveredAddress, account);\\n        }\\n    }\\n\\n    /// @notice Returns the address that signed some data given the data and the\\n    /// signature.\\n    /// @param data the data to verify\\n    /// @param v signature element\\n    /// @param r signature element\\n    /// @param s signature element\\n    /// @return the address that signed the data\\n    function recoverAddress(\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        // It's highly recommended that a hash be passed into ecrecover\\n        address account = ecrecover(messageHash, v, r, s);\\n\\n        return account;\\n    }\\n\\n    /**\\n     * @notice Reverts if the given resurrection time is not in the future\\n     * @param resurrectionTime the time to check against block.timestamp\\n     */\\n    function resurrectionInFuture(uint256 resurrectionTime) internal view {\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(resurrectionTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reverts if the current block timestamp is not within the resurrection window\\n     * (window = [resurrection time, resurrection time + grace period] inclusive)\\n     * @param resurrectionTime the resurrection time of the sarcophagus\\n     * (absolute, i.e. a date time stamp)\\n     */\\n    function unwrapTime(uint256 resurrectionTime) internal view {\\n        // revert if too early\\n        if (resurrectionTime > block.timestamp) {\\n            revert LibErrors.TooEarlyToUnwrap(\\n                resurrectionTime,\\n                block.timestamp\\n            );\\n        }\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // revert if too late\\n        if (resurrectionTime + s.gracePeriod < block.timestamp) {\\n            revert LibErrors.TooLateToUnwrap(\\n                resurrectionTime,\\n                s.gracePeriod,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if the archaeologist exists on the sarcophagus.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The boolean true if the archaeologist exists on the sarcophagus\\n    function archaeologistExistsOnSarc(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // If the doubleHashedShard on an archaeologist is 0 (which is its default value),\\n        // then the archaeologist doesn't exist on the sarcophagus\\n        return\\n            s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist]\\n                .unencryptedShardDoubleHash != 0;\\n    }\\n\\n    /// @notice Checks if an archaeologist profile exists and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check existence of\\n    function revertIfArchProfileExists(address archaeologist)\\n        internal\\n        view\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(\\n                false,\\n                archaeologist\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if an archaeologist profile doesn't exist and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check lack of existence of\\n    function revertIfArchProfileDoesNotExist(address archaeologist)\\n        internal\\n        view\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (!s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(\\n                true,\\n                archaeologist\\n            );\\n        }\\n    }\\n\\n    /// @notice Gets an archaeologist given the sarcophagus identifier and the\\n    /// archaeologist's address.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The archaeologist\\n    function getArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (LibTypes.ArchaeologistStorage memory)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return s.sarcophagusArchaeologists[sarcoId][archaeologist];\\n    }\\n\\n    /// @notice Calculates the protocol fees to be taken from the embalmer.\\n    /// @return The protocol fees amount\\n    function calculateProtocolFees(uint256 totalDiggingFees) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return (totalDiggingFees * s.protocolFeeBasePercentage) / 100;\\n    }\\n}\\n\",\"keccak256\":\"0x847c25a01b73ab54cd375de984d05b755123438174ca298d2fb9970cedeb7d30\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n// Global storage for the app. Can be accessed in facets and in libraries\\nstruct AppStorage {\\n    IERC20 sarcoToken;\\n    // The percentage (i.e. 1 = 1%) of a sarcophagus' total digging fees that will be collected on\\n    // createSarcophagus and rewrapSarcophagus, paid by the embalmer\\n    uint256 protocolFeeBasePercentage;\\n    // The amount of protocol fees currently stored on the contract\\n    uint256 totalProtocolFees;\\n    // grace period an archaeologist is given to resurrect a sarcophagus after the resurrection time\\n    uint256 gracePeriod;\\n    // threshold after which archaeologist signatures on sarcophagus params expire and the sarcophagus must be renegotiated\\n    uint256 expirationThreshold;\\n    // sarcophagi\\n    bytes32[] sarcophagusIdentifiers;\\n    // archaeologist profiles\\n    address[] archaeologistProfileAddresses;\\n    mapping(address => LibTypes.ArchaeologistProfile) archaeologistProfiles;\\n\\n    // archaeologistSarcoSuccesses is needed by the clean function\\n    // to lookup whether an archaeologist has completed an unwrapping\\n    mapping(address => mapping(bytes32 => bool)) archaeologistSarcoSuccesses;\\n\\n    // Archaeologist reputation statistics\\n    mapping(address => bytes32[]) archaeologistSuccesses;\\n    mapping(address => bytes32[]) archaeologistAccusals;\\n    mapping(address => bytes32[]) archaeologistCleanups;\\n\\n    // Track how much archaeologists have made. To be credited and debited\\n    // as archaeologists fulfill their duties and withdraw their rewards\\n    mapping(address => uint256) archaeologistRewards;\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n    // sarcophagus ownerships\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n    // Mapping of unencrypted shard double hashes to archaeologists who are\\n    // responsible for them. Needed to optimise Accuse algo - unencrypted shard is\\n    // double hashed and used as a constant O(1) lookup here\\n    mapping(bytes32 => address) doubleHashedShardArchaeologists;\\n    // A mapping used to store an archaeologist's data on a sarcophagus.\\n    // Digging fees, storage fees, and the hashed shards of the\\n    // archaeologists all need to be stored per sarcophagus. This mapping of a\\n    // mapping stores the archaeologist's data we need per sarcophagus.\\n    // Example usage (to retrieve the digging fees an archaeologist may claim on some sarcophagus):\\n    //   LibTypes.ArchaeologistStorage bondedArchaeologist = sarcophagusArchaeologists[sarcoId][archAddress];\\n    //   uint256 diggingFees = bondedArchaeologist.diggingFees;\\n    mapping(bytes32 => mapping(address => LibTypes.ArchaeologistStorage)) sarcophagusArchaeologists;\\n}\\n\\nlibrary LibAppStorage {\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        // Set the position of our struct in contract storage\\n        // Since AppStorage s is the first and only state variable declared in\\n        // facets its position in contract storage is 0\\n        assembly {\\n            s.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8344e9d5a7574c1602c4f854e19aa58c255311a057346307663fa56e8b6f5f08\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506129ac806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806369afe1c51161005b57806369afe1c5146100d65780636a5ac74c146100f25780638d58642a1461010e578063c885bc581461012a5761007d565b80630c4c35f014610082578063364e08011461009e578063449f11a6146100ba575b600080fd5b61009c60048036038101906100979190611ef3565b610134565b005b6100b860048036038101906100b39190611f76565b6102d0565b005b6100d460048036038101906100cf9190611ef3565b6103d7565b005b6100f060048036038101906100eb919061207b565b610640565b005b61010c60048036038101906101079190611f76565b6109e8565b005b6101286004803603810190610123919061218b565b610af1565b005b610132610de4565b005b61013d33610f65565b60008060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508481600101908051906020019061019a929190611b89565b508381600201819055508281600301819055506000821115610266576101c0338361100b565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161022193929190612237565b6020604051808303816000875af1158015610240573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026491906122a6565b505b3373ffffffffffffffffffffffffffffffffffffffff167f4df9330dcb4af4b522d063da8a473d6711cdd390feef75f059a663a76c270139826001018360020154846003015485600401546040516102c194939291906123d9565b60405180910390a25050505050565b6102d933610f65565b6102e33382611077565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610342929190612425565b6020604051808303816000875af1158015610361573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038591906122a6565b503373ffffffffffffffffffffffffffffffffffffffff167fd91b1e491a880123721b161dbbf8249668b0c546077d7ba4d0016441ca9d8f45826040516103cc919061244e565b60405180910390a250565b6103e0336111b2565b60006040518060c001604052806001151581526020018681526020018581526020018481526020018381526020016000815250905060008211156104c4576000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161047f93929190612237565b6020604051808303816000875af115801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c291906122a6565b505b80600060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001019080519060200190610543929190611b89565b5060408201518160020155606082015181600301556080820151816004015560a082015181600501559050506000600601339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fec728a18db560dc21e59ae36132eb1e1c1b00d056a88ee755e0940e471ad591e826020015183604001518460600151856080015160405161063194939291906124e0565b60405180910390a25050505050565b61064983611259565b61066b6000600d01600085815260200190815260200160002060020154611385565b6000610685838360000151846020015185604001516113cc565b9050610691848261147e565b6106d45783816040517fd93ccb200000000000000000000000000000000000000000000000000000000081526004016106cb92919061253b565b60405180910390fd5b60005b6000600d0160008681526020019081526020016000206007018054905081101561080f578173ffffffffffffffffffffffffffffffffffffffff166000600d016000878152602001908152602001600020600701828154811061073d5761073c612564565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107fc57336000600d01600087815260200190815260200160002060070182815481106107af576107ae612564565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061080f565b8080610807906125c2565b9150506106d7565b5061081a84826114f0565b600080601201600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080601201600087815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015482600001819055508060020154826002018190555060405180602001604052806000815250826003019080519060200190610907929190611c0f565b50600081600001819055506000801b816002018190555060405180602001604052806000815250816003019080519060200190610945929190611c0f565b506000600d01600087815260200190815260200160002060040185908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610998929190611b89565b506109a3863361162f565b7fa11d6c318d830f7ace4ca677c932075082bc61f4356facae5a2a0e1c2a97454c868685336040516109d8949392919061260a565b60405180910390a1505050505050565b6109f133610f65565b6109fb338261100b565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610a5c93929190612237565b6020604051808303816000875af1158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f91906122a6565b503373ffffffffffffffffffffffffffffffffffffffff167ff882a0847c57aefe6f6c7df2098dd0afd122eb0e886199e223651b8e45fda82382604051610ae6919061244e565b60405180910390a250565b610afa82611259565b610b04823361176e565b610b0e823361147e565b610b4f57336040517f82881f03000000000000000000000000000000000000000000000000000000008152600401610b469190612656565b60405180910390fd5b610b716000600d016000848152602001908152602001600020600201546117c6565b6000610b7d8333611879565b905060008280519060200120604051602001610b999190612671565b60405160208183030381529060405280519060200120905081604001518114610bff578282604001516040517fd6091bc2000000000000000000000000000000000000000000000000000000008152600401610bf69291906126e1565b60405180910390fd5b826000601201600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019080519060200190610c69929190611c95565b50610c7484336114f0565b6001600060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff021916908315150217905550600060090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084908060018154018082558091505060019003906000526020600020016000909190919091505581600001516000600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d9f9190612711565b92505081905550837f2a1e0100e3bcf67538d8408f2592de3731b8b40f8c6d7dd813e355c7b73848d884604051610dd69190612767565b60405180910390a250505050565b600080600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ed0929190612425565b6020604051808303816000875af1158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1391906122a6565b503373ffffffffffffffffffffffffffffffffffffffff167fbc84835063c693975166f00cffb19f01a94c2db55b1bf259238c5da3594e506682604051610f5a919061244e565b60405180910390a250565b6000610f6f6119a3565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611007576001826040517f2eeb3571000000000000000000000000000000000000000000000000000000008152600401610ffe929190612798565b60405180910390fd5b5050565b60006110156119a3565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600082825461106b9190612711565b92505081905550505050565b60006110816119a3565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154821115611152578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154826040517fa4e3bead0000000000000000000000000000000000000000000000000000000081526004016111499291906127c1565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008282546111a691906127ea565b92505081905550505050565b60006111bc6119a3565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611255576000826040517f2eeb357100000000000000000000000000000000000000000000000000000000815260040161124c929190612798565b60405180910390fd5b5050565b60006112636119a3565b9050600060078111156112795761127861281e565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff1660078111156112b1576112b061281e565b5b036112f357816040517f018da6880000000000000000000000000000000000000000000000000000000081526004016112ea9190612671565b60405180910390fd5b600160078111156113075761130661281e565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff16600781111561133f5761133e61281e565b5b1461138157816040517f7c6a6d700000000000000000000000000000000000000000000000000000000081526004016113789190612671565b60405180910390fd5b5050565b4281116113c957806040517f357efa270000000000000000000000000000000000000000000000000000000081526004016113c0919061244e565b60405180910390fd5b50565b600080856040516020016113e09190612767565b6040516020818303038152906040528051906020012060405160200161140691906128c5565b60405160208183030381529060405280519060200120905060006001828787876040516000815260200160405260405161144394939291906128fa565b6020604051602081039080840390855afa158015611465573d6000803e3d6000fd5b5050506020604051035190508092505050949350505050565b6000806114896119a3565b90506000801b81601201600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154141591505092915050565b60006114fa6119a3565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461158990612302565b80601f01602080910402602001604051908101604052809291908181526020018280546115b590612302565b80156116025780601f106115d757610100808354040283529160200191611602565b820191906000526020600020905b8154815290600101906020018083116115e557829003601f168201915b5050505050815250509050600061161c82600001516119a8565b905061162884826119b2565b5050505050565b60006116396119a3565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180546116c890612302565b80601f01602080910402602001604051908101604052809291908181526020018280546116f490612302565b80156117415780601f1061171657610100808354040283529160200191611741565b820191906000526020600020905b81548152906001019060200180831161172457829003601f168201915b5050505050815250509050600061175b82600001516119a8565b905061176784826119ca565b5050505050565b600061177a8383611879565b606001515111156117c257806040517f1b933fa00000000000000000000000000000000000000000000000000000000081526004016117b99190612656565b60405180910390fd5b5050565b4281111561180d5780426040517f0674c5900000000000000000000000000000000000000000000000000000000081526004016118049291906127c1565b60405180910390fd5b60006118176119a3565b90504281600301548361182a9190612711565b101561187557818160030154426040517f4fd4cfc500000000000000000000000000000000000000000000000000000000815260040161186c9392919061293f565b60405180910390fd5b5050565b611881611d1b565b600061188b6119a3565b905080601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461191890612302565b80601f016020809104026020016040519081016040528092919081815260200182805461194490612302565b80156119915780601f1061196657610100808354040283529160200191611991565b820191906000526020600020905b81548152906001019060200180831161197457829003601f168201915b50505050508152505091505092915050565b600090565b6000819050919050565b6119bc82826119e2565b6119c6828261100b565b5050565b6119d48282611077565b6119de8282611b1d565b5050565b60006119ec6119a3565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154821115611abd578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401611ab49291906127c1565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611b1191906127ea565b92505081905550505050565b6000611b276119a3565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611b7d9190612711565b92505081905550505050565b828054611b9590612302565b90600052602060002090601f016020900481019282611bb75760008555611bfe565b82601f10611bd057805160ff1916838001178555611bfe565b82800160010185558215611bfe579182015b82811115611bfd578251825591602001919060010190611be2565b5b509050611c0b9190611d46565b5090565b828054611c1b90612302565b90600052602060002090601f016020900481019282611c3d5760008555611c84565b82601f10611c5657805160ff1916838001178555611c84565b82800160010185558215611c84579182015b82811115611c83578251825591602001919060010190611c68565b5b509050611c919190611d46565b5090565b828054611ca190612302565b90600052602060002090601f016020900481019282611cc35760008555611d0a565b82601f10611cdc57805160ff1916838001178555611d0a565b82800160010185558215611d0a579182015b82811115611d09578251825591602001919060010190611cee565b5b509050611d179190611d46565b5090565b6040518060800160405280600081526020016000815260200160008019168152602001606081525090565b5b80821115611d5f576000816000905550600101611d47565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611dca82611d81565b810181811067ffffffffffffffff82111715611de957611de8611d92565b5b80604052505050565b6000611dfc611d63565b9050611e088282611dc1565b919050565b600067ffffffffffffffff821115611e2857611e27611d92565b5b611e3182611d81565b9050602081019050919050565b82818337600083830152505050565b6000611e60611e5b84611e0d565b611df2565b905082815260208101848484011115611e7c57611e7b611d7c565b5b611e87848285611e3e565b509392505050565b600082601f830112611ea457611ea3611d77565b5b8135611eb4848260208601611e4d565b91505092915050565b6000819050919050565b611ed081611ebd565b8114611edb57600080fd5b50565b600081359050611eed81611ec7565b92915050565b60008060008060808587031215611f0d57611f0c611d6d565b5b600085013567ffffffffffffffff811115611f2b57611f2a611d72565b5b611f3787828801611e8f565b9450506020611f4887828801611ede565b9350506040611f5987828801611ede565b9250506060611f6a87828801611ede565b91505092959194509250565b600060208284031215611f8c57611f8b611d6d565b5b6000611f9a84828501611ede565b91505092915050565b6000819050919050565b611fb681611fa3565b8114611fc157600080fd5b50565b600081359050611fd381611fad565b92915050565b600080fd5b600060ff82169050919050565b611ff481611fde565b8114611fff57600080fd5b50565b60008135905061201181611feb565b92915050565b60006060828403121561202d5761202c611fd9565b5b6120376060611df2565b9050600061204784828501612002565b600083015250602061205b84828501611fc4565b602083015250604061206f84828501611fc4565b60408301525092915050565b600080600060a0848603121561209457612093611d6d565b5b60006120a286828701611fc4565b935050602084013567ffffffffffffffff8111156120c3576120c2611d72565b5b6120cf86828701611e8f565b92505060406120e086828701612017565b9150509250925092565b600067ffffffffffffffff82111561210557612104611d92565b5b61210e82611d81565b9050602081019050919050565b600061212e612129846120ea565b611df2565b90508281526020810184848401111561214a57612149611d7c565b5b612155848285611e3e565b509392505050565b600082601f83011261217257612171611d77565b5b813561218284826020860161211b565b91505092915050565b600080604083850312156121a2576121a1611d6d565b5b60006121b085828601611fc4565b925050602083013567ffffffffffffffff8111156121d1576121d0611d72565b5b6121dd8582860161215d565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612212826121e7565b9050919050565b61222281612207565b82525050565b61223181611ebd565b82525050565b600060608201905061224c6000830186612219565b6122596020830185612219565b6122666040830184612228565b949350505050565b60008115159050919050565b6122838161226e565b811461228e57600080fd5b50565b6000815190506122a08161227a565b92915050565b6000602082840312156122bc576122bb611d6d565b5b60006122ca84828501612291565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061231a57607f821691505b60208210810361232d5761232c6122d3565b5b50919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b6000815461236681612302565b6123708186612333565b9450600182166000811461238b576001811461239d576123d0565b60ff19831686526020860193506123d0565b6123a685612344565b60005b838110156123c8578154818901526001820191506020810190506123a9565b808801955050505b50505092915050565b600060808201905081810360008301526123f38187612359565b90506124026020830186612228565b61240f6040830185612228565b61241c6060830184612228565b95945050505050565b600060408201905061243a6000830185612219565b6124476020830184612228565b9392505050565b60006020820190506124636000830184612228565b92915050565b600081519050919050565b60005b83811015612492578082015181840152602081019050612477565b838111156124a1576000848401525b50505050565b60006124b282612469565b6124bc8185612333565b93506124cc818560208601612474565b6124d581611d81565b840191505092915050565b600060808201905081810360008301526124fa81876124a7565b90506125096020830186612228565b6125166040830185612228565b6125236060830184612228565b95945050505050565b61253581611fa3565b82525050565b6000604082019050612550600083018561252c565b61255d6020830184612219565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125cd82611ebd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125ff576125fe612593565b5b600182019050919050565b600060808201905061261f600083018761252c565b818103602083015261263181866124a7565b90506126406040830185612219565b61264d6060830184612219565b95945050505050565b600060208201905061266b6000830184612219565b92915050565b6000602082019050612686600083018461252c565b92915050565b600081519050919050565b600082825260208201905092915050565b60006126b38261268c565b6126bd8185612697565b93506126cd818560208601612474565b6126d681611d81565b840191505092915050565b600060408201905081810360008301526126fb81856126a8565b905061270a602083018461252c565b9392505050565b600061271c82611ebd565b915061272783611ebd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561275c5761275b612593565b5b828201905092915050565b6000602082019050818103600083015261278181846126a8565b905092915050565b6127928161226e565b82525050565b60006040820190506127ad6000830185612789565b6127ba6020830184612219565b9392505050565b60006040820190506127d66000830185612228565b6127e36020830184612228565b9392505050565b60006127f582611ebd565b915061280083611ebd565b92508282101561281357612812612593565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061288e601c8361284d565b915061289982612858565b601c82019050919050565b6000819050919050565b6128bf6128ba82611fa3565b6128a4565b82525050565b60006128d082612881565b91506128dc82846128ae565b60208201915081905092915050565b6128f481611fde565b82525050565b600060808201905061290f600083018761252c565b61291c60208301866128eb565b612929604083018561252c565b612936606083018461252c565b95945050505050565b60006060820190506129546000830186612228565b6129616020830185612228565b61296e6040830184612228565b94935050505056fea2646970667358221220bed4013efacd4ffb3ffc420792c0ac2f94ddead1247a93f7239dd658a78adf6264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806369afe1c51161005b57806369afe1c5146100d65780636a5ac74c146100f25780638d58642a1461010e578063c885bc581461012a5761007d565b80630c4c35f014610082578063364e08011461009e578063449f11a6146100ba575b600080fd5b61009c60048036038101906100979190611ef3565b610134565b005b6100b860048036038101906100b39190611f76565b6102d0565b005b6100d460048036038101906100cf9190611ef3565b6103d7565b005b6100f060048036038101906100eb919061207b565b610640565b005b61010c60048036038101906101079190611f76565b6109e8565b005b6101286004803603810190610123919061218b565b610af1565b005b610132610de4565b005b61013d33610f65565b60008060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508481600101908051906020019061019a929190611b89565b508381600201819055508281600301819055506000821115610266576101c0338361100b565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161022193929190612237565b6020604051808303816000875af1158015610240573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026491906122a6565b505b3373ffffffffffffffffffffffffffffffffffffffff167f4df9330dcb4af4b522d063da8a473d6711cdd390feef75f059a663a76c270139826001018360020154846003015485600401546040516102c194939291906123d9565b60405180910390a25050505050565b6102d933610f65565b6102e33382611077565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610342929190612425565b6020604051808303816000875af1158015610361573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038591906122a6565b503373ffffffffffffffffffffffffffffffffffffffff167fd91b1e491a880123721b161dbbf8249668b0c546077d7ba4d0016441ca9d8f45826040516103cc919061244e565b60405180910390a250565b6103e0336111b2565b60006040518060c001604052806001151581526020018681526020018581526020018481526020018381526020016000815250905060008211156104c4576000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161047f93929190612237565b6020604051808303816000875af115801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c291906122a6565b505b80600060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001019080519060200190610543929190611b89565b5060408201518160020155606082015181600301556080820151816004015560a082015181600501559050506000600601339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fec728a18db560dc21e59ae36132eb1e1c1b00d056a88ee755e0940e471ad591e826020015183604001518460600151856080015160405161063194939291906124e0565b60405180910390a25050505050565b61064983611259565b61066b6000600d01600085815260200190815260200160002060020154611385565b6000610685838360000151846020015185604001516113cc565b9050610691848261147e565b6106d45783816040517fd93ccb200000000000000000000000000000000000000000000000000000000081526004016106cb92919061253b565b60405180910390fd5b60005b6000600d0160008681526020019081526020016000206007018054905081101561080f578173ffffffffffffffffffffffffffffffffffffffff166000600d016000878152602001908152602001600020600701828154811061073d5761073c612564565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107fc57336000600d01600087815260200190815260200160002060070182815481106107af576107ae612564565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061080f565b8080610807906125c2565b9150506106d7565b5061081a84826114f0565b600080601201600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080601201600087815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806000015482600001819055508060020154826002018190555060405180602001604052806000815250826003019080519060200190610907929190611c0f565b50600081600001819055506000801b816002018190555060405180602001604052806000815250816003019080519060200190610945929190611c0f565b506000600d01600087815260200190815260200160002060040185908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610998929190611b89565b506109a3863361162f565b7fa11d6c318d830f7ace4ca677c932075082bc61f4356facae5a2a0e1c2a97454c868685336040516109d8949392919061260a565b60405180910390a1505050505050565b6109f133610f65565b6109fb338261100b565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610a5c93929190612237565b6020604051808303816000875af1158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f91906122a6565b503373ffffffffffffffffffffffffffffffffffffffff167ff882a0847c57aefe6f6c7df2098dd0afd122eb0e886199e223651b8e45fda82382604051610ae6919061244e565b60405180910390a250565b610afa82611259565b610b04823361176e565b610b0e823361147e565b610b4f57336040517f82881f03000000000000000000000000000000000000000000000000000000008152600401610b469190612656565b60405180910390fd5b610b716000600d016000848152602001908152602001600020600201546117c6565b6000610b7d8333611879565b905060008280519060200120604051602001610b999190612671565b60405160208183030381529060405280519060200120905081604001518114610bff578282604001516040517fd6091bc2000000000000000000000000000000000000000000000000000000008152600401610bf69291906126e1565b60405180910390fd5b826000601201600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019080519060200190610c69929190611c95565b50610c7484336114f0565b6001600060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff021916908315150217905550600060090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084908060018154018082558091505060019003906000526020600020016000909190919091505581600001516000600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d9f9190612711565b92505081905550837f2a1e0100e3bcf67538d8408f2592de3731b8b40f8c6d7dd813e355c7b73848d884604051610dd69190612767565b60405180910390a250505050565b600080600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ed0929190612425565b6020604051808303816000875af1158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1391906122a6565b503373ffffffffffffffffffffffffffffffffffffffff167fbc84835063c693975166f00cffb19f01a94c2db55b1bf259238c5da3594e506682604051610f5a919061244e565b60405180910390a250565b6000610f6f6119a3565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611007576001826040517f2eeb3571000000000000000000000000000000000000000000000000000000008152600401610ffe929190612798565b60405180910390fd5b5050565b60006110156119a3565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600082825461106b9190612711565b92505081905550505050565b60006110816119a3565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154821115611152578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154826040517fa4e3bead0000000000000000000000000000000000000000000000000000000081526004016111499291906127c1565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008282546111a691906127ea565b92505081905550505050565b60006111bc6119a3565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611255576000826040517f2eeb357100000000000000000000000000000000000000000000000000000000815260040161124c929190612798565b60405180910390fd5b5050565b60006112636119a3565b9050600060078111156112795761127861281e565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff1660078111156112b1576112b061281e565b5b036112f357816040517f018da6880000000000000000000000000000000000000000000000000000000081526004016112ea9190612671565b60405180910390fd5b600160078111156113075761130661281e565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff16600781111561133f5761133e61281e565b5b1461138157816040517f7c6a6d700000000000000000000000000000000000000000000000000000000081526004016113789190612671565b60405180910390fd5b5050565b4281116113c957806040517f357efa270000000000000000000000000000000000000000000000000000000081526004016113c0919061244e565b60405180910390fd5b50565b600080856040516020016113e09190612767565b6040516020818303038152906040528051906020012060405160200161140691906128c5565b60405160208183030381529060405280519060200120905060006001828787876040516000815260200160405260405161144394939291906128fa565b6020604051602081039080840390855afa158015611465573d6000803e3d6000fd5b5050506020604051035190508092505050949350505050565b6000806114896119a3565b90506000801b81601201600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154141591505092915050565b60006114fa6119a3565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461158990612302565b80601f01602080910402602001604051908101604052809291908181526020018280546115b590612302565b80156116025780601f106115d757610100808354040283529160200191611602565b820191906000526020600020905b8154815290600101906020018083116115e557829003601f168201915b5050505050815250509050600061161c82600001516119a8565b905061162884826119b2565b5050505050565b60006116396119a3565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180546116c890612302565b80601f01602080910402602001604051908101604052809291908181526020018280546116f490612302565b80156117415780601f1061171657610100808354040283529160200191611741565b820191906000526020600020905b81548152906001019060200180831161172457829003601f168201915b5050505050815250509050600061175b82600001516119a8565b905061176784826119ca565b5050505050565b600061177a8383611879565b606001515111156117c257806040517f1b933fa00000000000000000000000000000000000000000000000000000000081526004016117b99190612656565b60405180910390fd5b5050565b4281111561180d5780426040517f0674c5900000000000000000000000000000000000000000000000000000000081526004016118049291906127c1565b60405180910390fd5b60006118176119a3565b90504281600301548361182a9190612711565b101561187557818160030154426040517f4fd4cfc500000000000000000000000000000000000000000000000000000000815260040161186c9392919061293f565b60405180910390fd5b5050565b611881611d1b565b600061188b6119a3565b905080601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461191890612302565b80601f016020809104026020016040519081016040528092919081815260200182805461194490612302565b80156119915780601f1061196657610100808354040283529160200191611991565b820191906000526020600020905b81548152906001019060200180831161197457829003601f168201915b50505050508152505091505092915050565b600090565b6000819050919050565b6119bc82826119e2565b6119c6828261100b565b5050565b6119d48282611077565b6119de8282611b1d565b5050565b60006119ec6119a3565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154821115611abd578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401611ab49291906127c1565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611b1191906127ea565b92505081905550505050565b6000611b276119a3565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611b7d9190612711565b92505081905550505050565b828054611b9590612302565b90600052602060002090601f016020900481019282611bb75760008555611bfe565b82601f10611bd057805160ff1916838001178555611bfe565b82800160010185558215611bfe579182015b82811115611bfd578251825591602001919060010190611be2565b5b509050611c0b9190611d46565b5090565b828054611c1b90612302565b90600052602060002090601f016020900481019282611c3d5760008555611c84565b82601f10611c5657805160ff1916838001178555611c84565b82800160010185558215611c84579182015b82811115611c83578251825591602001919060010190611c68565b5b509050611c919190611d46565b5090565b828054611ca190612302565b90600052602060002090601f016020900481019282611cc35760008555611d0a565b82601f10611cdc57805160ff1916838001178555611d0a565b82800160010185558215611d0a579182015b82811115611d09578251825591602001919060010190611cee565b5b509050611d179190611d46565b5090565b6040518060800160405280600081526020016000815260200160008019168152602001606081525090565b5b80821115611d5f576000816000905550600101611d47565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611dca82611d81565b810181811067ffffffffffffffff82111715611de957611de8611d92565b5b80604052505050565b6000611dfc611d63565b9050611e088282611dc1565b919050565b600067ffffffffffffffff821115611e2857611e27611d92565b5b611e3182611d81565b9050602081019050919050565b82818337600083830152505050565b6000611e60611e5b84611e0d565b611df2565b905082815260208101848484011115611e7c57611e7b611d7c565b5b611e87848285611e3e565b509392505050565b600082601f830112611ea457611ea3611d77565b5b8135611eb4848260208601611e4d565b91505092915050565b6000819050919050565b611ed081611ebd565b8114611edb57600080fd5b50565b600081359050611eed81611ec7565b92915050565b60008060008060808587031215611f0d57611f0c611d6d565b5b600085013567ffffffffffffffff811115611f2b57611f2a611d72565b5b611f3787828801611e8f565b9450506020611f4887828801611ede565b9350506040611f5987828801611ede565b9250506060611f6a87828801611ede565b91505092959194509250565b600060208284031215611f8c57611f8b611d6d565b5b6000611f9a84828501611ede565b91505092915050565b6000819050919050565b611fb681611fa3565b8114611fc157600080fd5b50565b600081359050611fd381611fad565b92915050565b600080fd5b600060ff82169050919050565b611ff481611fde565b8114611fff57600080fd5b50565b60008135905061201181611feb565b92915050565b60006060828403121561202d5761202c611fd9565b5b6120376060611df2565b9050600061204784828501612002565b600083015250602061205b84828501611fc4565b602083015250604061206f84828501611fc4565b60408301525092915050565b600080600060a0848603121561209457612093611d6d565b5b60006120a286828701611fc4565b935050602084013567ffffffffffffffff8111156120c3576120c2611d72565b5b6120cf86828701611e8f565b92505060406120e086828701612017565b9150509250925092565b600067ffffffffffffffff82111561210557612104611d92565b5b61210e82611d81565b9050602081019050919050565b600061212e612129846120ea565b611df2565b90508281526020810184848401111561214a57612149611d7c565b5b612155848285611e3e565b509392505050565b600082601f83011261217257612171611d77565b5b813561218284826020860161211b565b91505092915050565b600080604083850312156121a2576121a1611d6d565b5b60006121b085828601611fc4565b925050602083013567ffffffffffffffff8111156121d1576121d0611d72565b5b6121dd8582860161215d565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612212826121e7565b9050919050565b61222281612207565b82525050565b61223181611ebd565b82525050565b600060608201905061224c6000830186612219565b6122596020830185612219565b6122666040830184612228565b949350505050565b60008115159050919050565b6122838161226e565b811461228e57600080fd5b50565b6000815190506122a08161227a565b92915050565b6000602082840312156122bc576122bb611d6d565b5b60006122ca84828501612291565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061231a57607f821691505b60208210810361232d5761232c6122d3565b5b50919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b6000815461236681612302565b6123708186612333565b9450600182166000811461238b576001811461239d576123d0565b60ff19831686526020860193506123d0565b6123a685612344565b60005b838110156123c8578154818901526001820191506020810190506123a9565b808801955050505b50505092915050565b600060808201905081810360008301526123f38187612359565b90506124026020830186612228565b61240f6040830185612228565b61241c6060830184612228565b95945050505050565b600060408201905061243a6000830185612219565b6124476020830184612228565b9392505050565b60006020820190506124636000830184612228565b92915050565b600081519050919050565b60005b83811015612492578082015181840152602081019050612477565b838111156124a1576000848401525b50505050565b60006124b282612469565b6124bc8185612333565b93506124cc818560208601612474565b6124d581611d81565b840191505092915050565b600060808201905081810360008301526124fa81876124a7565b90506125096020830186612228565b6125166040830185612228565b6125236060830184612228565b95945050505050565b61253581611fa3565b82525050565b6000604082019050612550600083018561252c565b61255d6020830184612219565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125cd82611ebd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125ff576125fe612593565b5b600182019050919050565b600060808201905061261f600083018761252c565b818103602083015261263181866124a7565b90506126406040830185612219565b61264d6060830184612219565b95945050505050565b600060208201905061266b6000830184612219565b92915050565b6000602082019050612686600083018461252c565b92915050565b600081519050919050565b600082825260208201905092915050565b60006126b38261268c565b6126bd8185612697565b93506126cd818560208601612474565b6126d681611d81565b840191505092915050565b600060408201905081810360008301526126fb81856126a8565b905061270a602083018461252c565b9392505050565b600061271c82611ebd565b915061272783611ebd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561275c5761275b612593565b5b828201905092915050565b6000602082019050818103600083015261278181846126a8565b905092915050565b6127928161226e565b82525050565b60006040820190506127ad6000830185612789565b6127ba6020830184612219565b9392505050565b60006040820190506127d66000830185612228565b6127e36020830184612228565b9392505050565b60006127f582611ebd565b915061280083611ebd565b92508282101561281357612812612593565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061288e601c8361284d565b915061289982612858565b601c82019050919050565b6000819050919050565b6128bf6128ba82611fa3565b6128a4565b82525050565b60006128d082612881565b91506128dc82846128ae565b60208201915081905092915050565b6128f481611fde565b82525050565b600060808201905061290f600083018761252c565b61291c60208301866128eb565b612929604083018561252c565b612936606083018461252c565b95945050505050565b60006060820190506129546000830186612228565b6129616020830185612228565b61296e6040830184612228565b94935050505056fea2646970667358221220bed4013efacd4ffb3ffc420792c0ac2f94ddead1247a93f7239dd658a78adf6264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositFreeBond(uint256)": {
        "params": {
          "amount": "The amount to deposit"
        }
      },
      "finalizeTransfer(bytes32,string,(uint8,bytes32,bytes32))": {
        "params": {
          "arweaveTxId": "The id of the arweave transaction where the new shard",
          "oldArchSignature": "The signature of the old archaeologist was uploaded",
          "sarcoId": "The identifier of the sarcophagus"
        }
      },
      "registerArchaeologist(string,uint256,uint256,uint256)": {
        "params": {
          "freeBond": "How much bond the archaeologist wants to deposit during the register call (if any)",
          "maximumRewrapInterval": "The longest interval of time from a rewrap time the arch will accept for a resurrection",
          "minimumDiggingFee": "The archaeologist's minimum amount to accept for a digging fee",
          "peerId": "The libp2p identifier for the archaeologist"
        }
      },
      "unwrapSarcophagus(bytes32,bytes)": {
        "details": "Verifies that the unencrypted shard matches the hashedShard stored on chain and pays the archaeologist.",
        "params": {
          "sarcoId": "The identifier of the sarcophagus to unwrap",
          "unencryptedShard": "The archaeologist's corresponding unencrypted shard"
        }
      },
      "updateArchaeologist(string,uint256,uint256,uint256)": {
        "params": {
          "maximumRewrapInterval": "The longest interval of time from a rewrap time the arch will accept for a resurrection freeBond How much bond the archaeologist wants to deposit during the update call (if any)",
          "minimumDiggingFee": "The archaeologist's minimum amount to accept for a digging fee",
          "peerId": "The libp2p identifier for the archaeologist"
        }
      },
      "withdrawFreeBond(uint256)": {
        "params": {
          "amount": "The amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositFreeBond(uint256)": {
        "notice": "Deposits an archaeologist's free bond to the contract."
      },
      "finalizeTransfer(bytes32,string,(uint8,bytes32,bytes32))": {
        "notice": "Finalizes a transfer of roles and responsibilities between two archaeologists. This is to be called by the new archaeologist."
      },
      "registerArchaeologist(string,uint256,uint256,uint256)": {
        "notice": "Registers the archaeologist profile"
      },
      "unwrapSarcophagus(bytes32,bytes)": {
        "notice": "Unwraps the sarcophagus."
      },
      "updateArchaeologist(string,uint256,uint256,uint256)": {
        "notice": "Updates the archaeologist profile"
      },
      "withdrawFreeBond(uint256)": {
        "notice": "Withdraws an archaeologist's free bond from the contract."
      },
      "withdrawReward()": {
        "notice": "Withdraws all rewards from an archaeologist's reward pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4106_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SarcophagusState)3448": {
        "encoding": "inplace",
        "label": "enum LibTypes.SarcophagusState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(ArchaeologistProfile)3499_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistProfile)3499_storage"
      },
      "t_mapping(t_address,t_struct(ArchaeologistStorage)3486_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistStorage)3486_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3486_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct LibTypes.ArchaeologistStorage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ArchaeologistStorage)3486_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Sarcophagus)3538_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibTypes.Sarcophagus)",
        "numberOfBytes": "32",
        "value": "t_struct(Sarcophagus)3538_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4106_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4030,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcoToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 4032,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "protocolFeeBasePercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4034,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "totalProtocolFees",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4036,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "gracePeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4038,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "expirationThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4041,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcophagusIdentifiers",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4044,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistProfileAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4049,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistProfiles",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(ArchaeologistProfile)3499_storage)"
          },
          {
            "astId": 4055,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistSarcoSuccesses",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
          },
          {
            "astId": 4060,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistSuccesses",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4065,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistAccusals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4070,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistCleanups",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4074,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistRewards",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4079,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcophagi",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_bytes32,t_struct(Sarcophagus)3538_storage)"
          },
          {
            "astId": 4084,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "embalmerSarcophagi",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4089,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistSarcophagi",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4094,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "recipientSarcophagi",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4098,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "doubleHashedShardArchaeologists",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 4105,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcophagusArchaeologists",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3486_storage))"
          }
        ],
        "numberOfBytes": "608"
      },
      "t_struct(ArchaeologistProfile)3499_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistProfile",
        "members": [
          {
            "astId": 3488,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3490,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3492,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "minimumDiggingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3494,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3496,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "freeBond",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3498,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "cursedBond",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ArchaeologistStorage)3486_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistStorage",
        "members": [
          {
            "astId": 3479,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "diggingFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3481,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "diggingFeesPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3483,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "unencryptedShardDoubleHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 3485,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "unencryptedShard",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Sarcophagus)3538_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.Sarcophagus",
        "members": [
          {
            "astId": 3516,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3519,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(SarcophagusState)3448"
          },
          {
            "astId": 3521,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "canBeTransferred",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3523,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "minShards",
            "offset": 2,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 3525,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "resurrectionTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3527,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3530,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "arweaveTxIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3532,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "embalmer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3534,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3537,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologists",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}