{
  "address": "0x6b29D9b891907aBCB60F60b8a38eb0230c723C03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistAlreadyUnwrapped",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistNotOnSarcophagus",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistProfileExistsShouldBe",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursedBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughCursedBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughFreeBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusInactive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        }
      ],
      "name": "TooEarlyToUnwrap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gracePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        }
      ],
      "name": "TooLateToUnwrap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unencryptedShard",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "doubleHashedShard",
          "type": "bytes32"
        }
      ],
      "name": "UnencryptedShardHashMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositedBond",
          "type": "uint256"
        }
      ],
      "name": "DepositFreeBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumDiggingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximumRewrapInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        }
      ],
      "name": "RegisterArchaeologist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "unencryptedShard",
          "type": "bytes"
        }
      ],
      "name": "UnwrapSarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumDiggingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximumRewrapInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        }
      ],
      "name": "UpdateArchaeologist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnBond",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFreeBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnReward",
          "type": "uint256"
        }
      ],
      "name": "WithdrawReward",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFreeBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minimumDiggingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumRewrapInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        }
      ],
      "name": "registerArchaeologist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "unencryptedShard",
          "type": "bytes"
        }
      ],
      "name": "unwrapSarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minimumDiggingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumRewrapInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        }
      ],
      "name": "updateArchaeologist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFreeBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb9257dd7fc6882f19963371d637a71c09e21b80be71ff6d483cbde6db87a2a2",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x16C5D075eC8F7fcA5FD893023CCFb45a0f7CDe8a",
    "contractAddress": null,
    "transactionIndex": 33,
    "gasUsed": "1797905",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd74eaf08e459016602c99756a5b410a5a14b9509308289afdf9f746d52a3ceb4",
    "transactionHash": "0xfb9257dd7fc6882f19963371d637a71c09e21b80be71ff6d483cbde6db87a2a2",
    "logs": [],
    "blockNumber": 7960202,
    "cumulativeGasUsed": "12789342",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e93e69833cc2861ad35b8a71c75835fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistAlreadyUnwrapped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistNotOnSarcophagus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistProfileExistsShouldBe\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursedBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughCursedBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFreeBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusInactive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"TooEarlyToUnwrap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"TooLateToUnwrap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"doubleHashedShard\",\"type\":\"bytes32\"}],\"name\":\"UnencryptedShardHashMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedBond\",\"type\":\"uint256\"}],\"name\":\"DepositFreeBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDiggingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"}],\"name\":\"RegisterArchaeologist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"}],\"name\":\"UnwrapSarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDiggingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"}],\"name\":\"UpdateArchaeologist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnBond\",\"type\":\"uint256\"}],\"name\":\"WithdrawFreeBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnReward\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFreeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minimumDiggingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"}],\"name\":\"registerArchaeologist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"}],\"name\":\"unwrapSarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minimumDiggingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRewrapInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"}],\"name\":\"updateArchaeologist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFreeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositFreeBond(uint256)\":{\"params\":{\"amount\":\"The amount to deposit\"}},\"registerArchaeologist(string,uint256,uint256,uint256)\":{\"params\":{\"freeBond\":\"How much bond the archaeologist wants to deposit during the register call (if any)\",\"maximumRewrapInterval\":\"The longest interval of time from a rewrap time the arch will accept for a resurrection\",\"minimumDiggingFee\":\"The archaeologist's minimum amount to accept for a digging fee\",\"peerId\":\"The libp2p identifier for the archaeologist\"}},\"unwrapSarcophagus(bytes32,bytes)\":{\"details\":\"Verifies that the unencrypted shard matches the hashedShard stored on chain and pays the archaeologist.\",\"params\":{\"sarcoId\":\"The identifier of the sarcophagus to unwrap\",\"unencryptedShard\":\"The archaeologist's corresponding unencrypted shard\"}},\"updateArchaeologist(string,uint256,uint256,uint256)\":{\"params\":{\"maximumRewrapInterval\":\"The longest interval of time from a rewrap time the arch will accept for a resurrection freeBond How much bond the archaeologist wants to deposit during the update call (if any)\",\"minimumDiggingFee\":\"The archaeologist's minimum amount to accept for a digging fee\",\"peerId\":\"The libp2p identifier for the archaeologist\"}},\"withdrawFreeBond(uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositFreeBond(uint256)\":{\"notice\":\"Deposits an archaeologist's free bond to the contract.\"},\"registerArchaeologist(string,uint256,uint256,uint256)\":{\"notice\":\"Registers the archaeologist profile\"},\"unwrapSarcophagus(bytes32,bytes)\":{\"notice\":\"Unwraps the sarcophagus.\"},\"updateArchaeologist(string,uint256,uint256,uint256)\":{\"notice\":\"Updates the archaeologist profile\"},\"withdrawFreeBond(uint256)\":{\"notice\":\"Withdraws an archaeologist's free bond from the contract.\"},\"withdrawReward()\":{\"notice\":\"Withdraws all rewards from an archaeologist's reward pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ArchaeologistFacet.sol\":\"ArchaeologistFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/facets/ArchaeologistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibUtils} from \\\"../libraries/LibUtils.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\nimport {LibBonds} from \\\"../libraries/LibBonds.sol\\\";\\nimport {AppStorage} from \\\"../storage/LibAppStorage.sol\\\";\\n\\ncontract ArchaeologistFacet {\\n    AppStorage internal s;\\n\\n    event UnwrapSarcophagus(bytes32 indexed sarcoId, bytes unencryptedShard);\\n\\n    event DepositFreeBond(address indexed archaeologist, uint256 depositedBond);\\n\\n    event RegisterArchaeologist(\\n        address indexed archaeologist,\\n        string peerId,\\n        uint256 minimumDiggingFee,\\n        uint256 maximumRewrapInterval,\\n        uint256 freeBond\\n    );\\n\\n    event UpdateArchaeologist(\\n        address indexed archaeologist,\\n        string peerId,\\n        uint256 minimumDiggingFee,\\n        uint256 maximumRewrapInterval,\\n        uint256 freeBond\\n    );\\n\\n    event WithdrawFreeBond(\\n        address indexed archaeologist,\\n        uint256 withdrawnBond\\n    );\\n\\n    event WithdrawReward(\\n        address indexed archaeologist,\\n        uint256 withdrawnReward\\n    );\\n\\n    /// @notice Registers the archaeologist profile\\n    /// @param peerId The libp2p identifier for the archaeologist\\n    /// @param minimumDiggingFee The archaeologist's minimum amount to accept for a digging fee\\n    /// @param maximumRewrapInterval The longest interval of time from a rewrap time the arch will accept\\n    /// for a resurrection\\n    /// @param freeBond How much bond the archaeologist wants to deposit during the register call (if any)\\n    function registerArchaeologist(\\n        string memory peerId,\\n        uint256 minimumDiggingFee,\\n        uint256 maximumRewrapInterval,\\n        uint256 freeBond\\n    ) external {\\n        // verify that the archaeologist does not already exist\\n        LibUtils.revertIfArchProfileExists(msg.sender);\\n\\n        // create a new archaeologist\\n        LibTypes.ArchaeologistProfile memory newArch = LibTypes\\n            .ArchaeologistProfile({\\n                exists: true,\\n                peerId: peerId,\\n                minimumDiggingFee: minimumDiggingFee,\\n                maximumRewrapInterval: maximumRewrapInterval,\\n                freeBond: freeBond,\\n                cursedBond: 0\\n            });\\n\\n        // transfer SARCO tokens from the archaeologist to this contract, to be\\n        // used as their free bond. can be 0.\\n        if (freeBond > 0) {\\n            s.sarcoToken.transferFrom(msg.sender, address(this), freeBond);\\n        }\\n\\n        // save the new archaeologist into relevant data structures\\n        s.archaeologistProfiles[msg.sender] = newArch;\\n        s.archaeologistProfileAddresses.push(msg.sender);\\n\\n        emit RegisterArchaeologist(\\n            msg.sender,\\n            newArch.peerId,\\n            newArch.minimumDiggingFee,\\n            newArch.maximumRewrapInterval,\\n            newArch.freeBond\\n        );\\n    }\\n\\n    /// @notice Updates the archaeologist profile\\n    /// @param peerId The libp2p identifier for the archaeologist\\n    /// @param minimumDiggingFee The archaeologist's minimum amount to accept for a digging fee\\n    /// @param maximumRewrapInterval The longest interval of time from a rewrap time the arch will accept\\n    /// for a resurrection\\n    /// freeBond How much bond the archaeologist wants to deposit during the update call (if any)\\n    function updateArchaeologist(\\n        string memory peerId,\\n        uint256 minimumDiggingFee,\\n        uint256 maximumRewrapInterval,\\n        uint256 freeBond\\n    ) external {\\n        // verify that the archaeologist exists\\n        LibUtils.revertIfArchProfileDoesNotExist(msg.sender);\\n\\n        // create a new archaeologist\\n        LibTypes.ArchaeologistProfile storage existingArch = s\\n            .archaeologistProfiles[msg.sender];\\n        existingArch.peerId = peerId;\\n        existingArch.minimumDiggingFee = minimumDiggingFee;\\n        existingArch.maximumRewrapInterval = maximumRewrapInterval;\\n\\n        // transfer SARCO tokens from the archaeologist to this contract, to be\\n        // used as their free bond. can be 0.\\n        if (freeBond > 0) {\\n            LibBonds.increaseFreeBond(msg.sender, freeBond);\\n            s.sarcoToken.transferFrom(msg.sender, address(this), freeBond);\\n        }\\n\\n        emit UpdateArchaeologist(\\n            msg.sender,\\n            existingArch.peerId,\\n            existingArch.minimumDiggingFee,\\n            existingArch.maximumRewrapInterval,\\n            existingArch.freeBond\\n        );\\n    }\\n\\n    /// @notice Deposits an archaeologist's free bond to the contract.\\n    /// @param amount The amount to deposit\\n    function depositFreeBond(uint256 amount) external {\\n        LibUtils.revertIfArchProfileDoesNotExist(msg.sender);\\n        // Increase the archaeologist's free bond in app storage\\n        LibBonds.increaseFreeBond(msg.sender, amount);\\n\\n        // Transfer the amount of sarcoToken from the archaeologist to the contract\\n        s.sarcoToken.transferFrom(msg.sender, address(this), amount);\\n        // Emit an event\\n        emit DepositFreeBond(msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraws an archaeologist's free bond from the contract.\\n    /// @param amount The amount to withdraw\\n    function withdrawFreeBond(uint256 amount) external {\\n        LibUtils.revertIfArchProfileDoesNotExist(msg.sender);\\n        // Decrease the archaeologist's free bond amount.\\n        // Reverts if there is not enough free bond on the contract.\\n        LibBonds.decreaseFreeBond(msg.sender, amount);\\n\\n        // Transfer the amount of sarcoToken to the archaeologist\\n        s.sarcoToken.transfer(msg.sender, amount);\\n\\n        // Emit an event\\n        emit WithdrawFreeBond(msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraws all rewards from an archaeologist's reward pool\\n    function withdrawReward() external {\\n        uint256 amountToWithdraw = s.archaeologistRewards[msg.sender];\\n        s.archaeologistRewards[msg.sender] = 0;\\n\\n        // Transfer the amount of sarcoToken to the archaeologist\\n        s.sarcoToken.transfer(msg.sender, amountToWithdraw);\\n\\n        emit WithdrawReward(msg.sender, amountToWithdraw);\\n    }\\n\\n    /// @notice Unwraps the sarcophagus.\\n    /// @dev Verifies that the unencrypted shard matches the hashedShard stored\\n    /// on chain and pays the archaeologist.\\n    /// @param sarcoId The identifier of the sarcophagus to unwrap\\n    /// @param unencryptedShard The archaeologist's corresponding unencrypted shard\\n    function unwrapSarcophagus(bytes32 sarcoId, bytes memory unencryptedShard)\\n        external\\n    {\\n        LibUtils.revertIfNotExistOrInactive(sarcoId);\\n\\n        // Confirm that the archaeologist has not already unwrapped by checking\\n        // if the unencryptedShard is empty\\n        LibUtils.archaeologistUnwrappedCheck(sarcoId, msg.sender);\\n\\n        // Confirm that the sender is an archaeologist on this sarcophagus\\n        if (!LibUtils.archaeologistExistsOnSarc(sarcoId, msg.sender)) {\\n            revert LibErrors.ArchaeologistNotOnSarcophagus(msg.sender);\\n        }\\n\\n        // Confirm that the resurrection time has passed and that the\\n        // grace period has not passed\\n        LibUtils.unwrapTime(s.sarcophagi[sarcoId].resurrectionTime);\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = LibUtils\\n            .getArchaeologist(sarcoId, msg.sender);\\n\\n        // Confirm that the double hash of the unencrypted shard matches the hashedShard in storage\\n        bytes32 doubleHash = keccak256(abi.encode(keccak256(unencryptedShard)));\\n        if (doubleHash != archaeologistData.unencryptedShardDoubleHash) {\\n            revert LibErrors.UnencryptedShardHashMismatch(\\n                unencryptedShard,\\n                archaeologistData.unencryptedShardDoubleHash\\n            );\\n        }\\n\\n        // Store the unencrypted shard in on the archaeologist object in the sarcophagus\\n        s\\n        .sarcophagusArchaeologists[sarcoId][msg.sender]\\n            .unencryptedShard = unencryptedShard;\\n\\n        // Free the archaeologist's cursed bond\\n        LibBonds.freeArchaeologist(sarcoId, msg.sender);\\n\\n        // Save the successful sarcophagus against the archaeologist\\n        s.archaeologistSarcoSuccesses[msg.sender][sarcoId] = true;\\n        s.archaeologistSuccesses[msg.sender].push(sarcoId);\\n\\n        // Transfer the digging fee to the archaeologist's reward pool\\n        s.archaeologistRewards[msg.sender] += archaeologistData.diggingFee;\\n\\n        // Emit an event\\n        emit UnwrapSarcophagus(sarcoId, unencryptedShard);\\n    }\\n}\\n\",\"keccak256\":\"0xf567d28b1f9d69eeb7ecda2b175b97f77058eda5ddc6fb6f75e7dd1f6f916ca8\",\"license\":\"Unlicense\"},\"contracts/libraries/LibBonds.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\nlibrary LibBonds {\\n    /// @notice Calculates the cursed bond that an archaeologist needs to lock\\n    /// up\\n    /// @dev The cursed bond amount is the digging fee\\n    /// @param diggingFee The digging fee of the sarcophagus\\n    /// @return The amount of cursed bond\\n    function calculateCursedBond(uint256 diggingFee)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // TODO: We dont need this function unless we implement a better algorithm\\n        // for calculating the cursed bond\\n        // Anywhere this method is used should be replaced with just the digging fee\\n        return diggingFee;\\n    }\\n\\n    /// @notice Decreases the amount stored in the freeBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's free bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function decreaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current free bond\\n        if (amount > s.archaeologistProfiles[archaeologist].freeBond) {\\n            revert LibErrors.NotEnoughFreeBond(\\n                s.archaeologistProfiles[archaeologist].freeBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the freeBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function increaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond += amount;\\n    }\\n\\n    /// @notice Decreases the amount stored in the cursedBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's cursed bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function decreaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current cursed bond\\n        if (amount > s.archaeologistProfiles[archaeologist].cursedBond) {\\n            revert LibErrors.NotEnoughCursedBond(\\n                s.archaeologistProfiles[archaeologist].cursedBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the cursedBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function increaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond += amount;\\n    }\\n\\n    /// @notice Locks up the archaeologist's bond, decreasing the\\n    /// archaeologist's free bond by an amount and increasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to lock up\\n    function lockUpBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the free bond amount\\n        decreaseFreeBond(archaeologist, amount);\\n\\n        // Increase the cursed bond amount\\n        increaseCursedBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Unlocks the archaeologist's bond, increasing the\\n    /// archaeologist's free bond by an amount and decreasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to unlock\\n    function unlockBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the cursed bond amount\\n        decreaseCursedBond(archaeologist, amount);\\n\\n        // Increase the free bond amount\\n        increaseFreeBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and curses them (locks\\n    /// up the free bond).\\n    /// @param sarcoId the identifier of the sarcophagus to bond the archaeologist with\\n    /// @param archaeologist the address of the archaeologist to curse\\n    function curseArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee\\n        );\\n\\n        // Lock up the archaeologist's bond by the cursed bond amount\\n        lockUpBond(archaeologist, cursedBondAmount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and frees them\\n    /// (unlocks the cursed bond).\\n    /// @param sarcoId the identifier of the sarcophagus to free the archaologist from\\n    /// @param archaeologist the address of the archaeologist to free\\n    function freeArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee\\n        );\\n\\n        // Free up the archaeologist's locked bond\\n        unlockBond(archaeologist, cursedBondAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x18f939f2a764ed05d12fd6ffa9e511718ab1a723d3bfda2d0e2a3cc0c1889084\",\"license\":\"Unlicense\"},\"contracts/libraries/LibErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of Errors\\n * @notice This library defines all of the Errors that the Sarcophagus system\\n * uses.\\n */\\nlibrary LibErrors {\\n    error AccuseNotEnoughProof(uint256 shardsProvided, uint8 minShards);\\n\\n    error AccuseIncorrectProof();\\n\\n    error ArchaeologistAlreadyUnwrapped(address archaeologist);\\n\\n    error ArchaeologistListNotUnique(address[] archaeologists);\\n\\n    error ArchaeologistNotOnSarcophagus(address archaeologist);\\n\\n    error ArchaeologistProfileExistsShouldBe(bool exists, address archaeologist);\\n\\n    error ArweaveTxIdsInvalid();\\n\\n    error DiggingFeeTooLow(uint256 diggingFee, address archaeologist);\\n\\n    error MinShardsGreaterThanArchaeologists(uint8 minShards);\\n\\n    error MinShardsZero();\\n\\n    error MaxResurrectionIntervalIsZero();\\n\\n    error NewResurrectionTimeInPast(uint256 newResurrectionTime);\\n\\n    error NewResurrectionTimeTooLarge(uint256 newResurrectionTime);\\n\\n    error NoArchaeologistsProvided();\\n\\n    error NotEnoughCursedBond(uint256 cursedBond, uint256 amount);\\n\\n    error NotEnoughFreeBond(uint256 freeBond, uint256 amount);\\n\\n    error NotEnoughReward(uint256 reward, uint256 amount);\\n\\n    error ResurrectionTimeInPast(uint256 resurrectionTime);\\n\\n    error ResurrectionTimeTooFarInFuture(uint256 resurrectionTime, uint256 sarcophagusMaximumRewrapInterval);\\n\\n    error SarcophagusAlreadyExists(bytes32 sarcoId);\\n\\n    error SarcophagusDoesNotExist(bytes32 sarcoId);\\n\\n    error SarcophagusInactive(bytes32 sarcoId);\\n\\n    error SenderNotEmbalmer(address sender, address embalmer);\\n\\n    error InvalidSignature(\\n    // address recovered from signature via ecrecover\\n        address recoveredAddress,\\n    // address we expected to have signed the data\\n        address expectedAddress\\n    );\\n\\n    error SignerNotArchaeologistOnSarcophagus(bytes32 sarcoId, address signer);\\n\\n    // Used when an attempt is made to accuse or rewrap after the resurrection time has already passed (so it's actually time to unwrap it)\\n    error SarcophagusIsUnwrappable();\\n\\n    // Used when an attempt is made to clean a sarcophagus before the grace period after the resurrection time has passed\\n    error SarcophagusNotCleanable();\\n\\n    error TooEarlyToUnwrap(uint256 resurrectionTime, uint256 currentTime);\\n\\n    error TooLateToUnwrap(\\n        uint256 resurrectionTime,\\n        uint256 gracePeriod,\\n        uint256 currentTime\\n    );\\n\\n    error UnencryptedShardHashMismatch(\\n        bytes unencryptedShard,\\n        bytes32 doubleHashedShard\\n    );\\n\\n    error SarcophagusParametersExpired(uint256 timestamp);\\n}\\n\\n\",\"keccak256\":\"0x3ebd897b208b998b087c16b72bfd527e9f45ea7dadc8c83ac8de50ce65b6c42c\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of defined structs\\n * @notice This library defines the various data models that the Sarcophagus\\n * system uses\\n */\\nlibrary LibTypes {\\n    // DoesNotExist must come first on the list to be the default value\\n    enum SarcophagusState {\\n        DoesNotExist,\\n        Active,\\n        Resurrecting,\\n        Resurrected,\\n        Buried,\\n        Cleaned,\\n        Accused,\\n        Failed\\n    }\\n\\n    // A struct of just the signature. This is used primarily by the\\n    // finalizeSarcophagus function for the arweave archaeologist. Note that,\\n    // unlike the regular archaeologists, the sarcophagus already stores the\\n    // single arweave archaeologist's address so there is no need to pass in the\\n    // address to the finalizeSarcophagus function.\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // Signature struct created to make passing in the signature argmuments into\\n    // finalizedSarcophagus easier and to avoid the \\\"stack too deep\\\" error.\\n    // Also attaching arachaeologist addresses so we can tie the signature back\\n    // to the address in finalizeSarcophagus.\\n    struct SignatureWithAccount {\\n        address account;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // SelectedArchaeologistData is the struct that is passed into the\\n    // initializeSarcophagus function. Even though we don't need each storage\\n    // fee of the archaeologist, the storage fee is included in the struct to\\n    // reduce the stack size within the function, preventing the \\\"stack too\\n    // deep\\\" error.\\n    struct SelectedArchaeologistData {\\n        address archAddress;\\n        uint256 diggingFee;\\n        bytes32 unencryptedShardDoubleHash;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // ArchaeologistStorage is the struct that is stored in AppStorage under the\\n    // sarcophagusArchaeologists mapping.\\n    //\\n    // The archaeologist address is left out since each archaeologist's address\\n    // is stored on the sarcophagus object as an array.\\n    //\\n    // The storage fee is left out because we only need to store the storage fee\\n    // of the archaeologist uploading to arweave, which will be stored directly\\n    // on the sarcophagus.\\n    struct ArchaeologistStorage {\\n        uint256 diggingFee;\\n        uint256 diggingFeesPaid;\\n        bytes32 unencryptedShardDoubleHash;\\n        bytes unencryptedShard;\\n    }\\n\\n    // ArchaeologistProfile is used to store archaeologist profile data\\n    struct ArchaeologistProfile {\\n        bool exists;\\n        string peerId;\\n        uint256 minimumDiggingFee;\\n        uint256 maximumRewrapInterval;\\n        uint256 freeBond;\\n        uint256 cursedBond;\\n    }\\n\\n    struct SarcophagusMemory {\\n        string name;\\n        address recipient;\\n        uint256 resurrectionTime;\\n        uint256 maximumRewrapInterval;\\n        uint8 minShards;\\n        uint256 timestamp;\\n    }\\n\\n    // The ArchaeologistStorage struct could be contained in this Sarcophagus\\n    // struct as a mapping, but it was put into it's own mapping\\n    // (sarcophagusArchaeologists) directly in AppStorage. Instead the\\n    // sarcophagus stores the addresses of each archaeologist added to it. This\\n    // was done to simplify the creation of a sarcophagus object in\\n    // initializeSarcophagus.\\n    struct Sarcophagus {\\n        string name;\\n        SarcophagusState state;\\n        uint8 minShards;\\n        uint256 resurrectionTime;\\n        uint256 maximumRewrapInterval;\\n        string[] arweaveTxIds;\\n        address embalmer;\\n        address recipientAddress;\\n        address[] archaeologists;\\n    }\\n\\n    struct MetadataAttributes {\\n        string sarcophagusName;\\n        uint256 diggingFee;\\n        uint256 resurrectionTime;\\n        uint256 diggingFeesPaid;\\n    }\\n\\n    // Only used in the ViewStateFacet to return statistics data.\\n    // Contains a list of sarcoIds for each category. We could simply return the counts of the\\n    // arrays but we are already storing the lists of sarcoIds so we may as well use them.\\n    struct ArchaeologistStatistics {\\n        uint256 successes;\\n        uint256 accusals;\\n        uint256 cleanups;\\n    }\\n}\\n\",\"keccak256\":\"0x282468eef51b2b686846664cea47b99a6eadc05a86564e1db590ede4f3c9464d\",\"license\":\"Unlicense\"},\"contracts/libraries/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\n/**\\n * @title Utility functions used within the Sarcophagus system\\n * @notice This library implements various functions that are used throughout\\n * Sarcophagus, mainly to DRY up the codebase\\n * @dev these functions are all stateless, public, pure/view\\n */\\nlibrary LibUtils {\\n    /**\\n     * @notice Reverts if the public key length is not exactly 64 bytes long\\n     * @param publicKey the key to check length of\\n     */\\n    function publicKeyLength(bytes memory publicKey) public pure {\\n        require(publicKey.length == 64, \\\"public key must be 64 bytes\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if the hash of singleHash does not equal doubleHash\\n     * @param doubleHash the hash to compare hash of singleHash to\\n     * @param singleHash the value to hash and compare against doubleHash\\n     */\\n    function hashCheck(bytes32 doubleHash, bytes memory singleHash)\\n        public\\n        pure\\n    {\\n        require(doubleHash == keccak256(singleHash), \\\"hashes do not match\\\");\\n    }\\n\\n    function archaeologistUnwrappedCheck(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n    {\\n        if (\\n            getArchaeologist(sarcoId, archaeologist).unencryptedShard.length > 0\\n        ) {\\n            revert LibErrors.ArchaeologistAlreadyUnwrapped(archaeologist);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reverts with `SarcophagusDoesNotExist` if the Sarcophagus does not exist,\\n     * or with `SarcophagusInactive` if the Sarcophagus exists but is not active.\\n     * @param sarcoId Identifier of the Sarcophagus\\n     */\\n    function revertIfNotExistOrInactive(bytes32 sarcoId) internal view {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (\\n            s.sarcophagi[sarcoId].state ==\\n            LibTypes.SarcophagusState.DoesNotExist\\n        ) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Active) {\\n            revert LibErrors.SarcophagusInactive(sarcoId);\\n        }\\n    }\\n\\n    /**\\n     * @notice The archaeologist needs to sign off on two pieces of data\\n     * to guarantee their unrwap will be successful\\n     *\\n     * @param unencryptedShardDoubleHash the double hash of the unencrypted shard\\n     * @param arweaveTxId the arweave TX ID that contains the archs encrypted shard\\n     * @param agreedMaximumRewrapInterval that the archaeologist has agreed to for the sarcophagus\\n     * @param timestamp that the archaeologist has agreed to for the sarcophagus\\n     * @param diggingFee that the archaeologist has agreed to for the sarcophagus\\n     * @param v signature element\\n     * @param r signature element\\n     * @param s signature element\\n     * @param account address to confirm signature of data came from\\n     */\\n    function verifyArchaeologistSignature(\\n        bytes32 unencryptedShardDoubleHash,\\n        string memory arweaveTxId,\\n        uint256 agreedMaximumRewrapInterval,\\n        uint256 timestamp,\\n        uint256 diggingFee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address account\\n    ) internal pure {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(arweaveTxId, unencryptedShardDoubleHash, agreedMaximumRewrapInterval, diggingFee, timestamp))\\n            )\\n        );\\n\\n        // Generate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        address recoveredAddress = ecrecover(messageHash, v, r, s);\\n\\n        if (recoveredAddress != account) {\\n            revert LibErrors.InvalidSignature(recoveredAddress, account);\\n        }\\n    }\\n\\n    /// @notice Returns the address that signed some data given the data and the\\n    /// signature.\\n    /// @param data the data to verify\\n    /// @param v signature element\\n    /// @param r signature element\\n    /// @param s signature element\\n    /// @return the address that signed the data\\n    function recoverAddress(\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        // It's highly recommended that a hash be passed into ecrecover\\n        address account = ecrecover(messageHash, v, r, s);\\n\\n        return account;\\n    }\\n\\n    /**\\n     * @notice Reverts if the given resurrection time is not in the future\\n     * @param resurrectionTime the time to check against block.timestamp\\n     */\\n    function resurrectionInFuture(uint256 resurrectionTime) internal view {\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(resurrectionTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reverts if the current block timestamp is not within the resurrection window\\n     * (window = [resurrection time, resurrection time + grace period] inclusive)\\n     * @param resurrectionTime the resurrection time of the sarcophagus\\n     * (absolute, i.e. a date time stamp)\\n     */\\n    function unwrapTime(uint256 resurrectionTime) internal view {\\n        // revert if too early\\n        if (resurrectionTime > block.timestamp) {\\n            revert LibErrors.TooEarlyToUnwrap(\\n                resurrectionTime,\\n                block.timestamp\\n            );\\n        }\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // revert if too late\\n        if (resurrectionTime + s.gracePeriod < block.timestamp) {\\n            revert LibErrors.TooLateToUnwrap(\\n                resurrectionTime,\\n                s.gracePeriod,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if the archaeologist exists on the sarcophagus.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The boolean true if the archaeologist exists on the sarcophagus\\n    function archaeologistExistsOnSarc(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // If the doubleHashedShard on an archaeologist is 0 (which is its default value),\\n        // then the archaeologist doesn't exist on the sarcophagus\\n        return\\n            s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist]\\n                .unencryptedShardDoubleHash != 0;\\n    }\\n\\n    /// @notice Checks if an archaeologist profile exists and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check existence of\\n    function revertIfArchProfileExists(address archaeologist)\\n        internal\\n        view\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(\\n                false,\\n                archaeologist\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if an archaeologist profile doesn't exist and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check lack of existence of\\n    function revertIfArchProfileDoesNotExist(address archaeologist)\\n        internal\\n        view\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (!s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(\\n                true,\\n                archaeologist\\n            );\\n        }\\n    }\\n\\n    /// @notice Gets an archaeologist given the sarcophagus identifier and the\\n    /// archaeologist's address.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The archaeologist\\n    function getArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (LibTypes.ArchaeologistStorage memory)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return s.sarcophagusArchaeologists[sarcoId][archaeologist];\\n    }\\n\\n    /// @notice Calculates the protocol fees to be taken from the embalmer.\\n    /// @return The protocol fees amount\\n    function calculateProtocolFees(uint256 totalDiggingFees) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return (totalDiggingFees * s.protocolFeeBasePercentage) / 100;\\n    }\\n}\\n\",\"keccak256\":\"0x847c25a01b73ab54cd375de984d05b755123438174ca298d2fb9970cedeb7d30\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n// Global storage for the app. Can be accessed in facets and in libraries\\nstruct AppStorage {\\n    IERC20 sarcoToken;\\n    // The percentage (i.e. 1 = 1%) of a sarcophagus' total digging fees that will be collected on\\n    // createSarcophagus and rewrapSarcophagus, paid by the embalmer\\n    uint256 protocolFeeBasePercentage;\\n    // The amount of protocol fees currently stored on the contract\\n    uint256 totalProtocolFees;\\n    // grace period an archaeologist is given to resurrect a sarcophagus after the resurrection time\\n    uint256 gracePeriod;\\n    // threshold after which archaeologist signatures on sarcophagus params expire and the sarcophagus must be renegotiated\\n    uint256 expirationThreshold;\\n    // sarcophagi\\n    bytes32[] sarcophagusIdentifiers;\\n    // archaeologist profiles\\n    address[] archaeologistProfileAddresses;\\n    mapping(address => LibTypes.ArchaeologistProfile) archaeologistProfiles;\\n\\n    // archaeologistSarcoSuccesses is needed by the clean function\\n    // to lookup whether an archaeologist has completed an unwrapping\\n    mapping(address => mapping(bytes32 => bool)) archaeologistSarcoSuccesses;\\n\\n    // Archaeologist reputation statistics\\n    mapping(address => bytes32[]) archaeologistSuccesses;\\n    mapping(address => bytes32[]) archaeologistAccusals;\\n    mapping(address => bytes32[]) archaeologistCleanups;\\n\\n    // Track how much archaeologists have made. To be credited and debited\\n    // as archaeologists fulfill their duties and withdraw their rewards\\n    mapping(address => uint256) archaeologistRewards;\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n    // sarcophagus ownerships\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n    // Mapping of unencrypted shard double hashes to archaeologists who are\\n    // responsible for them. Needed to optimise Accuse algo - unencrypted shard is\\n    // double hashed and used as a constant O(1) lookup here\\n    mapping(bytes32 => address) doubleHashedShardArchaeologists;\\n    // A mapping used to store an archaeologist's data on a sarcophagus.\\n    // Digging fees, storage fees, and the hashed shards of the\\n    // archaeologists all need to be stored per sarcophagus. This mapping of a\\n    // mapping stores the archaeologist's data we need per sarcophagus.\\n    // Example usage (to retrieve the digging fees an archaeologist may claim on some sarcophagus):\\n    //   LibTypes.ArchaeologistStorage bondedArchaeologist = sarcophagusArchaeologists[sarcoId][archAddress];\\n    //   uint256 diggingFees = bondedArchaeologist.diggingFees;\\n    mapping(bytes32 => mapping(address => LibTypes.ArchaeologistStorage)) sarcophagusArchaeologists;\\n}\\n\\nlibrary LibAppStorage {\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        // Set the position of our struct in contract storage\\n        // Since AppStorage s is the first and only state variable declared in\\n        // facets its position in contract storage is 0\\n        assembly {\\n            s.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8344e9d5a7574c1602c4f854e19aa58c255311a057346307663fa56e8b6f5f08\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f9c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630c4c35f014610067578063364e080114610083578063449f11a61461009f5780636a5ac74c146100bb5780638d58642a146100d7578063c885bc58146100f3575b600080fd5b610081600480360381019061007c91906117d2565b6100fd565b005b61009d60048036038101906100989190611855565b610299565b005b6100b960048036038101906100b491906117d2565b6103a0565b005b6100d560048036038101906100d09190611855565b610609565b005b6100f160048036038101906100ec9190611959565b610712565b005b6100fb610a05565b005b61010633610b86565b60008060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050848160010190805190602001906101639291906114ee565b50838160020181905550828160030181905550600082111561022f576101893383610c2c565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016101ea93929190611a05565b6020604051808303816000875af1158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190611a74565b505b3373ffffffffffffffffffffffffffffffffffffffff167f4df9330dcb4af4b522d063da8a473d6711cdd390feef75f059a663a76c2701398260010183600201548460030154856004015460405161028a9493929190611ba7565b60405180910390a25050505050565b6102a233610b86565b6102ac3382610c98565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161030b929190611bf3565b6020604051808303816000875af115801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190611a74565b503373ffffffffffffffffffffffffffffffffffffffff167fd91b1e491a880123721b161dbbf8249668b0c546077d7ba4d0016441ca9d8f45826040516103959190611c1c565b60405180910390a250565b6103a933610dd3565b60006040518060c0016040528060011515815260200186815260200185815260200184815260200183815260200160008152509050600082111561048d576000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161044893929190611a05565b6020604051808303816000875af1158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b9190611a74565b505b80600060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101908051906020019061050c9291906114ee565b5060408201518160020155606082015181600301556080820151816004015560a082015181600501559050506000600601339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fec728a18db560dc21e59ae36132eb1e1c1b00d056a88ee755e0940e471ad591e82602001518360400151846060015185608001516040516105fa9493929190611cae565b60405180910390a25050505050565b61061233610b86565b61061c3382610c2c565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161067d93929190611a05565b6020604051808303816000875af115801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c09190611a74565b503373ffffffffffffffffffffffffffffffffffffffff167ff882a0847c57aefe6f6c7df2098dd0afd122eb0e886199e223651b8e45fda823826040516107079190611c1c565b60405180910390a250565b61071b82610e7a565b6107258233610fa6565b61072f8233610ffe565b61077057336040517f82881f030000000000000000000000000000000000000000000000000000000081526004016107679190611cfa565b60405180910390fd5b6107926000600d01600084815260200190815260200160002060020154611070565b600061079e8333611123565b9050600082805190602001206040516020016107ba9190611d24565b60405160208183030381529060405280519060200120905081604001518114610820578282604001516040517fd6091bc2000000000000000000000000000000000000000000000000000000008152600401610817929190611d94565b60405180910390fd5b826000601201600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301908051906020019061088a929190611574565b50610895843361124d565b6001600060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff021916908315150217905550600060090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084908060018154018082558091505060019003906000526020600020016000909190919091505581600001516000600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109c09190611df3565b92505081905550837f2a1e0100e3bcf67538d8408f2592de3731b8b40f8c6d7dd813e355c7b73848d8846040516109f79190611e49565b60405180910390a250505050565b600080600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610af1929190611bf3565b6020604051808303816000875af1158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190611a74565b503373ffffffffffffffffffffffffffffffffffffffff167fbc84835063c693975166f00cffb19f01a94c2db55b1bf259238c5da3594e506682604051610b7b9190611c1c565b60405180910390a250565b6000610b9061138c565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610c28576001826040517f2eeb3571000000000000000000000000000000000000000000000000000000008152600401610c1f929190611e7a565b60405180910390fd5b5050565b6000610c3661138c565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254610c8c9190611df3565b92505081905550505050565b6000610ca261138c565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154821115610d73578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154826040517fa4e3bead000000000000000000000000000000000000000000000000000000008152600401610d6a929190611ea3565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254610dc79190611ecc565b92505081905550505050565b6000610ddd61138c565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615610e76576000826040517f2eeb3571000000000000000000000000000000000000000000000000000000008152600401610e6d929190611e7a565b60405180910390fd5b5050565b6000610e8461138c565b905060006007811115610e9a57610e99611f00565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff166007811115610ed257610ed1611f00565b5b03610f1457816040517f018da688000000000000000000000000000000000000000000000000000000008152600401610f0b9190611d24565b60405180910390fd5b60016007811115610f2857610f27611f00565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff166007811115610f6057610f5f611f00565b5b14610fa257816040517f7c6a6d70000000000000000000000000000000000000000000000000000000008152600401610f999190611d24565b60405180910390fd5b5050565b6000610fb28383611123565b60600151511115610ffa57806040517f1b933fa0000000000000000000000000000000000000000000000000000000008152600401610ff19190611cfa565b60405180910390fd5b5050565b60008061100961138c565b90506000801b81601201600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154141591505092915050565b428111156110b75780426040517f0674c5900000000000000000000000000000000000000000000000000000000081526004016110ae929190611ea3565b60405180910390fd5b60006110c161138c565b9050428160030154836110d49190611df3565b101561111f57818160030154426040517f4fd4cfc500000000000000000000000000000000000000000000000000000000815260040161111693929190611f2f565b60405180910390fd5b5050565b61112b6115fa565b600061113561138c565b905080601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180546111c290611ad0565b80601f01602080910402602001604051908101604052809291908181526020018280546111ee90611ad0565b801561123b5780601f106112105761010080835404028352916020019161123b565b820191906000526020600020905b81548152906001019060200180831161121e57829003601f168201915b50505050508152505091505092915050565b600061125761138c565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180546112e690611ad0565b80601f016020809104026020016040519081016040528092919081815260200182805461131290611ad0565b801561135f5780601f106113345761010080835404028352916020019161135f565b820191906000526020600020905b81548152906001019060200180831161134257829003601f168201915b505050505081525050905060006113798260000151611391565b9050611385848261139b565b5050505050565b600090565b6000819050919050565b6113a582826113b3565b6113af8282610c2c565b5050565b60006113bd61138c565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015482111561148e578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401611485929190611ea3565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008282546114e29190611ecc565b92505081905550505050565b8280546114fa90611ad0565b90600052602060002090601f01602090048101928261151c5760008555611563565b82601f1061153557805160ff1916838001178555611563565b82800160010185558215611563579182015b82811115611562578251825591602001919060010190611547565b5b5090506115709190611625565b5090565b82805461158090611ad0565b90600052602060002090601f0160209004810192826115a257600085556115e9565b82601f106115bb57805160ff19168380011785556115e9565b828001600101855582156115e9579182015b828111156115e85782518255916020019190600101906115cd565b5b5090506115f69190611625565b5090565b6040518060800160405280600081526020016000815260200160008019168152602001606081525090565b5b8082111561163e576000816000905550600101611626565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116a982611660565b810181811067ffffffffffffffff821117156116c8576116c7611671565b5b80604052505050565b60006116db611642565b90506116e782826116a0565b919050565b600067ffffffffffffffff82111561170757611706611671565b5b61171082611660565b9050602081019050919050565b82818337600083830152505050565b600061173f61173a846116ec565b6116d1565b90508281526020810184848401111561175b5761175a61165b565b5b61176684828561171d565b509392505050565b600082601f83011261178357611782611656565b5b813561179384826020860161172c565b91505092915050565b6000819050919050565b6117af8161179c565b81146117ba57600080fd5b50565b6000813590506117cc816117a6565b92915050565b600080600080608085870312156117ec576117eb61164c565b5b600085013567ffffffffffffffff81111561180a57611809611651565b5b6118168782880161176e565b9450506020611827878288016117bd565b9350506040611838878288016117bd565b9250506060611849878288016117bd565b91505092959194509250565b60006020828403121561186b5761186a61164c565b5b6000611879848285016117bd565b91505092915050565b6000819050919050565b61189581611882565b81146118a057600080fd5b50565b6000813590506118b28161188c565b92915050565b600067ffffffffffffffff8211156118d3576118d2611671565b5b6118dc82611660565b9050602081019050919050565b60006118fc6118f7846118b8565b6116d1565b9050828152602081018484840111156119185761191761165b565b5b61192384828561171d565b509392505050565b600082601f8301126119405761193f611656565b5b81356119508482602086016118e9565b91505092915050565b600080604083850312156119705761196f61164c565b5b600061197e858286016118a3565b925050602083013567ffffffffffffffff81111561199f5761199e611651565b5b6119ab8582860161192b565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119e0826119b5565b9050919050565b6119f0816119d5565b82525050565b6119ff8161179c565b82525050565b6000606082019050611a1a60008301866119e7565b611a2760208301856119e7565b611a3460408301846119f6565b949350505050565b60008115159050919050565b611a5181611a3c565b8114611a5c57600080fd5b50565b600081519050611a6e81611a48565b92915050565b600060208284031215611a8a57611a8961164c565b5b6000611a9884828501611a5f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ae857607f821691505b602082108103611afb57611afa611aa1565b5b50919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008154611b3481611ad0565b611b3e8186611b01565b94506001821660008114611b595760018114611b6b57611b9e565b60ff1983168652602086019350611b9e565b611b7485611b12565b60005b83811015611b9657815481890152600182019150602081019050611b77565b808801955050505b50505092915050565b60006080820190508181036000830152611bc18187611b27565b9050611bd060208301866119f6565b611bdd60408301856119f6565b611bea60608301846119f6565b95945050505050565b6000604082019050611c0860008301856119e7565b611c1560208301846119f6565b9392505050565b6000602082019050611c3160008301846119f6565b92915050565b600081519050919050565b60005b83811015611c60578082015181840152602081019050611c45565b83811115611c6f576000848401525b50505050565b6000611c8082611c37565b611c8a8185611b01565b9350611c9a818560208601611c42565b611ca381611660565b840191505092915050565b60006080820190508181036000830152611cc88187611c75565b9050611cd760208301866119f6565b611ce460408301856119f6565b611cf160608301846119f6565b95945050505050565b6000602082019050611d0f60008301846119e7565b92915050565b611d1e81611882565b82525050565b6000602082019050611d396000830184611d15565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611d6682611d3f565b611d708185611d4a565b9350611d80818560208601611c42565b611d8981611660565b840191505092915050565b60006040820190508181036000830152611dae8185611d5b565b9050611dbd6020830184611d15565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611dfe8261179c565b9150611e098361179c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e3e57611e3d611dc4565b5b828201905092915050565b60006020820190508181036000830152611e638184611d5b565b905092915050565b611e7481611a3c565b82525050565b6000604082019050611e8f6000830185611e6b565b611e9c60208301846119e7565b9392505050565b6000604082019050611eb860008301856119f6565b611ec560208301846119f6565b9392505050565b6000611ed78261179c565b9150611ee28361179c565b925082821015611ef557611ef4611dc4565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000606082019050611f4460008301866119f6565b611f5160208301856119f6565b611f5e60408301846119f6565b94935050505056fea264697066735822122092733ac312331db6d6980099b0f1a5b6cf3dc23eacccc77260e84ecdcd8d78a064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630c4c35f014610067578063364e080114610083578063449f11a61461009f5780636a5ac74c146100bb5780638d58642a146100d7578063c885bc58146100f3575b600080fd5b610081600480360381019061007c91906117d2565b6100fd565b005b61009d60048036038101906100989190611855565b610299565b005b6100b960048036038101906100b491906117d2565b6103a0565b005b6100d560048036038101906100d09190611855565b610609565b005b6100f160048036038101906100ec9190611959565b610712565b005b6100fb610a05565b005b61010633610b86565b60008060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050848160010190805190602001906101639291906114ee565b50838160020181905550828160030181905550600082111561022f576101893383610c2c565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016101ea93929190611a05565b6020604051808303816000875af1158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190611a74565b505b3373ffffffffffffffffffffffffffffffffffffffff167f4df9330dcb4af4b522d063da8a473d6711cdd390feef75f059a663a76c2701398260010183600201548460030154856004015460405161028a9493929190611ba7565b60405180910390a25050505050565b6102a233610b86565b6102ac3382610c98565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161030b929190611bf3565b6020604051808303816000875af115801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190611a74565b503373ffffffffffffffffffffffffffffffffffffffff167fd91b1e491a880123721b161dbbf8249668b0c546077d7ba4d0016441ca9d8f45826040516103959190611c1c565b60405180910390a250565b6103a933610dd3565b60006040518060c0016040528060011515815260200186815260200185815260200184815260200183815260200160008152509050600082111561048d576000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161044893929190611a05565b6020604051808303816000875af1158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b9190611a74565b505b80600060070160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101908051906020019061050c9291906114ee565b5060408201518160020155606082015181600301556080820151816004015560a082015181600501559050506000600601339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fec728a18db560dc21e59ae36132eb1e1c1b00d056a88ee755e0940e471ad591e82602001518360400151846060015185608001516040516105fa9493929190611cae565b60405180910390a25050505050565b61061233610b86565b61061c3382610c2c565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161067d93929190611a05565b6020604051808303816000875af115801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c09190611a74565b503373ffffffffffffffffffffffffffffffffffffffff167ff882a0847c57aefe6f6c7df2098dd0afd122eb0e886199e223651b8e45fda823826040516107079190611c1c565b60405180910390a250565b61071b82610e7a565b6107258233610fa6565b61072f8233610ffe565b61077057336040517f82881f030000000000000000000000000000000000000000000000000000000081526004016107679190611cfa565b60405180910390fd5b6107926000600d01600084815260200190815260200160002060020154611070565b600061079e8333611123565b9050600082805190602001206040516020016107ba9190611d24565b60405160208183030381529060405280519060200120905081604001518114610820578282604001516040517fd6091bc2000000000000000000000000000000000000000000000000000000008152600401610817929190611d94565b60405180910390fd5b826000601201600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301908051906020019061088a929190611574565b50610895843361124d565b6001600060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff021916908315150217905550600060090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084908060018154018082558091505060019003906000526020600020016000909190919091505581600001516000600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109c09190611df3565b92505081905550837f2a1e0100e3bcf67538d8408f2592de3731b8b40f8c6d7dd813e355c7b73848d8846040516109f79190611e49565b60405180910390a250505050565b600080600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600c0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610af1929190611bf3565b6020604051808303816000875af1158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190611a74565b503373ffffffffffffffffffffffffffffffffffffffff167fbc84835063c693975166f00cffb19f01a94c2db55b1bf259238c5da3594e506682604051610b7b9190611c1c565b60405180910390a250565b6000610b9061138c565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610c28576001826040517f2eeb3571000000000000000000000000000000000000000000000000000000008152600401610c1f929190611e7a565b60405180910390fd5b5050565b6000610c3661138c565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254610c8c9190611df3565b92505081905550505050565b6000610ca261138c565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154821115610d73578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154826040517fa4e3bead000000000000000000000000000000000000000000000000000000008152600401610d6a929190611ea3565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000828254610dc79190611ecc565b92505081905550505050565b6000610ddd61138c565b90508060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615610e76576000826040517f2eeb3571000000000000000000000000000000000000000000000000000000008152600401610e6d929190611e7a565b60405180910390fd5b5050565b6000610e8461138c565b905060006007811115610e9a57610e99611f00565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff166007811115610ed257610ed1611f00565b5b03610f1457816040517f018da688000000000000000000000000000000000000000000000000000000008152600401610f0b9190611d24565b60405180910390fd5b60016007811115610f2857610f27611f00565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff166007811115610f6057610f5f611f00565b5b14610fa257816040517f7c6a6d70000000000000000000000000000000000000000000000000000000008152600401610f999190611d24565b60405180910390fd5b5050565b6000610fb28383611123565b60600151511115610ffa57806040517f1b933fa0000000000000000000000000000000000000000000000000000000008152600401610ff19190611cfa565b60405180910390fd5b5050565b60008061100961138c565b90506000801b81601201600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154141591505092915050565b428111156110b75780426040517f0674c5900000000000000000000000000000000000000000000000000000000081526004016110ae929190611ea3565b60405180910390fd5b60006110c161138c565b9050428160030154836110d49190611df3565b101561111f57818160030154426040517f4fd4cfc500000000000000000000000000000000000000000000000000000000815260040161111693929190611f2f565b60405180910390fd5b5050565b61112b6115fa565b600061113561138c565b905080601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180546111c290611ad0565b80601f01602080910402602001604051908101604052809291908181526020018280546111ee90611ad0565b801561123b5780601f106112105761010080835404028352916020019161123b565b820191906000526020600020905b81548152906001019060200180831161121e57829003601f168201915b50505050508152505091505092915050565b600061125761138c565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180546112e690611ad0565b80601f016020809104026020016040519081016040528092919081815260200182805461131290611ad0565b801561135f5780601f106113345761010080835404028352916020019161135f565b820191906000526020600020905b81548152906001019060200180831161134257829003601f168201915b505050505081525050905060006113798260000151611391565b9050611385848261139b565b5050505050565b600090565b6000819050919050565b6113a582826113b3565b6113af8282610c2c565b5050565b60006113bd61138c565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015482111561148e578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401611485929190611ea3565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008282546114e29190611ecc565b92505081905550505050565b8280546114fa90611ad0565b90600052602060002090601f01602090048101928261151c5760008555611563565b82601f1061153557805160ff1916838001178555611563565b82800160010185558215611563579182015b82811115611562578251825591602001919060010190611547565b5b5090506115709190611625565b5090565b82805461158090611ad0565b90600052602060002090601f0160209004810192826115a257600085556115e9565b82601f106115bb57805160ff19168380011785556115e9565b828001600101855582156115e9579182015b828111156115e85782518255916020019190600101906115cd565b5b5090506115f69190611625565b5090565b6040518060800160405280600081526020016000815260200160008019168152602001606081525090565b5b8082111561163e576000816000905550600101611626565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116a982611660565b810181811067ffffffffffffffff821117156116c8576116c7611671565b5b80604052505050565b60006116db611642565b90506116e782826116a0565b919050565b600067ffffffffffffffff82111561170757611706611671565b5b61171082611660565b9050602081019050919050565b82818337600083830152505050565b600061173f61173a846116ec565b6116d1565b90508281526020810184848401111561175b5761175a61165b565b5b61176684828561171d565b509392505050565b600082601f83011261178357611782611656565b5b813561179384826020860161172c565b91505092915050565b6000819050919050565b6117af8161179c565b81146117ba57600080fd5b50565b6000813590506117cc816117a6565b92915050565b600080600080608085870312156117ec576117eb61164c565b5b600085013567ffffffffffffffff81111561180a57611809611651565b5b6118168782880161176e565b9450506020611827878288016117bd565b9350506040611838878288016117bd565b9250506060611849878288016117bd565b91505092959194509250565b60006020828403121561186b5761186a61164c565b5b6000611879848285016117bd565b91505092915050565b6000819050919050565b61189581611882565b81146118a057600080fd5b50565b6000813590506118b28161188c565b92915050565b600067ffffffffffffffff8211156118d3576118d2611671565b5b6118dc82611660565b9050602081019050919050565b60006118fc6118f7846118b8565b6116d1565b9050828152602081018484840111156119185761191761165b565b5b61192384828561171d565b509392505050565b600082601f8301126119405761193f611656565b5b81356119508482602086016118e9565b91505092915050565b600080604083850312156119705761196f61164c565b5b600061197e858286016118a3565b925050602083013567ffffffffffffffff81111561199f5761199e611651565b5b6119ab8582860161192b565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119e0826119b5565b9050919050565b6119f0816119d5565b82525050565b6119ff8161179c565b82525050565b6000606082019050611a1a60008301866119e7565b611a2760208301856119e7565b611a3460408301846119f6565b949350505050565b60008115159050919050565b611a5181611a3c565b8114611a5c57600080fd5b50565b600081519050611a6e81611a48565b92915050565b600060208284031215611a8a57611a8961164c565b5b6000611a9884828501611a5f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ae857607f821691505b602082108103611afb57611afa611aa1565b5b50919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008154611b3481611ad0565b611b3e8186611b01565b94506001821660008114611b595760018114611b6b57611b9e565b60ff1983168652602086019350611b9e565b611b7485611b12565b60005b83811015611b9657815481890152600182019150602081019050611b77565b808801955050505b50505092915050565b60006080820190508181036000830152611bc18187611b27565b9050611bd060208301866119f6565b611bdd60408301856119f6565b611bea60608301846119f6565b95945050505050565b6000604082019050611c0860008301856119e7565b611c1560208301846119f6565b9392505050565b6000602082019050611c3160008301846119f6565b92915050565b600081519050919050565b60005b83811015611c60578082015181840152602081019050611c45565b83811115611c6f576000848401525b50505050565b6000611c8082611c37565b611c8a8185611b01565b9350611c9a818560208601611c42565b611ca381611660565b840191505092915050565b60006080820190508181036000830152611cc88187611c75565b9050611cd760208301866119f6565b611ce460408301856119f6565b611cf160608301846119f6565b95945050505050565b6000602082019050611d0f60008301846119e7565b92915050565b611d1e81611882565b82525050565b6000602082019050611d396000830184611d15565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611d6682611d3f565b611d708185611d4a565b9350611d80818560208601611c42565b611d8981611660565b840191505092915050565b60006040820190508181036000830152611dae8185611d5b565b9050611dbd6020830184611d15565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611dfe8261179c565b9150611e098361179c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e3e57611e3d611dc4565b5b828201905092915050565b60006020820190508181036000830152611e638184611d5b565b905092915050565b611e7481611a3c565b82525050565b6000604082019050611e8f6000830185611e6b565b611e9c60208301846119e7565b9392505050565b6000604082019050611eb860008301856119f6565b611ec560208301846119f6565b9392505050565b6000611ed78261179c565b9150611ee28361179c565b925082821015611ef557611ef4611dc4565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000606082019050611f4460008301866119f6565b611f5160208301856119f6565b611f5e60408301846119f6565b94935050505056fea264697066735822122092733ac312331db6d6980099b0f1a5b6cf3dc23eacccc77260e84ecdcd8d78a064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositFreeBond(uint256)": {
        "params": {
          "amount": "The amount to deposit"
        }
      },
      "registerArchaeologist(string,uint256,uint256,uint256)": {
        "params": {
          "freeBond": "How much bond the archaeologist wants to deposit during the register call (if any)",
          "maximumRewrapInterval": "The longest interval of time from a rewrap time the arch will accept for a resurrection",
          "minimumDiggingFee": "The archaeologist's minimum amount to accept for a digging fee",
          "peerId": "The libp2p identifier for the archaeologist"
        }
      },
      "unwrapSarcophagus(bytes32,bytes)": {
        "details": "Verifies that the unencrypted shard matches the hashedShard stored on chain and pays the archaeologist.",
        "params": {
          "sarcoId": "The identifier of the sarcophagus to unwrap",
          "unencryptedShard": "The archaeologist's corresponding unencrypted shard"
        }
      },
      "updateArchaeologist(string,uint256,uint256,uint256)": {
        "params": {
          "maximumRewrapInterval": "The longest interval of time from a rewrap time the arch will accept for a resurrection freeBond How much bond the archaeologist wants to deposit during the update call (if any)",
          "minimumDiggingFee": "The archaeologist's minimum amount to accept for a digging fee",
          "peerId": "The libp2p identifier for the archaeologist"
        }
      },
      "withdrawFreeBond(uint256)": {
        "params": {
          "amount": "The amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositFreeBond(uint256)": {
        "notice": "Deposits an archaeologist's free bond to the contract."
      },
      "registerArchaeologist(string,uint256,uint256,uint256)": {
        "notice": "Registers the archaeologist profile"
      },
      "unwrapSarcophagus(bytes32,bytes)": {
        "notice": "Unwraps the sarcophagus."
      },
      "updateArchaeologist(string,uint256,uint256,uint256)": {
        "notice": "Updates the archaeologist profile"
      },
      "withdrawFreeBond(uint256)": {
        "notice": "Withdraws an archaeologist's free bond from the contract."
      },
      "withdrawReward()": {
        "notice": "Withdraws all rewards from an archaeologist's reward pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1046,
        "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4551_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SarcophagusState)3869": {
        "encoding": "inplace",
        "label": "enum LibTypes.SarcophagusState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(ArchaeologistProfile)3920_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistProfile)3920_storage"
      },
      "t_mapping(t_address,t_struct(ArchaeologistStorage)3907_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistStorage)3907_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3907_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct LibTypes.ArchaeologistStorage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ArchaeologistStorage)3907_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Sarcophagus)3955_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibTypes.Sarcophagus)",
        "numberOfBytes": "32",
        "value": "t_struct(Sarcophagus)3955_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4551_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4475,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcoToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 4477,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "protocolFeeBasePercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4479,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "totalProtocolFees",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4481,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "gracePeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4483,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "expirationThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4486,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcophagusIdentifiers",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4489,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistProfileAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4494,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistProfiles",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(ArchaeologistProfile)3920_storage)"
          },
          {
            "astId": 4500,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistSarcoSuccesses",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
          },
          {
            "astId": 4505,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistSuccesses",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4510,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistAccusals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4515,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistCleanups",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4519,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistRewards",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4524,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcophagi",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_bytes32,t_struct(Sarcophagus)3955_storage)"
          },
          {
            "astId": 4529,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "embalmerSarcophagi",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4534,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistSarcophagi",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4539,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "recipientSarcophagi",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4543,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "doubleHashedShardArchaeologists",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 4550,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcophagusArchaeologists",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3907_storage))"
          }
        ],
        "numberOfBytes": "608"
      },
      "t_struct(ArchaeologistProfile)3920_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistProfile",
        "members": [
          {
            "astId": 3909,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3911,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3913,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "minimumDiggingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3915,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3917,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "freeBond",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3919,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "cursedBond",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ArchaeologistStorage)3907_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistStorage",
        "members": [
          {
            "astId": 3900,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "diggingFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3902,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "diggingFeesPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3904,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "unencryptedShardDoubleHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 3906,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "unencryptedShard",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Sarcophagus)3955_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.Sarcophagus",
        "members": [
          {
            "astId": 3935,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3938,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(SarcophagusState)3869"
          },
          {
            "astId": 3940,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "minShards",
            "offset": 1,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 3942,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "resurrectionTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3944,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3947,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "arweaveTxIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3949,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "embalmer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3951,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3954,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologists",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}