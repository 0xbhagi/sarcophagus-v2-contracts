{
  "address": "0xf73f5dF4Ea06a5A1c943F3b1AF1450422F936807",
  "abi": [
    {
      "inputs": [],
      "name": "AccuseIncorrectProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shardsProvided",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "minShards",
          "type": "uint8"
        }
      ],
      "name": "AccuseNotEnoughProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursedBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughCursedBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SarcophagusIsUnwrappable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SarcophagusNotCleanable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "accuser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accuserBondReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "embalmerBondReward",
          "type": "uint256"
        }
      ],
      "name": "AccuseArchaeologist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cleaner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cleanerBondReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "embalmerBondReward",
          "type": "uint256"
        }
      ],
      "name": "CleanUpSarcophagus",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "unencryptedShardHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "paymentAddress",
          "type": "address"
        }
      ],
      "name": "accuse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "paymentAddress",
          "type": "address"
        }
      ],
      "name": "clean",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xac45a1e7826ad2e50d2732a3fdfa256fb706a500ee3446cef65a5957dcc3c811",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x16C5D075eC8F7fcA5FD893023CCFb45a0f7CDe8a",
    "contractAddress": null,
    "transactionIndex": 35,
    "gasUsed": "1290906",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcfb9e0d3f516acf039470fd4609ec576b03609ee834c8de370d35509e3ee013a",
    "transactionHash": "0xac45a1e7826ad2e50d2732a3fdfa256fb706a500ee3446cef65a5957dcc3c811",
    "logs": [],
    "blockNumber": 7960203,
    "cumulativeGasUsed": "5268409",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e93e69833cc2861ad35b8a71c75835fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccuseIncorrectProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shardsProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"minShards\",\"type\":\"uint8\"}],\"name\":\"AccuseNotEnoughProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursedBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughCursedBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SarcophagusIsUnwrappable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SarcophagusNotCleanable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accuser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accuserBondReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"embalmerBondReward\",\"type\":\"uint256\"}],\"name\":\"AccuseArchaeologist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cleanerBondReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"embalmerBondReward\",\"type\":\"uint256\"}],\"name\":\"CleanUpSarcophagus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"unencryptedShardHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"name\":\"accuse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accuse(bytes32,bytes32[],address)\":{\"params\":{\"paymentAddress\":\"the address to which rewards should be sent if successful\",\"sarcoId\":\"The identifier of the sarcophagus having leaked shards\",\"unencryptedShardHashes\":\"At least 'm' unencrypted shard hashes as proof of bad behaviour\"}},\"clean(bytes32,address)\":{\"params\":{\"paymentAddress\":\"The address to which rewards will be sent\",\"sarcoId\":\"The identifier of the sarcophagus to clean\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accuse(bytes32,bytes32[],address)\":{\"notice\":\"Accuse archaeologoists of bad behaviour, by providing proof of leaked unencrypted shards before a sarcophagus is ready to be unwrapped. The minumum number of shards required to unwrap the sarcophagus should be provided for a a successful accusal. of the cursed bonds of the archs back to them, and un-curses their bonds.\"},\"clean(bytes32,address)\":{\"notice\":\"Close a sarcophagus that has not been unwrapped within its grace period\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ThirdPartyFacet.sol\":\"ThirdPartyFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/facets/ThirdPartyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\nimport {LibBonds} from \\\"../libraries/LibBonds.sol\\\";\\nimport {LibUtils} from \\\"../libraries/LibUtils.sol\\\";\\nimport {AppStorage} from \\\"../storage/LibAppStorage.sol\\\";\\n\\ncontract ThirdPartyFacet {\\n    AppStorage internal s;\\n\\n    event AccuseArchaeologist(\\n        bytes32 indexed sarcoId,\\n        address indexed accuser,\\n        uint256 accuserBondReward,\\n        uint256 embalmerBondReward\\n    );\\n\\n    event CleanUpSarcophagus(\\n        bytes32 indexed sarcoId,\\n        address indexed cleaner,\\n        uint256 cleanerBondReward,\\n        uint256 embalmerBondReward\\n    );\\n\\n    /// @notice Close a sarcophagus that has not been unwrapped within its grace period\\n    /// @param sarcoId The identifier of the sarcophagus to clean\\n    /// @param paymentAddress The address to which rewards will be sent\\n    function clean(bytes32 sarcoId, address paymentAddress) external {\\n        LibUtils.revertIfNotExistOrInactive(sarcoId);\\n\\n        LibTypes.Sarcophagus storage sarco = s.sarcophagi[sarcoId];\\n\\n        // Make sure the sarco is cleanable\\n        if (block.timestamp < s.gracePeriod + sarco.resurrectionTime) {\\n            revert LibErrors.SarcophagusNotCleanable();\\n        }\\n\\n        // Figure out which archaeoligists did not fulfil their duties;\\n        // accumulate their digging fees\\n        address[] memory archAddresses = sarco.archaeologists;\\n\\n        uint256 totalCursedBond;\\n        uint256 totalDiggingFee;\\n\\n        for (uint256 i = 0; i < archAddresses.length; i++) {\\n            bool didNotUnwrap = s.archaeologistSarcoSuccesses[archAddresses[i]][\\n                sarcoId\\n            ] == false;\\n\\n            if (didNotUnwrap) {\\n                LibTypes.ArchaeologistStorage memory defaulter = s\\n                    .sarcophagusArchaeologists[sarcoId][archAddresses[i]];\\n\\n                totalDiggingFee += defaulter.diggingFee;\\n\\n                uint256 cursedBond = LibBonds.calculateCursedBond(\\n                    defaulter.diggingFee\\n                );\\n\\n                totalCursedBond += cursedBond;\\n\\n                // decrease the defaulter's cursed bond\\n                LibBonds.decreaseCursedBond(archAddresses[i], cursedBond);\\n\\n                // Save the failure to unwrap against the archaeologist\\n                s.archaeologistCleanups[archAddresses[i]].push(sarcoId);\\n            }\\n        }\\n\\n        (\\n            uint256 cleanerBondReward,\\n            uint256 embalmerBondReward\\n        ) = _distributeLoot(\\n                paymentAddress,\\n                sarco,\\n                totalCursedBond,\\n                totalDiggingFee\\n            );\\n\\n        sarco.state = LibTypes.SarcophagusState.Cleaned;\\n\\n        emit CleanUpSarcophagus(\\n            sarcoId,\\n            msg.sender,\\n            cleanerBondReward,\\n            embalmerBondReward\\n        );\\n    }\\n\\n    /**\\n     * @notice Accuse archaeologoists of bad behaviour, by providing proof of leaked\\n     * unencrypted shards before a sarcophagus is ready to be unwrapped. The minumum\\n     * number of shards required to unwrap the sarcophagus should be provided for a\\n     * a successful accusal.\\n     * of the cursed bonds of the archs back to them, and un-curses their bonds.\\n     * @param sarcoId The identifier of the sarcophagus having leaked shards\\n     * @param unencryptedShardHashes At least 'm' unencrypted shard hashes as proof of bad behaviour\\n     * @param paymentAddress the address to which rewards should be sent if successful\\n     */\\n    function accuse(\\n        bytes32 sarcoId,\\n        bytes32[] memory unencryptedShardHashes,\\n        address paymentAddress\\n    ) external {\\n        LibUtils.revertIfNotExistOrInactive(sarcoId);\\n\\n        LibTypes.Sarcophagus storage sarco = s.sarcophagi[sarcoId];\\n\\n        if (sarco.resurrectionTime < block.timestamp) {\\n            revert LibErrors.SarcophagusIsUnwrappable();\\n        }\\n\\n        if (unencryptedShardHashes.length < sarco.minShards) {\\n            revert LibErrors.AccuseNotEnoughProof(\\n                unencryptedShardHashes.length,\\n                sarco.minShards\\n            );\\n        }\\n\\n        address[] memory accusedArchAddresses = new address[](\\n            unencryptedShardHashes.length\\n        );\\n\\n        // For each provided shard hash, check if its hash matches one on storage. If so, flag that\\n        // archaeologist as accusable\\n        uint256 diggingFeesToBeDistributed = 0;\\n        uint256 totalCursedBond = 0;\\n        uint256 pos = 0;\\n        for (uint256 i = 0; i < unencryptedShardHashes.length; i++) {\\n            bytes32 shardDoubleHash = keccak256(\\n                abi.encode(unencryptedShardHashes[i])\\n            );\\n\\n            address matchingArchAddr = s.doubleHashedShardArchaeologists[\\n                shardDoubleHash\\n            ];\\n\\n            LibTypes.ArchaeologistStorage storage badArch = s\\n                .sarcophagusArchaeologists[sarcoId][matchingArchAddr];\\n\\n            if (badArch.unencryptedShardDoubleHash == shardDoubleHash) {\\n                accusedArchAddresses[pos++] = matchingArchAddr;\\n\\n                uint256 cursedBond = LibBonds.calculateCursedBond(\\n                    badArch.diggingFee\\n                );\\n\\n                diggingFeesToBeDistributed += badArch.diggingFee;\\n                totalCursedBond += cursedBond;\\n\\n                LibBonds.decreaseCursedBond(matchingArchAddr, cursedBond);\\n\\n                // Save the accusal against the archaeologist\\n                s.archaeologistAccusals[matchingArchAddr].push(sarcoId);\\n            } else {\\n                revert LibErrors.AccuseIncorrectProof();\\n            }\\n        }\\n\\n        // At this point, we need to filter out unaccused archs in order to reimburse them.\\n        address[] memory bondedArchaeologists = s\\n            .sarcophagi[sarcoId]\\n            .archaeologists;\\n\\n        for (uint256 i = 0; i < bondedArchaeologists.length; i++) {\\n            // Need to check each archaeologist address on the sarcophagus\\n            bool isUnaccused = true;\\n\\n            for (uint256 j = 0; j < accusedArchAddresses.length; j++) {\\n                // For each arch address, if found in accusedArchAddresses,\\n                // then don't add to unaccusedArchsAddresses\\n                if (bondedArchaeologists[i] == accusedArchAddresses[j]) {\\n                    isUnaccused = false;\\n                    break;\\n                }\\n            }\\n\\n            // If this arch address wasn't in the accused list, free it from its curse\\n            if (isUnaccused) {\\n                // There are technically no rewards here, since the sarcophagus\\n                // has been compromised, so here this effectively merely resets\\n                // the state of the non-malicious archaeologists, as if they never\\n                // bonded to this sarcophagus in the first place.\\n                //\\n                // Of course, whatever rewards they might have gained in previous\\n                // rewraps remains theirs.\\n                LibBonds.freeArchaeologist(sarcoId, bondedArchaeologists[i]);\\n            }\\n        }\\n\\n        (\\n            uint256 accuserBondReward,\\n            uint256 embalmerBondReward\\n        ) = _distributeLoot(\\n                paymentAddress,\\n                sarco,\\n                totalCursedBond,\\n                diggingFeesToBeDistributed\\n            );\\n\\n        sarco.state = LibTypes.SarcophagusState.Accused;\\n\\n        emit AccuseArchaeologist(\\n            sarcoId,\\n            msg.sender,\\n            accuserBondReward,\\n            embalmerBondReward\\n        );\\n    }\\n\\n    /**\\n     * @notice Takes a sarcophagus's cursed bond, splits it in half, and sends\\n     * to paymentAddress and embalmer\\n     * @param paymentAddress payment address for the transaction caller\\n     * @param sarc the sarcophagus to operate on\\n     * @param totalCursedBond the sum of cursed bonds of all archs that failed to fulfil their duties\\n     * @param totalDiggingFee the sum of digging fees of all archs that failed to fulfil their duties\\n     * @return halfToSender the amount of SARCO token going to transaction\\n     * sender\\n     * @return halfToEmbalmer the amount of SARCO token going to embalmer\\n     */\\n    function _distributeLoot(\\n        address paymentAddress,\\n        LibTypes.Sarcophagus storage sarc,\\n        uint256 totalCursedBond,\\n        uint256 totalDiggingFee\\n    ) private returns (uint256, uint256) {\\n        // split the sarcophagus's cursed bond into two halves\\n        uint256 halfToEmbalmer = totalCursedBond / 2;\\n        uint256 halfToSender = totalCursedBond - halfToEmbalmer;\\n\\n        // transfer the cursed half, plus digging fee to the\\n        // embalmer\\n        s.sarcoToken.transfer(sarc.embalmer, totalDiggingFee + halfToEmbalmer);\\n\\n        // transfer the other half of the cursed bond to the transaction caller\\n        s.sarcoToken.transfer(paymentAddress, halfToSender);\\n\\n        return (halfToSender, halfToEmbalmer);\\n    }\\n\\n    function _hashHelper(bytes memory data) private pure returns (bytes32) {\\n        return keccak256(data);\\n    }\\n}\\n\",\"keccak256\":\"0x535b6ef05b3d884017fa3c38102ef54ea1bcde7ad79e1cd7d598c189a148d81d\",\"license\":\"Unlicense\"},\"contracts/libraries/LibBonds.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\nlibrary LibBonds {\\n    /// @notice Calculates the cursed bond that an archaeologist needs to lock\\n    /// up\\n    /// @dev The cursed bond amount is the digging fee\\n    /// @param diggingFee The digging fee of the sarcophagus\\n    /// @return The amount of cursed bond\\n    function calculateCursedBond(uint256 diggingFee)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // TODO: We dont need this function unless we implement a better algorithm\\n        // for calculating the cursed bond\\n        // Anywhere this method is used should be replaced with just the digging fee\\n        return diggingFee;\\n    }\\n\\n    /// @notice Decreases the amount stored in the freeBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's free bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function decreaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current free bond\\n        if (amount > s.archaeologistProfiles[archaeologist].freeBond) {\\n            revert LibErrors.NotEnoughFreeBond(\\n                s.archaeologistProfiles[archaeologist].freeBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the freeBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function increaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the free bond amount\\n        s.archaeologistProfiles[archaeologist].freeBond += amount;\\n    }\\n\\n    /// @notice Decreases the amount stored in the cursedBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's cursed bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function decreaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current cursed bond\\n        if (amount > s.archaeologistProfiles[archaeologist].cursedBond) {\\n            revert LibErrors.NotEnoughCursedBond(\\n                s.archaeologistProfiles[archaeologist].cursedBond,\\n                amount\\n            );\\n        }\\n\\n        // Decrease the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the cursedBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function increaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the cursed bond amount\\n        s.archaeologistProfiles[archaeologist].cursedBond += amount;\\n    }\\n\\n    /// @notice Locks up the archaeologist's bond, decreasing the\\n    /// archaeologist's free bond by an amount and increasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to lock up\\n    function lockUpBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the free bond amount\\n        decreaseFreeBond(archaeologist, amount);\\n\\n        // Increase the cursed bond amount\\n        increaseCursedBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Unlocks the archaeologist's bond, increasing the\\n    /// archaeologist's free bond by an amount and decreasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to unlock\\n    function unlockBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the cursed bond amount\\n        decreaseCursedBond(archaeologist, amount);\\n\\n        // Increase the free bond amount\\n        increaseFreeBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and curses them (locks\\n    /// up the free bond).\\n    /// @param sarcoId the identifier of the sarcophagus to bond the archaeologist with\\n    /// @param archaeologist the address of the archaeologist to curse\\n    function curseArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee\\n        );\\n\\n        // Lock up the archaeologist's bond by the cursed bond amount\\n        lockUpBond(archaeologist, cursedBondAmount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and frees them\\n    /// (unlocks the cursed bond).\\n    /// @param sarcoId the identifier of the sarcophagus to free the archaologist from\\n    /// @param archaeologist the address of the archaeologist to free\\n    function freeArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee\\n        );\\n\\n        // Free up the archaeologist's locked bond\\n        unlockBond(archaeologist, cursedBondAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x18f939f2a764ed05d12fd6ffa9e511718ab1a723d3bfda2d0e2a3cc0c1889084\",\"license\":\"Unlicense\"},\"contracts/libraries/LibErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of Errors\\n * @notice This library defines all of the Errors that the Sarcophagus system\\n * uses.\\n */\\nlibrary LibErrors {\\n    error AccuseNotEnoughProof(uint256 shardsProvided, uint8 minShards);\\n\\n    error AccuseIncorrectProof();\\n\\n    error ArchaeologistAlreadyUnwrapped(address archaeologist);\\n\\n    error ArchaeologistListNotUnique(address[] archaeologists);\\n\\n    error ArchaeologistNotOnSarcophagus(address archaeologist);\\n\\n    error ArchaeologistProfileExistsShouldBe(bool exists, address archaeologist);\\n\\n    error ArweaveTxIdsInvalid();\\n\\n    error DiggingFeeTooLow(uint256 diggingFee, address archaeologist);\\n\\n    error MinShardsGreaterThanArchaeologists(uint8 minShards);\\n\\n    error MinShardsZero();\\n\\n    error MaxResurrectionIntervalIsZero();\\n\\n    error NewResurrectionTimeInPast(uint256 newResurrectionTime);\\n\\n    error NewResurrectionTimeTooLarge(uint256 newResurrectionTime);\\n\\n    error NoArchaeologistsProvided();\\n\\n    error NotEnoughCursedBond(uint256 cursedBond, uint256 amount);\\n\\n    error NotEnoughFreeBond(uint256 freeBond, uint256 amount);\\n\\n    error NotEnoughReward(uint256 reward, uint256 amount);\\n\\n    error ResurrectionTimeInPast(uint256 resurrectionTime);\\n\\n    error ResurrectionTimeTooFarInFuture(uint256 resurrectionTime, uint256 sarcophagusMaximumRewrapInterval);\\n\\n    error SarcophagusAlreadyExists(bytes32 sarcoId);\\n\\n    error SarcophagusDoesNotExist(bytes32 sarcoId);\\n\\n    error SarcophagusInactive(bytes32 sarcoId);\\n\\n    error SenderNotEmbalmer(address sender, address embalmer);\\n\\n    error InvalidSignature(\\n    // address recovered from signature via ecrecover\\n        address recoveredAddress,\\n    // address we expected to have signed the data\\n        address expectedAddress\\n    );\\n\\n    error SignerNotArchaeologistOnSarcophagus(bytes32 sarcoId, address signer);\\n\\n    // Used when an attempt is made to accuse or rewrap after the resurrection time has already passed (so it's actually time to unwrap it)\\n    error SarcophagusIsUnwrappable();\\n\\n    // Used when an attempt is made to clean a sarcophagus before the grace period after the resurrection time has passed\\n    error SarcophagusNotCleanable();\\n\\n    error TooEarlyToUnwrap(uint256 resurrectionTime, uint256 currentTime);\\n\\n    error TooLateToUnwrap(\\n        uint256 resurrectionTime,\\n        uint256 gracePeriod,\\n        uint256 currentTime\\n    );\\n\\n    error UnencryptedShardHashMismatch(\\n        bytes unencryptedShard,\\n        bytes32 doubleHashedShard\\n    );\\n\\n    error SarcophagusParametersExpired(uint256 timestamp);\\n}\\n\\n\",\"keccak256\":\"0x3ebd897b208b998b087c16b72bfd527e9f45ea7dadc8c83ac8de50ce65b6c42c\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of defined structs\\n * @notice This library defines the various data models that the Sarcophagus\\n * system uses\\n */\\nlibrary LibTypes {\\n    // DoesNotExist must come first on the list to be the default value\\n    enum SarcophagusState {\\n        DoesNotExist,\\n        Active,\\n        Resurrecting,\\n        Resurrected,\\n        Buried,\\n        Cleaned,\\n        Accused,\\n        Failed\\n    }\\n\\n    // A struct of just the signature. This is used primarily by the\\n    // finalizeSarcophagus function for the arweave archaeologist. Note that,\\n    // unlike the regular archaeologists, the sarcophagus already stores the\\n    // single arweave archaeologist's address so there is no need to pass in the\\n    // address to the finalizeSarcophagus function.\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // Signature struct created to make passing in the signature argmuments into\\n    // finalizedSarcophagus easier and to avoid the \\\"stack too deep\\\" error.\\n    // Also attaching arachaeologist addresses so we can tie the signature back\\n    // to the address in finalizeSarcophagus.\\n    struct SignatureWithAccount {\\n        address account;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // SelectedArchaeologistData is the struct that is passed into the\\n    // initializeSarcophagus function. Even though we don't need each storage\\n    // fee of the archaeologist, the storage fee is included in the struct to\\n    // reduce the stack size within the function, preventing the \\\"stack too\\n    // deep\\\" error.\\n    struct SelectedArchaeologistData {\\n        address archAddress;\\n        uint256 diggingFee;\\n        bytes32 unencryptedShardDoubleHash;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // ArchaeologistStorage is the struct that is stored in AppStorage under the\\n    // sarcophagusArchaeologists mapping.\\n    //\\n    // The archaeologist address is left out since each archaeologist's address\\n    // is stored on the sarcophagus object as an array.\\n    //\\n    // The storage fee is left out because we only need to store the storage fee\\n    // of the archaeologist uploading to arweave, which will be stored directly\\n    // on the sarcophagus.\\n    struct ArchaeologistStorage {\\n        uint256 diggingFee;\\n        uint256 diggingFeesPaid;\\n        bytes32 unencryptedShardDoubleHash;\\n        bytes unencryptedShard;\\n    }\\n\\n    // ArchaeologistProfile is used to store archaeologist profile data\\n    struct ArchaeologistProfile {\\n        bool exists;\\n        string peerId;\\n        uint256 minimumDiggingFee;\\n        uint256 maximumRewrapInterval;\\n        uint256 freeBond;\\n        uint256 cursedBond;\\n    }\\n\\n    struct SarcophagusMemory {\\n        string name;\\n        address recipient;\\n        uint256 resurrectionTime;\\n        uint256 maximumRewrapInterval;\\n        uint8 minShards;\\n        uint256 timestamp;\\n    }\\n\\n    // The ArchaeologistStorage struct could be contained in this Sarcophagus\\n    // struct as a mapping, but it was put into it's own mapping\\n    // (sarcophagusArchaeologists) directly in AppStorage. Instead the\\n    // sarcophagus stores the addresses of each archaeologist added to it. This\\n    // was done to simplify the creation of a sarcophagus object in\\n    // initializeSarcophagus.\\n    struct Sarcophagus {\\n        string name;\\n        SarcophagusState state;\\n        uint8 minShards;\\n        uint256 resurrectionTime;\\n        uint256 maximumRewrapInterval;\\n        string[] arweaveTxIds;\\n        address embalmer;\\n        address recipientAddress;\\n        address[] archaeologists;\\n    }\\n\\n    struct MetadataAttributes {\\n        string sarcophagusName;\\n        uint256 diggingFee;\\n        uint256 resurrectionTime;\\n        uint256 diggingFeesPaid;\\n    }\\n\\n    // Only used in the ViewStateFacet to return statistics data.\\n    // Contains a list of sarcoIds for each category. We could simply return the counts of the\\n    // arrays but we are already storing the lists of sarcoIds so we may as well use them.\\n    struct ArchaeologistStatistics {\\n        uint256 successes;\\n        uint256 accusals;\\n        uint256 cleanups;\\n    }\\n}\\n\",\"keccak256\":\"0x282468eef51b2b686846664cea47b99a6eadc05a86564e1db590ede4f3c9464d\",\"license\":\"Unlicense\"},\"contracts/libraries/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\n/**\\n * @title Utility functions used within the Sarcophagus system\\n * @notice This library implements various functions that are used throughout\\n * Sarcophagus, mainly to DRY up the codebase\\n * @dev these functions are all stateless, public, pure/view\\n */\\nlibrary LibUtils {\\n    /**\\n     * @notice Reverts if the public key length is not exactly 64 bytes long\\n     * @param publicKey the key to check length of\\n     */\\n    function publicKeyLength(bytes memory publicKey) public pure {\\n        require(publicKey.length == 64, \\\"public key must be 64 bytes\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if the hash of singleHash does not equal doubleHash\\n     * @param doubleHash the hash to compare hash of singleHash to\\n     * @param singleHash the value to hash and compare against doubleHash\\n     */\\n    function hashCheck(bytes32 doubleHash, bytes memory singleHash)\\n        public\\n        pure\\n    {\\n        require(doubleHash == keccak256(singleHash), \\\"hashes do not match\\\");\\n    }\\n\\n    function archaeologistUnwrappedCheck(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n    {\\n        if (\\n            getArchaeologist(sarcoId, archaeologist).unencryptedShard.length > 0\\n        ) {\\n            revert LibErrors.ArchaeologistAlreadyUnwrapped(archaeologist);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reverts with `SarcophagusDoesNotExist` if the Sarcophagus does not exist,\\n     * or with `SarcophagusInactive` if the Sarcophagus exists but is not active.\\n     * @param sarcoId Identifier of the Sarcophagus\\n     */\\n    function revertIfNotExistOrInactive(bytes32 sarcoId) internal view {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (\\n            s.sarcophagi[sarcoId].state ==\\n            LibTypes.SarcophagusState.DoesNotExist\\n        ) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Active) {\\n            revert LibErrors.SarcophagusInactive(sarcoId);\\n        }\\n    }\\n\\n    /**\\n     * @notice The archaeologist needs to sign off on two pieces of data\\n     * to guarantee their unrwap will be successful\\n     *\\n     * @param unencryptedShardDoubleHash the double hash of the unencrypted shard\\n     * @param arweaveTxId the arweave TX ID that contains the archs encrypted shard\\n     * @param agreedMaximumRewrapInterval that the archaeologist has agreed to for the sarcophagus\\n     * @param timestamp that the archaeologist has agreed to for the sarcophagus\\n     * @param diggingFee that the archaeologist has agreed to for the sarcophagus\\n     * @param v signature element\\n     * @param r signature element\\n     * @param s signature element\\n     * @param account address to confirm signature of data came from\\n     */\\n    function verifyArchaeologistSignature(\\n        bytes32 unencryptedShardDoubleHash,\\n        string memory arweaveTxId,\\n        uint256 agreedMaximumRewrapInterval,\\n        uint256 timestamp,\\n        uint256 diggingFee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address account\\n    ) internal pure {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(arweaveTxId, unencryptedShardDoubleHash, agreedMaximumRewrapInterval, diggingFee, timestamp))\\n            )\\n        );\\n\\n        // Generate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        address recoveredAddress = ecrecover(messageHash, v, r, s);\\n\\n        if (recoveredAddress != account) {\\n            revert LibErrors.InvalidSignature(recoveredAddress, account);\\n        }\\n    }\\n\\n    /// @notice Returns the address that signed some data given the data and the\\n    /// signature.\\n    /// @param data the data to verify\\n    /// @param v signature element\\n    /// @param r signature element\\n    /// @param s signature element\\n    /// @return the address that signed the data\\n    function recoverAddress(\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        // It's highly recommended that a hash be passed into ecrecover\\n        address account = ecrecover(messageHash, v, r, s);\\n\\n        return account;\\n    }\\n\\n    /**\\n     * @notice Reverts if the given resurrection time is not in the future\\n     * @param resurrectionTime the time to check against block.timestamp\\n     */\\n    function resurrectionInFuture(uint256 resurrectionTime) internal view {\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(resurrectionTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reverts if the current block timestamp is not within the resurrection window\\n     * (window = [resurrection time, resurrection time + grace period] inclusive)\\n     * @param resurrectionTime the resurrection time of the sarcophagus\\n     * (absolute, i.e. a date time stamp)\\n     */\\n    function unwrapTime(uint256 resurrectionTime) internal view {\\n        // revert if too early\\n        if (resurrectionTime > block.timestamp) {\\n            revert LibErrors.TooEarlyToUnwrap(\\n                resurrectionTime,\\n                block.timestamp\\n            );\\n        }\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // revert if too late\\n        if (resurrectionTime + s.gracePeriod < block.timestamp) {\\n            revert LibErrors.TooLateToUnwrap(\\n                resurrectionTime,\\n                s.gracePeriod,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if the archaeologist exists on the sarcophagus.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The boolean true if the archaeologist exists on the sarcophagus\\n    function archaeologistExistsOnSarc(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // If the doubleHashedShard on an archaeologist is 0 (which is its default value),\\n        // then the archaeologist doesn't exist on the sarcophagus\\n        return\\n            s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist]\\n                .unencryptedShardDoubleHash != 0;\\n    }\\n\\n    /// @notice Checks if an archaeologist profile exists and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check existence of\\n    function revertIfArchProfileExists(address archaeologist)\\n        internal\\n        view\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(\\n                false,\\n                archaeologist\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if an archaeologist profile doesn't exist and\\n    /// reverts if so\\n    ///\\n    /// @param archaeologist the archaeologist address to check lack of existence of\\n    function revertIfArchProfileDoesNotExist(address archaeologist)\\n        internal\\n        view\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        if (!s.archaeologistProfiles[archaeologist].exists) {\\n            revert LibErrors.ArchaeologistProfileExistsShouldBe(\\n                true,\\n                archaeologist\\n            );\\n        }\\n    }\\n\\n    /// @notice Gets an archaeologist given the sarcophagus identifier and the\\n    /// archaeologist's address.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The archaeologist\\n    function getArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (LibTypes.ArchaeologistStorage memory)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return s.sarcophagusArchaeologists[sarcoId][archaeologist];\\n    }\\n\\n    /// @notice Calculates the protocol fees to be taken from the embalmer.\\n    /// @return The protocol fees amount\\n    function calculateProtocolFees(uint256 totalDiggingFees) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return (totalDiggingFees * s.protocolFeeBasePercentage) / 100;\\n    }\\n}\\n\",\"keccak256\":\"0x847c25a01b73ab54cd375de984d05b755123438174ca298d2fb9970cedeb7d30\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n// Global storage for the app. Can be accessed in facets and in libraries\\nstruct AppStorage {\\n    IERC20 sarcoToken;\\n    // The percentage (i.e. 1 = 1%) of a sarcophagus' total digging fees that will be collected on\\n    // createSarcophagus and rewrapSarcophagus, paid by the embalmer\\n    uint256 protocolFeeBasePercentage;\\n    // The amount of protocol fees currently stored on the contract\\n    uint256 totalProtocolFees;\\n    // grace period an archaeologist is given to resurrect a sarcophagus after the resurrection time\\n    uint256 gracePeriod;\\n    // threshold after which archaeologist signatures on sarcophagus params expire and the sarcophagus must be renegotiated\\n    uint256 expirationThreshold;\\n    // sarcophagi\\n    bytes32[] sarcophagusIdentifiers;\\n    // archaeologist profiles\\n    address[] archaeologistProfileAddresses;\\n    mapping(address => LibTypes.ArchaeologistProfile) archaeologistProfiles;\\n\\n    // archaeologistSarcoSuccesses is needed by the clean function\\n    // to lookup whether an archaeologist has completed an unwrapping\\n    mapping(address => mapping(bytes32 => bool)) archaeologistSarcoSuccesses;\\n\\n    // Archaeologist reputation statistics\\n    mapping(address => bytes32[]) archaeologistSuccesses;\\n    mapping(address => bytes32[]) archaeologistAccusals;\\n    mapping(address => bytes32[]) archaeologistCleanups;\\n\\n    // Track how much archaeologists have made. To be credited and debited\\n    // as archaeologists fulfill their duties and withdraw their rewards\\n    mapping(address => uint256) archaeologistRewards;\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n    // sarcophagus ownerships\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n    // Mapping of unencrypted shard double hashes to archaeologists who are\\n    // responsible for them. Needed to optimise Accuse algo - unencrypted shard is\\n    // double hashed and used as a constant O(1) lookup here\\n    mapping(bytes32 => address) doubleHashedShardArchaeologists;\\n    // A mapping used to store an archaeologist's data on a sarcophagus.\\n    // Digging fees, storage fees, and the hashed shards of the\\n    // archaeologists all need to be stored per sarcophagus. This mapping of a\\n    // mapping stores the archaeologist's data we need per sarcophagus.\\n    // Example usage (to retrieve the digging fees an archaeologist may claim on some sarcophagus):\\n    //   LibTypes.ArchaeologistStorage bondedArchaeologist = sarcophagusArchaeologists[sarcoId][archAddress];\\n    //   uint256 diggingFees = bondedArchaeologist.diggingFees;\\n    mapping(bytes32 => mapping(address => LibTypes.ArchaeologistStorage)) sarcophagusArchaeologists;\\n}\\n\\nlibrary LibAppStorage {\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        // Set the position of our struct in contract storage\\n        // Since AppStorage s is the first and only state variable declared in\\n        // facets its position in contract storage is 0\\n        assembly {\\n            s.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8344e9d5a7574c1602c4f854e19aa58c255311a057346307663fa56e8b6f5f08\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611670806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633f5e9d6c1461003b5780635c88a8e114610057575b600080fd5b610055600480360381019061005091906110c5565b610073565b005b610071600480360381019061006c919061125e565b6104c0565b005b61007c82610a3a565b600080600d016000848152602001908152602001600020905080600201546000600301546100aa9190611306565b4210156100e3576040517f57f122a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160070180548060200260200160405190810160405280929190818152602001828054801561016957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161011f575b5050505050905060008060005b83518110156104245760008015156000600801600087858151811061019e5761019d61135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060009054906101000a900460ff16151514905080156104105760008060120160008a815260200190815260200160002060008785815181106102365761023561135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180546102b1906113ba565b80601f01602080910402602001604051908101604052809291908181526020018280546102dd906113ba565b801561032a5780601f106102ff5761010080835404028352916020019161032a565b820191906000526020600020905b81548152906001019060200180831161030d57829003601f168201915b50505050508152505090508060000151846103459190611306565b935060006103568260000151610b66565b905080866103649190611306565b955061038a87858151811061037c5761037b61135c565b5b602002602001015182610b70565b6000600b0160008886815181106103a4576103a361135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a908060018154018082558091505060019003906000526020600020016000909190919091505550505b50808061041c906113eb565b915050610176565b5060008061043487878686610cab565b9150915060058660010160006101000a81548160ff021916908360078111156104605761045f611433565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff16887f106e723534f3d39516c80d5e49eb5ac7788139c661267137c40382659d409fb984846040516104ae929190611471565b60405180910390a35050505050505050565b6104c983610a3a565b600080600d01600085815260200190815260200160002090504281600201541015610520576040517f8680d5de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160019054906101000a900460ff1660ff168351101561058e5782518160010160019054906101000a900460ff166040517f5dcc949b0000000000000000000000000000000000000000000000000000000081526004016105859291906114b6565b60405180910390fd5b6000835167ffffffffffffffff8111156105ab576105aa61111b565b5b6040519080825280602002602001820160405280156105d95781602001602082028036833780820191505090505b5090506000806000805b87518110156108185760008882815181106106015761060061135c565b5b602002602001015160405160200161061991906114ee565b604051602081830303815290604052805190602001209050600080601101600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060120160008d815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050828160020154036107d057818886806106d9906113eb565b9750815181106106ec576106eb61135c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006107358260000154610b66565b90508160000154886107479190611306565b975080876107559190611306565b96506107618382610b70565b6000600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208d908060018154018082558091505060019003906000526020600020016000909190919091505550610802565b6040517ff2591c7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050508080610810906113eb565b9150506105e3565b50600080600d0160008a81526020019081526020016000206007018054806020026020016040519081016040528092919081815260200182805480156108b357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610869575b5050505050905060005b815181101561099b5760006001905060005b875181101561095b578781815181106108eb576108ea61135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1684848151811061091c5761091b61135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610948576000915061095b565b8080610953906113eb565b9150506108cf565b508015610987576109868b8484815181106109795761097861135c565b5b6020026020010151610e55565b5b508080610993906113eb565b9150506108bd565b506000806109ab89898789610cab565b9150915060068860010160006101000a81548160ff021916908360078111156109d7576109d6611433565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff168b7f6cee286923fc4de6af78ba8b06ff9f4236e5aad4282a5e13a3cea8446c803fd48484604051610a25929190611471565b60405180910390a35050505050505050505050565b6000610a44610f94565b905060006007811115610a5a57610a59611433565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff166007811115610a9257610a91611433565b5b03610ad457816040517f018da688000000000000000000000000000000000000000000000000000000008152600401610acb91906114ee565b60405180910390fd5b60016007811115610ae857610ae7611433565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff166007811115610b2057610b1f611433565b5b14610b6257816040517f7c6a6d70000000000000000000000000000000000000000000000000000000008152600401610b5991906114ee565b60405180910390fd5b5050565b6000819050919050565b6000610b7a610f94565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154821115610c4b578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401610c42929190611471565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254610c9f9190611509565b92505081905550505050565b6000806000600285610cbd919061156c565b905060008186610ccd9190611509565b90506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8860050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168488610d409190611306565b6040518363ffffffff1660e01b8152600401610d5d9291906115ac565b6020604051808303816000875af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da0919061160d565b506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89836040518363ffffffff1660e01b8152600401610e009291906115ac565b6020604051808303816000875af1158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e43919061160d565b50808293509350505094509492505050565b6000610e5f610f94565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054610eee906113ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1a906113ba565b8015610f675780601f10610f3c57610100808354040283529160200191610f67565b820191906000526020600020905b815481529060010190602001808311610f4a57829003601f168201915b50505050508152505090506000610f818260000151610b66565b9050610f8d8482610f99565b5050505050565b600090565b610fa38282610b70565b610fad8282610fb1565b5050565b6000610fbb610f94565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008282546110119190611306565b92505081905550505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61104481611031565b811461104f57600080fd5b50565b6000813590506110618161103b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109282611067565b9050919050565b6110a281611087565b81146110ad57600080fd5b50565b6000813590506110bf81611099565b92915050565b600080604083850312156110dc576110db611027565b5b60006110ea85828601611052565b92505060206110fb858286016110b0565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111538261110a565b810181811067ffffffffffffffff821117156111725761117161111b565b5b80604052505050565b600061118561101d565b9050611191828261114a565b919050565b600067ffffffffffffffff8211156111b1576111b061111b565b5b602082029050602081019050919050565b600080fd5b60006111da6111d584611196565b61117b565b905080838252602082019050602084028301858111156111fd576111fc6111c2565b5b835b8181101561122657806112128882611052565b8452602084019350506020810190506111ff565b5050509392505050565b600082601f83011261124557611244611105565b5b81356112558482602086016111c7565b91505092915050565b60008060006060848603121561127757611276611027565b5b600061128586828701611052565b935050602084013567ffffffffffffffff8111156112a6576112a561102c565b5b6112b286828701611230565b92505060406112c3868287016110b0565b9150509250925092565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611311826112cd565b915061131c836112cd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611351576113506112d7565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113d257607f821691505b6020821081036113e5576113e461138b565b5b50919050565b60006113f6826112cd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611428576114276112d7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61146b816112cd565b82525050565b60006040820190506114866000830185611462565b6114936020830184611462565b9392505050565b600060ff82169050919050565b6114b08161149a565b82525050565b60006040820190506114cb6000830185611462565b6114d860208301846114a7565b9392505050565b6114e881611031565b82525050565b600060208201905061150360008301846114df565b92915050565b6000611514826112cd565b915061151f836112cd565b925082821015611532576115316112d7565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611577826112cd565b9150611582836112cd565b9250826115925761159161153d565b5b828204905092915050565b6115a681611087565b82525050565b60006040820190506115c1600083018561159d565b6115ce6020830184611462565b9392505050565b60008115159050919050565b6115ea816115d5565b81146115f557600080fd5b50565b600081519050611607816115e1565b92915050565b60006020828403121561162357611622611027565b5b6000611631848285016115f8565b9150509291505056fea26469706673582212206150d150fd80a6f4bf9245b730d995f764fe7d4e1905974d833bfbbc0579429464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80633f5e9d6c1461003b5780635c88a8e114610057575b600080fd5b610055600480360381019061005091906110c5565b610073565b005b610071600480360381019061006c919061125e565b6104c0565b005b61007c82610a3a565b600080600d016000848152602001908152602001600020905080600201546000600301546100aa9190611306565b4210156100e3576040517f57f122a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160070180548060200260200160405190810160405280929190818152602001828054801561016957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161011f575b5050505050905060008060005b83518110156104245760008015156000600801600087858151811061019e5761019d61135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060009054906101000a900460ff16151514905080156104105760008060120160008a815260200190815260200160002060008785815181106102365761023561135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180546102b1906113ba565b80601f01602080910402602001604051908101604052809291908181526020018280546102dd906113ba565b801561032a5780601f106102ff5761010080835404028352916020019161032a565b820191906000526020600020905b81548152906001019060200180831161030d57829003601f168201915b50505050508152505090508060000151846103459190611306565b935060006103568260000151610b66565b905080866103649190611306565b955061038a87858151811061037c5761037b61135c565b5b602002602001015182610b70565b6000600b0160008886815181106103a4576103a361135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208a908060018154018082558091505060019003906000526020600020016000909190919091505550505b50808061041c906113eb565b915050610176565b5060008061043487878686610cab565b9150915060058660010160006101000a81548160ff021916908360078111156104605761045f611433565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff16887f106e723534f3d39516c80d5e49eb5ac7788139c661267137c40382659d409fb984846040516104ae929190611471565b60405180910390a35050505050505050565b6104c983610a3a565b600080600d01600085815260200190815260200160002090504281600201541015610520576040517f8680d5de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010160019054906101000a900460ff1660ff168351101561058e5782518160010160019054906101000a900460ff166040517f5dcc949b0000000000000000000000000000000000000000000000000000000081526004016105859291906114b6565b60405180910390fd5b6000835167ffffffffffffffff8111156105ab576105aa61111b565b5b6040519080825280602002602001820160405280156105d95781602001602082028036833780820191505090505b5090506000806000805b87518110156108185760008882815181106106015761060061135c565b5b602002602001015160405160200161061991906114ee565b604051602081830303815290604052805190602001209050600080601101600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060120160008d815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050828160020154036107d057818886806106d9906113eb565b9750815181106106ec576106eb61135c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006107358260000154610b66565b90508160000154886107479190611306565b975080876107559190611306565b96506107618382610b70565b6000600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208d908060018154018082558091505060019003906000526020600020016000909190919091505550610802565b6040517ff2591c7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050508080610810906113eb565b9150506105e3565b50600080600d0160008a81526020019081526020016000206007018054806020026020016040519081016040528092919081815260200182805480156108b357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610869575b5050505050905060005b815181101561099b5760006001905060005b875181101561095b578781815181106108eb576108ea61135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1684848151811061091c5761091b61135c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610948576000915061095b565b8080610953906113eb565b9150506108cf565b508015610987576109868b8484815181106109795761097861135c565b5b6020026020010151610e55565b5b508080610993906113eb565b9150506108bd565b506000806109ab89898789610cab565b9150915060068860010160006101000a81548160ff021916908360078111156109d7576109d6611433565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff168b7f6cee286923fc4de6af78ba8b06ff9f4236e5aad4282a5e13a3cea8446c803fd48484604051610a25929190611471565b60405180910390a35050505050505050505050565b6000610a44610f94565b905060006007811115610a5a57610a59611433565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff166007811115610a9257610a91611433565b5b03610ad457816040517f018da688000000000000000000000000000000000000000000000000000000008152600401610acb91906114ee565b60405180910390fd5b60016007811115610ae857610ae7611433565b5b81600d01600084815260200190815260200160002060010160009054906101000a900460ff166007811115610b2057610b1f611433565b5b14610b6257816040517f7c6a6d70000000000000000000000000000000000000000000000000000000008152600401610b5991906114ee565b60405180910390fd5b5050565b6000819050919050565b6000610b7a610f94565b90508060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154821115610c4b578060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154826040517faf5a111b000000000000000000000000000000000000000000000000000000008152600401610c42929190611471565b60405180910390fd5b818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254610c9f9190611509565b92505081905550505050565b6000806000600285610cbd919061156c565b905060008186610ccd9190611509565b90506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8860050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168488610d409190611306565b6040518363ffffffff1660e01b8152600401610d5d9291906115ac565b6020604051808303816000875af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da0919061160d565b506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89836040518363ffffffff1660e01b8152600401610e009291906115ac565b6020604051808303816000875af1158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e43919061160d565b50808293509350505094509492505050565b6000610e5f610f94565b9050600081601201600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054610eee906113ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1a906113ba565b8015610f675780601f10610f3c57610100808354040283529160200191610f67565b820191906000526020600020905b815481529060010190602001808311610f4a57829003601f168201915b50505050508152505090506000610f818260000151610b66565b9050610f8d8482610f99565b5050505050565b600090565b610fa38282610b70565b610fad8282610fb1565b5050565b6000610fbb610f94565b9050818160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008282546110119190611306565b92505081905550505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61104481611031565b811461104f57600080fd5b50565b6000813590506110618161103b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109282611067565b9050919050565b6110a281611087565b81146110ad57600080fd5b50565b6000813590506110bf81611099565b92915050565b600080604083850312156110dc576110db611027565b5b60006110ea85828601611052565b92505060206110fb858286016110b0565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111538261110a565b810181811067ffffffffffffffff821117156111725761117161111b565b5b80604052505050565b600061118561101d565b9050611191828261114a565b919050565b600067ffffffffffffffff8211156111b1576111b061111b565b5b602082029050602081019050919050565b600080fd5b60006111da6111d584611196565b61117b565b905080838252602082019050602084028301858111156111fd576111fc6111c2565b5b835b8181101561122657806112128882611052565b8452602084019350506020810190506111ff565b5050509392505050565b600082601f83011261124557611244611105565b5b81356112558482602086016111c7565b91505092915050565b60008060006060848603121561127757611276611027565b5b600061128586828701611052565b935050602084013567ffffffffffffffff8111156112a6576112a561102c565b5b6112b286828701611230565b92505060406112c3868287016110b0565b9150509250925092565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611311826112cd565b915061131c836112cd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611351576113506112d7565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113d257607f821691505b6020821081036113e5576113e461138b565b5b50919050565b60006113f6826112cd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611428576114276112d7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61146b816112cd565b82525050565b60006040820190506114866000830185611462565b6114936020830184611462565b9392505050565b600060ff82169050919050565b6114b08161149a565b82525050565b60006040820190506114cb6000830185611462565b6114d860208301846114a7565b9392505050565b6114e881611031565b82525050565b600060208201905061150360008301846114df565b92915050565b6000611514826112cd565b915061151f836112cd565b925082821015611532576115316112d7565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611577826112cd565b9150611582836112cd565b9250826115925761159161153d565b5b828204905092915050565b6115a681611087565b82525050565b60006040820190506115c1600083018561159d565b6115ce6020830184611462565b9392505050565b60008115159050919050565b6115ea816115d5565b81146115f557600080fd5b50565b600081519050611607816115e1565b92915050565b60006020828403121561162357611622611027565b5b6000611631848285016115f8565b9150509291505056fea26469706673582212206150d150fd80a6f4bf9245b730d995f764fe7d4e1905974d833bfbbc0579429464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accuse(bytes32,bytes32[],address)": {
        "params": {
          "paymentAddress": "the address to which rewards should be sent if successful",
          "sarcoId": "The identifier of the sarcophagus having leaked shards",
          "unencryptedShardHashes": "At least 'm' unencrypted shard hashes as proof of bad behaviour"
        }
      },
      "clean(bytes32,address)": {
        "params": {
          "paymentAddress": "The address to which rewards will be sent",
          "sarcoId": "The identifier of the sarcophagus to clean"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accuse(bytes32,bytes32[],address)": {
        "notice": "Accuse archaeologoists of bad behaviour, by providing proof of leaked unencrypted shards before a sarcophagus is ready to be unwrapped. The minumum number of shards required to unwrap the sarcophagus should be provided for a a successful accusal. of the cursed bonds of the archs back to them, and un-curses their bonds."
      },
      "clean(bytes32,address)": {
        "notice": "Close a sarcophagus that has not been unwrapped within its grace period"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2354,
        "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4551_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SarcophagusState)3869": {
        "encoding": "inplace",
        "label": "enum LibTypes.SarcophagusState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(ArchaeologistProfile)3920_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistProfile)3920_storage"
      },
      "t_mapping(t_address,t_struct(ArchaeologistStorage)3907_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistStorage)3907_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3907_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct LibTypes.ArchaeologistStorage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ArchaeologistStorage)3907_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Sarcophagus)3955_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibTypes.Sarcophagus)",
        "numberOfBytes": "32",
        "value": "t_struct(Sarcophagus)3955_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)4551_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4475,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "sarcoToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 4477,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "protocolFeeBasePercentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4479,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "totalProtocolFees",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4481,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "gracePeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4483,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "expirationThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4486,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "sarcophagusIdentifiers",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4489,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "archaeologistProfileAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4494,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "archaeologistProfiles",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(ArchaeologistProfile)3920_storage)"
          },
          {
            "astId": 4500,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "archaeologistSarcoSuccesses",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
          },
          {
            "astId": 4505,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "archaeologistSuccesses",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4510,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "archaeologistAccusals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4515,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "archaeologistCleanups",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4519,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "archaeologistRewards",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4524,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "sarcophagi",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_bytes32,t_struct(Sarcophagus)3955_storage)"
          },
          {
            "astId": 4529,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "embalmerSarcophagi",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4534,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "archaeologistSarcophagi",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4539,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "recipientSarcophagi",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 4543,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "doubleHashedShardArchaeologists",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 4550,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "sarcophagusArchaeologists",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3907_storage))"
          }
        ],
        "numberOfBytes": "608"
      },
      "t_struct(ArchaeologistProfile)3920_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistProfile",
        "members": [
          {
            "astId": 3909,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3911,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3913,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "minimumDiggingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3915,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3917,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "freeBond",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3919,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "cursedBond",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ArchaeologistStorage)3907_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistStorage",
        "members": [
          {
            "astId": 3900,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "diggingFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3902,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "diggingFeesPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3904,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "unencryptedShardDoubleHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 3906,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "unencryptedShard",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Sarcophagus)3955_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.Sarcophagus",
        "members": [
          {
            "astId": 3935,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3938,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(SarcophagusState)3869"
          },
          {
            "astId": 3940,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "minShards",
            "offset": 1,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 3942,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "resurrectionTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3944,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "maximumRewrapInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3947,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "arweaveTxIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3949,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "embalmer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3951,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3954,
            "contract": "contracts/facets/ThirdPartyFacet.sol:ThirdPartyFacet",
            "label": "archaeologists",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}